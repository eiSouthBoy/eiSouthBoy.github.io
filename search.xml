<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>esp: button component</title>
    <url>/2024/11/26/2024/esp-button-component/</url>
    <content><![CDATA[<h2 id="button组件"><a href="#button组件" class="headerlink" title="button组件"></a>button组件</h2><p><a href="https://components.espressif.com/">esp组件仓库</a>  </p>
<ul>
<li><a href="https://components.espressif.com/components/espressif/button/versions/3.4.0">espressif&#x2F;button</a>：当前最新版本是v3.4.0</li>
</ul>
<p>如何将button组件添加到目标项目？</p>
<blockquote>
<p>Please use the component manager command <code>add-dependency</code> to add the <code>button</code> to your project’s dependency, during the <code>CMake</code> step the component will be downloaded automatically</p>
<p>释义：请使用 add-dependency 组件管理命令将 button 添加到目标项目依赖，在执行 CMake 步骤时，button 组件将会被自动下载到目标项目。</p>
</blockquote>
<p>组件管理命令添加button组件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加指定button最新版本依赖</span></span><br><span class="line">idf.py add-dependency <span class="string">&quot;espressif/button=*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定button指定版本组件依赖</span></span><br><span class="line">idf.py add-dependency <span class="string">&quot;espressif/button^3.4.0&quot;</span></span><br></pre></td></tr></table></figure>

<p>组件管理命令执行后，在项目的 main 文件夹下将出现 <code>idf_component.yml</code> 文件，文件内容如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## IDF Component Manager Manifest File</span></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">espressif/button:</span> <span class="string">&quot;^3.4.0&quot;</span></span><br><span class="line">  <span class="comment">## Required IDF version</span></span><br><span class="line">  <span class="attr">idf:</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">&quot;&gt;=4.1.0&quot;</span></span><br><span class="line">  <span class="comment"># # Put list of dependencies here</span></span><br><span class="line">  <span class="comment"># # For components maintained by Espressif:</span></span><br><span class="line">  <span class="comment"># component: &quot;~1.0.0&quot;</span></span><br><span class="line">  <span class="comment"># # For 3rd party components:</span></span><br><span class="line">  <span class="comment"># username/component: &quot;&gt;=1.0.0,&lt;2.0.0&quot;</span></span><br><span class="line">  <span class="comment"># username2/component2:</span></span><br><span class="line">  <span class="comment">#   version: &quot;~1.0.0&quot;</span></span><br><span class="line">  <span class="comment">#   # For transient dependencies `public` flag can be set.</span></span><br><span class="line">  <span class="comment">#   # `public` flag doesn&#x27;t have an effect dependencies of the `main` component.</span></span><br><span class="line">  <span class="comment">#   # All dependencies of `main` are public by default.</span></span><br><span class="line">  <span class="comment">#   public: true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行 <code>idf.py build</code> 完成后，在项目下创建了 <code>managed_components</code> 文件夹，该文件夹有下载的组件：<code>espressif__button</code> 和 <code>espressif__cmake_utilities</code></p>
<p>同时发现还有其他文件被新建：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pi@pi-NMH-WCX9:~/esp/app-example/get-started/button$ <span class="built_in">ls</span> -al</span><br><span class="line">total 84</span><br><span class="line">drwxrwxr-x  5 pi pi  4096 11月 26 14:39 .</span><br><span class="line">drwxrwxr-x 16 pi pi  4096 11月 20 14:18 ..</span><br><span class="line">drwxrwxr-x  8 pi pi  4096 11月 26 14:39 build</span><br><span class="line">-rw-rw-r--  1 pi pi   244 11月 26 14:36 CMakeLists.txt</span><br><span class="line">-rw-rw-r--  1 pi pi   637 11月 26 14:39 dependencies.lock</span><br><span class="line">drwxrwxr-x  2 pi pi  4096 11月 26 14:12 main</span><br><span class="line">drwxrwxr-x  4 pi pi  4096 11月 26 14:39 managed_components</span><br><span class="line">-rw-rw-r--  1 pi pi 56876 11月 26 14:39 sdkconfig</span><br></pre></td></tr></table></figure>

<p>很明显，dependencies.lock、sdkconfig文件是自动新建的，managed_components文件夹也是自动被新建的。</p>
]]></content>
      <categories>
        <category>esp</category>
      </categories>
      <tags>
        <tag>button按键组件</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 22.04: VirtualBox7</title>
    <url>/2024/11/26/2024/Ubuntu-22-04-VirtualBox7/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://www.virtualbox.org/">Oracle Virtualbox</a> VirtualBox 是一款开源虚拟机软件。由德国 Innotek 公司开发，Sun Microsystems 公司出品。使用 Qt 编写，在 Sun 被 Oracle 收购后正式更名成 Oracle VM VirtualBox。采用 GPL 协议开源。</p>
<p><strong>注意：先进入PC的BIOS系统关闭安全启动（Secure Boot），否则VirtualBox起不来</strong></p>
<ul>
<li><p>安装VirtualBox7</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入GPG秘钥</span></span><br><span class="line">wget -O- https://www.virtualbox.org/download/oracle_vbox_2016.asc | <span class="built_in">sudo</span> gpg --dearmor --<span class="built_in">yes</span> --output /usr/share/keyrings/oracle-virtualbox-2016.gpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加仓库地址，Ubuntu 22.04自带的仓库中VirtualBox版本比较旧，好像是v6.5</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/oracle-virtualbox-2016.gpg] http://download.virtualbox.org/virtualbox/debian <span class="subst">$(. /etc/os-release &amp;&amp; echo <span class="string">&quot;<span class="variable">$VERSION_CODENAME</span>&quot;</span>)</span> contrib&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/virtualbox.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新软件包列表</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装7.0版本</span></span><br><span class="line"><span class="built_in">sudo</span> apt install virtualbox-7.0</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装VirtualBox 扩展包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查已安装的VirtualBox版本</span></span><br><span class="line">pi@pi-NMH-WCX9:~$ vboxmanage -v | <span class="built_in">cut</span> -dr -f1</span><br><span class="line">7.0.22</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载对应的扩展包</span></span><br><span class="line">wget https://download.virtualbox.org/virtualbox/7.0.22/Oracle_VM_VirtualBox_Extension_Pack-7.0.22.vbox-extpack</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装对应的扩展包</span></span><br><span class="line"><span class="built_in">sudo</span> vboxmanage extpack install Oracle_VM_VirtualBox_Extension_Pack-7.0.22.vbox-extpack</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查已安装的扩展包版本</span></span><br><span class="line">pi@pi-NMH-WCX9:~$ vboxmanage list extpacks</span><br><span class="line">Extension Packs: 1</span><br><span class="line">Pack no. 0:   Oracle VM VirtualBox Extension Pack</span><br><span class="line">Version:        7.0.22</span><br><span class="line">Revision:       165102</span><br><span class="line">Edition:        </span><br><span class="line">Description:    Oracle Cloud Infrastructure integration, Host Webcam, VirtualBox RDP, PXE ROM, Disk Encryption, NVMe, full VM encryption.</span><br><span class="line">VRDE Module:    VBoxVRDP</span><br><span class="line">Crypto Module:  VBoxPuelCrypto</span><br><span class="line">Usable:         <span class="literal">true</span></span><br><span class="line">Why unusable: </span><br></pre></td></tr></table></figure>
</li>
<li><p>添加当前用户到vboxusers组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> usermod -aG vboxusers <span class="variable">$USER</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>VirtualBox7</tag>
      </tags>
  </entry>
  <entry>
    <title>WAN/LAN 自适应</title>
    <url>/2024/11/23/2024/WAN-LAN-adaptive/</url>
    <content><![CDATA[<h2 id="网口的类型"><a href="#网口的类型" class="headerlink" title="网口的类型"></a>网口的类型</h2><p>一般家用路由器网口会标明：LAN、WAN、WAN&#x2F;LAN，例如：</p>
<p><img src="/home/caojun/.config/Typora/typora-user-images/image-20241123182945665.png" alt="image-20241123182945665"></p>
<ul>
<li>WAN网口：Wide Area Network，广域网，例如互联网。</li>
<li>LAN网口：Local Area Network，局域网，例如家庭内部网络、办公室内部网络。</li>
<li>WAN&#x2F;LAN自适应网口：</li>
</ul>
<p><em>注意：早期路由器上的网线接口是区分WAN口、LAN口的。WAN口用来连接光猫、宽带猫、上网网线的;LAN接口使用来连接电脑、电视机、机顶盒等网络设备的。</em></p>
]]></content>
      <categories>
        <category>Wi-Fi</category>
      </categories>
      <tags>
        <tag>WAN/LAN</tag>
      </tags>
  </entry>
  <entry>
    <title>esp: Hardware Communation Interface Or Protocol</title>
    <url>/2024/11/17/2024/esp-Hardware-Communation-Interface-Or-Protocol/</url>
    <content><![CDATA[<blockquote>
<p>以下内容来自AI的回答</p>
</blockquote>
<p>在嵌入式系统设计中，硬件通信接口或协议是实现不同设备之间数据交换的关键。这些接口和协议根据传输距离、速度、功耗等因素的不同而有所区别。下面是一些常见的硬件通信接口或协议：</p>
<ol>
<li><p><strong>UART (Universal Asynchronous Receiver&#x2F;Transmitter)</strong></p>
<ul>
<li>UART 是一种非常基础的串行通信协议，它允许两个设备之间进行异步数据传输。它简单易用，适用于短距离通信。</li>
</ul>
</li>
<li><p><strong>SPI (Serial Peripheral Interface)</strong></p>
<ul>
<li>SPI 是一种同步串行通信接口，通常用于微控制器与一个或多个外设之间的短距离通信。它使用主从架构，支持全双工通信。</li>
</ul>
</li>
<li><p><strong>I2C (Inter-Integrated Circuit)</strong></p>
<ul>
<li>I2C 是一种多主机总线，使用两根线（SDA 数据线和 SCL 时钟线）进行半双工通信。它广泛应用于需要连接多个低速外围设备的场合。</li>
</ul>
</li>
<li><p><strong>CAN (Controller Area Network)</strong></p>
<ul>
<li>CAN 协议是一种有效支持分布式实时控制的串行通信网络，主要用于汽车和工业自动化领域，具有较强的抗干扰能力。</li>
</ul>
</li>
<li><p><strong>USB (Universal Serial Bus)</strong></p>
<ul>
<li>USB 是一种通用的串行总线标准，用于建立计算机与其外部设备之间的连接。它支持热插拔和即插即用功能。</li>
</ul>
</li>
<li><p><strong>Ethernet (以太网)</strong></p>
<ul>
<li>以太网是一种广泛使用的局域网技术，可以实现高速的数据传输。在嵌入式系统中，以太网接口常用于连接互联网或构建本地网络。</li>
</ul>
</li>
<li><p><strong>Modbus</strong></p>
<ul>
<li>Modbus 是一种工业标准通信协议，用于控制器与执行器之间的通信。它支持RTU和ASCII两种模式，适用于工业自动化环境。</li>
</ul>
</li>
<li><p><strong>RS-232, RS-422, RS-485</strong></p>
<ul>
<li>这些是串行通信的标准，其中RS-232主要用于点对点通信，而RS-422和RS-485则支持多点网络，并且具有更好的电气特性，适合长距离通信。</li>
</ul>
</li>
<li><p><strong>Bluetooth (蓝牙)</strong></p>
<ul>
<li>蓝牙是一种无线通信技术，适用于短距离内的设备互联，如移动电话、笔记本电脑和个人数字助理(PDA)等。</li>
</ul>
</li>
<li><p><strong>Wi-Fi (Wireless Fidelity)</strong></p>
<ul>
<li>Wi-Fi 技术允许电子设备通过无线局域网(WLAN)连接到互联网。它是许多现代嵌入式系统和物联网(IoT)设备中的重要组成部分。</li>
</ul>
</li>
<li><p><strong>Zigbee</strong></p>
<ul>
<li>Zigbee 是一种基于IEEE 802.15.4标准的低功耗、低数据速率的无线通信技术，特别适合于传感器网络和家庭自动化应用。</li>
</ul>
</li>
<li><p><strong>Thread</strong> </p>
<p>Thread 是一种低功耗、基于 IPv6 的无线网络协议，旨在为家庭和工业环境中的物联网设备提供可靠、安全的通信。它建立在 IEEE 802.15.4 标准之上，类似于 Zigbee，但提供了更强大的网络管理和安全性功能。</p>
</li>
<li><p><strong>NFC (Near Field Communication)</strong></p>
<ul>
<li>NFC 是一种短距离的高频无线通信技术，使两个电子设备（其中一个通常是移动电话）在彼此靠近时能够交换数据。</li>
</ul>
</li>
<li><p><strong>I2S (Inter-IC Sound)</strong></p>
<ul>
<li>I2S 是一种专为音频设备间传输声音数据而设计的数字接口。它定义了一种标准格式，用于在集成电路之间高效地传输高质量的音频信号。I2S 接口通常用于连接数字音频处理器、DAC（数模转换器）和ADC（模数转换器）等组件。</li>
</ul>
</li>
<li><p><strong>SDIO (Secure Digital Input Output)</strong></p>
<ul>
<li>SDIO 是一种扩展了SD卡标准的接口，允许设备通过相同的物理接口与多种类型的外设进行通信，例如Wi-Fi模块、蓝牙模块、GPS接收器等。它为嵌入式系统提供了一个灵活且标准化的方法来增加功能而不必改变硬件设计。</li>
</ul>
</li>
<li><p><strong>PWM (Pulse Width Modulation)</strong></p>
<ul>
<li>PWM 不是一个通信协议，而是一种信号调制方法，常用于控制电机的速度、LED的亮度等需要模拟输出的应用场景。通过改变脉冲宽度来调整输出信号的平均值，从而实现对负载的有效控制。在嵌入式系统中，PWM 通常由定时器或专门的PWM控制器产生。</li>
</ul>
</li>
<li><p><strong>RMT</strong>（Remote Control Protocol） 主要用于处理脉冲信号，特别是在红外通信中。它可以用来接收和发送经过调制的脉冲信号，比如常见的红外遥控信号。RMT 功能通常集成在某些微控制器或SoC（System on Chip）中，特别是那些针对智能家居、消费电子等领域的芯片。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>esp</category>
      </categories>
      <tags>
        <tag>esp32</tag>
        <tag>Interface</tag>
        <tag>Protocol</tag>
      </tags>
  </entry>
  <entry>
    <title>esp: Automatic Bootloader</title>
    <url>/2024/11/17/2024/esp-Automatic-Bootloader/</url>
    <content><![CDATA[<blockquote>
<p>下载模式、烧录模式、Boot模式、Boot Mode都是同样的意思！！！</p>
</blockquote>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在对esp32开发板烧录固件时，每次都要先按住boot键不放，然后按住en键，此时才能进入烧录模式。感觉麻烦的，要是有一种自动下载模式就好了，无需开发者去操作按键，直接烧录就行。</p>
<p><img src="/2024/11/17/2024/esp-Automatic-Bootloader/image-20241117132345736.png" alt="image-20241117132345736"></p>
<p>下载模式分为：自动下载模式 和 手动下载模式。但有一个前提，如何进入下载模式？</p>
<p>EN（也称为RST）上升沿（从低电平到高电平）时候，检测到GPIO0（也称为Boot）为低电平，进入下载模式。具体操作方式有两种：</p>
<ul>
<li>方式1：先按住Boot键不放，然后按住EN键</li>
<li>方式2：先按住Boot键不放，然后断电和上电操作</li>
</ul>
<p><em>注意：默认GPIO0为高电平，当按下Boot键后，GPIO0为低电平。可以查看开发板原理图得知</em></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>那么开发板的自动下载模式的原理是什么呢？其实是通过电路模拟了进入Boot模式操作。</p>
<p>乐鑫解释了如何进入自动下载模式，如下：</p>
<blockquote>
<p><code>esptool.py</code> resets ESP32 automatically by asserting <code>DTR</code> and <code>RTS</code> control lines of the USB to serial converter chip, i.e., FTDI, CP210x, or CH340x. The <code>DTR</code> and <code>RTS</code> control lines are in turn connected to <code>GPIO0</code> and <code>EN</code> (<code>CHIP_PU</code>) pins of ESP32, thus changes in the voltage levels of <code>DTR</code> and <code>RTS</code> will boot the ESP32 into Firmware Download mode.</p>
<p>Note：When developing <code>esptool.py</code>, keep in mind <code>DTR</code> and <code>RTS</code> are active low signals, i.e., <code>True</code> &#x3D; pin @ 0V, <code>False</code> &#x3D; pin @ VCC.</p>
<p>释义：esptool.py 通过置位 USB 转串口转换器芯片（即 FTDI、CP210x 或 CH340x）的 DTR 和 RTS 控制线来自动重置 ESP32。DTR 和 RTS 控制线依次连接到 ESP32 的 GPIO0 和 EN（CHIP_PU）引脚，因此 DTR 和 RTS 的电压变化将使 ESP32 进入固件下载模式。</p>
<p>注意：在开发 esptool.py 时，请记住 DTR 和 RTS 是低电平有效信号，即 True &#x3D; 引脚 @ 0V，False &#x3D; 引脚 @ VCC。</p>
</blockquote>
<p>先来看开发板的原理图（依次为 图1 和 图2）：</p>
<p><img src="/2024/11/17/2024/esp-Automatic-Bootloader/image-20241117173318335.png" alt="image-20241117173318335"></p>
<p><img src="/2024/11/17/2024/esp-Automatic-Bootloader/image-20241117140224096.png" alt="image-20241117140224096"></p>
<p>这里可能会有一个疑问：DTR 和 RTS 在哪里？这两个引脚在 CP2102N芯片上（USB-UART Bridge 电路）</p>
<p><strong>串口流控机制：</strong></p>
<ul>
<li>DTR： Data Terminal Ready，数据终端准备好，低有效</li>
<li>RTS：Request To Send，请求发送，低有效</li>
</ul>
<p>另外 “Auto program” 中是有规律的，规律如下：</p>
<ol>
<li>当 DTR 和 RTS 同时为 0 或者同时为 1 时，三极管 Q1 和 Q2 均为截止状态，此时 EN 和 IO0 的状态由其他电路决定（内部&#x2F;外部上拉电阻）。</li>
<li>当 DTR 和 RTS 不同时，EN &#x3D; RTS, IO0 &#x3D; DTR。</li>
</ol>
<p>自动进入下载模式的顺序应该是这样的（芯片断电，然后上电）：（EN&#x3D;0， IO0&#x3D;0）–&gt;（EN&#x3D;1，IO0&#x3D;0），可是看上图的 “Auto program” 是没有（EN&#x3D;0， IO0&#x3D;0）这种逻辑的。如果没有这个逻辑，那么是无法进入下载模式的。（暂时先不管）</p>
<p>查看esptool.py关于自动下载模式的实现，在 <a href="https://github.com/espressif/esptool/blob/master/esptool/reset.py">esptool&#x2F;reset.py</a> 找到了具体逻辑实现：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassicReset</span>(<span class="title class_ inherited__">ResetStrategy</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Classic reset sequence, sets DTR and RTS lines sequentially.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>._setDTR(<span class="literal">False</span>)  <span class="comment"># IO0=HIGH</span></span><br><span class="line">        <span class="variable language_">self</span>._setRTS(<span class="literal">True</span>)  <span class="comment"># EN=LOW, chip in reset			(1)</span></span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="variable language_">self</span>._setDTR(<span class="literal">True</span>)  <span class="comment"># IO0=LOW 						(2)</span></span><br><span class="line">        <span class="variable language_">self</span>._setRTS(<span class="literal">False</span>)  <span class="comment"># EN=HIGH, chip out of reset 	(3)</span></span><br><span class="line">        time.sleep(<span class="variable language_">self</span>.reset_delay)</span><br><span class="line">        <span class="variable language_">self</span>._setDTR(<span class="literal">False</span>)  <span class="comment"># IO0=HIGH, done 				(4)</span></span><br></pre></td></tr></table></figure>

<p>这里有两个疑惑：为什么在 (1) 和 (2)之间要sleep?   为甚么 (3) 和 (4) 之间要sleep? </p>
<p><strong>在(1)之后，设置EN&#x3D;0，由于充放电电路（图1）中的电容需要放电，所以EN并不是一下子从高电平1突变至低电平0，而是有一个放电时间。故这里 sleep 0.1秒，确保EN一定是低电平0。此时，芯片开始复位。</strong></p>
<p><strong>在(3)之后，设置EN&#x3D;1，由于充放电电路（图1）中的电容需要充电，所以并不是一下从低电平0突变至高电平1，而是有一个充电时间。故这里 sleep reset_delay 秒，确保EN一定是高电平1。在EN从低电平到高电平（上升沿）时，检测到IO0为低电平0，芯片开始下载模式。</strong></p>
<h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p>esptool 通过USB发送了什么数据给串口芯片的DTR和RTS呢？</p>
<p>先把USB转串口电路的原理看下：</p>
<p><img src="/2024/11/17/2024/esp-Automatic-Bootloader/image-20241119134619149.png" alt="image-20241119134619149"></p>
<p>首先从USB到串口芯片CP2102N只有两根信号线：USB_DN 和 USB_DP。然后通过串口芯片CP2102N出来了4根信号线：RXD、TXD；DTR（Data Terminal Ready、RTS（Request to Send）。其中RXD和TXD连接到MCU的TXD0和RXD0，而DTR和RTS分别连接到Q1（NPN三极管）和Q2（NPN）的基级，用于间接控制MCU的EN和IO0。</p>
<p>esptool 使用了 pyserial 库，可以打开串口，然后直接控制 DTR 和 RTS，经过Q1 和 Q2 的电路特性间接控制MCU 的EN 和 IO0，只要控制 DTR 和 RTS 满足 MCU 进入下载模式的条件，即可使 MCU 进入下载模式。</p>
<p>编译 Python 程序，使用 ESP32 先进入烧录模式，然后重启 ESP32</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一步：确定串口名，分为两种情况 </span></span><br><span class="line"><span class="comment">#   1）对于给定目标串口名(例如 /dev/ttyUSB0 or /dev/ttyACM0)</span></span><br><span class="line"><span class="comment">#   2）没有指定目标串口名，需要在计算机上编译所有的的串口，然后指定一个可用串口名</span></span><br><span class="line"><span class="comment"># 第二步：打开串口</span></span><br><span class="line"><span class="comment"># 第三步：使用串口Read or Write 数据</span></span><br><span class="line"><span class="comment"># 第四步：关闭串口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> serial <span class="comment">#导入模块</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">open_serial_port</span>(<span class="params">port, baudrate=<span class="number">9600</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    打开指定的串口。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param port: 串口号，例如 &#x27;COM1&#x27; 或 &#x27;/dev/ttyUSB0&#x27;</span></span><br><span class="line"><span class="string">    :param baudrate: 波特率，默认为 9600</span></span><br><span class="line"><span class="string">    :return: Serial 对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ser = serial.Serial(port, baudrate, timeout=<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Open port <span class="subst">&#123;port&#125;</span> success&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> ser</span><br><span class="line">    <span class="keyword">except</span> serial.SerialException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Open port <span class="subst">&#123;port&#125;</span> fail: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_data</span>(<span class="params">ser</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从串口读取数据。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param ser: Serial 对象</span></span><br><span class="line"><span class="string">    :return: 读取的数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> ser <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> ser.is_open:</span><br><span class="line">        <span class="comment"># 读取一行数据</span></span><br><span class="line">        line = ser.readline()</span><br><span class="line">        <span class="keyword">if</span> line:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Recv Data: <span class="subst">&#123;line.decode(<span class="string">&#x27;utf-8&#x27;</span>).strip()&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Not Recv Data&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;serial not open&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_data_cb</span>(<span class="params">ser, stop_event</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从串口读取数据的函数，运行在一个单独的线程中。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param ser: Serial 对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        received_data = []</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> stop_event.is_set():</span><br><span class="line">            <span class="keyword">if</span> ser.in_waiting &gt; <span class="number">0</span>:</span><br><span class="line">                line = ser.readline()</span><br><span class="line">                <span class="keyword">if</span> line:</span><br><span class="line">                    data = line.decode(<span class="string">&#x27;utf-8&#x27;</span>).strip()</span><br><span class="line">                    received_data.append(data)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;Recv Data: <span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line">            time.sleep(<span class="number">0.01</span>)  <span class="comment"># 避免CPU占用过高</span></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Data reading stopped.&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_data</span>(<span class="params">ser, data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    向串口发送数据。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param ser: Serial 对象</span></span><br><span class="line"><span class="string">    :param data: 要发送的数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> ser <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> ser.is_open:</span><br><span class="line">        <span class="comment"># 发送数据</span></span><br><span class="line">        ser.write(data.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Send Data: <span class="subst">&#123;data.strip()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Serial not open&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ClassicReset</span>(<span class="params">ser</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Classic reset sequence, sets DTR and RTS lines sequentially.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ser.dtr = <span class="literal">False</span>  <span class="comment"># IO0=HIGH</span></span><br><span class="line">    ser.rts = <span class="literal">True</span>  <span class="comment"># EN=LOW, chip in reset</span></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    ser.dtr = <span class="literal">True</span>  <span class="comment"># IO0=LOW</span></span><br><span class="line">    ser.rts = <span class="literal">False</span>  <span class="comment"># EN=HIGH, chip out of reset</span></span><br><span class="line">    <span class="comment"># default time (0.05) to wait before releasing boot pin after reset</span></span><br><span class="line">    time.sleep(<span class="number">0.05</span>)</span><br><span class="line">    ser.dtr = <span class="literal">False</span>  <span class="comment"># IO0=HIGH, done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">HardReset</span>(<span class="params">ser</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Reset sequence for hard resetting the chip.</span></span><br><span class="line"><span class="string">    Can be used to reset out of the bootloader or to restart a running app.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ser.dtr = <span class="literal">False</span></span><br><span class="line">    ser.rts = <span class="literal">True</span>  <span class="comment"># EN-&gt;LOW</span></span><br><span class="line">    <span class="comment"># Give the chip some time to come out of reset,</span></span><br><span class="line">    <span class="comment"># to be able to handle further DTR/RTS transitions</span></span><br><span class="line">    time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    ser.rts = <span class="literal">False</span></span><br><span class="line">    time.sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 设置串口参数</span></span><br><span class="line">    port = <span class="string">&#x27;/dev/ttyUSB0&#x27;</span>  <span class="comment"># 根据你的设备修改此值</span></span><br><span class="line">    baudrate = <span class="number">115200</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开串口</span></span><br><span class="line">    ser = open_serial_port(port, baudrate)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ser <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 创建一个线程来读取串口数据</span></span><br><span class="line">            stop_event = threading.Event()</span><br><span class="line">            read_thread = threading.Thread(target=read_data_cb, args=(ser, stop_event))</span><br><span class="line">            read_thread.start()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 发送数据</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;--&gt; ESP32 autoboot mode&quot;</span>)</span><br><span class="line">            ClassicReset(ser) <span class="comment"># 设置DTR 和 RTS，将ESP32进入烧录模式</span></span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;--&gt; ESP32 reset&quot;</span>)</span><br><span class="line">            HardReset(ser) <span class="comment"># 设置RTS，复位ESP32</span></span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="comment"># 输入数据</span></span><br><span class="line">                user_input = <span class="built_in">input</span>(<span class="string">&quot;Please input send data:&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> user_input.lower() <span class="keyword">in</span> [<span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;quit&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>]:</span><br><span class="line">                    stop_event.<span class="built_in">set</span>() <span class="comment"># 通知子线程结束</span></span><br><span class="line">                    read_thread.join() <span class="comment"># 等待子线程结束</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 发送数据</span></span><br><span class="line">                write_data(ser, user_input + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Program is interrupted(Ctrl+C) by user&quot;</span>)</span><br><span class="line">            stop_event.<span class="built_in">set</span>() <span class="comment"># 通知子线程结束</span></span><br><span class="line">            read_thread.join() <span class="comment"># 等待子线程结束</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 关闭串口</span></span><br><span class="line">            ser.close()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Port <span class="subst">&#123;port&#125;</span> close&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>







<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.muselab-tech.com/esp8266-esp32zi-dong-xia-zai-dian-lu-yuan-li-fen-xi/">ESP8266&#x2F;ESP32自动下载电路原理分析</a></p>
<p><a href="https://docs.espressif.com/projects/esptool/en/latest/esp32/advanced-topics/boot-mode-selection.html">Boot Mode Selection</a></p>
<p><a href="https://github.com/espressif/esptool/tree/master">esptool</a></p>
<p><a href="https://www.cnblogs.com/tangwc/p/18523621">ESP32自动下载电路</a></p>
<p><a href="https://wzx046.github.io/post/37/">ESP32自动下载电路分析</a></p>
]]></content>
      <categories>
        <category>esp</category>
      </categories>
      <tags>
        <tag>esp32</tag>
        <tag>Automatic Bootloader</tag>
      </tags>
  </entry>
  <entry>
    <title>Captive Portal</title>
    <url>/2024/11/16/2024/Captive-Portal/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在校园、机场、酒店、银行、咖啡店、肯德基、麦当劳等场所连接 WiFi 时，你发现不用输入WiFi 的密码，而是弹出一个网页。有的需要你输入手机号并点击获取验证码，并将通过短信获取的验证码输入，你就可以正常上网了。有的需要你输入正确的账号和密码并点击登录，然后你也可以上网。</p>
<p>那么问题来了，为什么我在家里连接 WiFi 时，并没有弹出所谓的网页呢？经过我在浏览器的疯狂搜索和浏览，原来使用一种叫做 “Captive Portal” 的技术实现。</p>
<h2 id="captive-portal"><a href="#captive-portal" class="headerlink" title="captive portal"></a>captive portal</h2><p>captive portal（中文称之为 <strong>强制门户</strong>）是一种通过 Web 浏览器访问的网页，在授予新连接的 Wi-Fi 或有线网络用户更广泛的网络资源访问权限之前，会向他们显示该网页。强制门户通常用于显示着陆页或登录页面，该页面可能要求身份验证、付款、接受最终用户许可协议可接受使用政策、完成调查或提供主机和用户都同意遵守的其他有效凭证。强制门户广泛用于各种移动和步行宽带服务，包括有线和商业提供的 Wi-Fi 和家庭热点。强制门户还可用于提供对企业或住宅有线网络的访问，例如公寓、酒店房间和商务中心。</p>
<p><img src="/2024/11/16/2024/Captive-Portal/image-20241116191019492.png" alt="image-20241116191019492"></p>
<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>自动弹出Captive Portal认证页面实现原理：终端（手机、平板、电脑等设备）连接到WiFi后（一般该WiFi加密方式为OPEN），主动发出HTTP的探测请求报文，检测目的地址是否可达，以及回应的内容是否符合预期，以此来判断接入的网络是否需要进行Captive Portal认证。终端探测的目标URL一般是固定的网址，各终端或APP应用存在差异。如果目标URL不可达或回应内容不符合预期，那么终端会调用浏览器再次发出HTTP请求，路由器拦截到此请求进行重定向，实现自动弹出Captive Portal认证页面的功能。</p>
<p>某些终端无法自动弹出页面的原因：</p>
<ul>
<li>终端不会主动发出探测请求报文。</li>
<li>终端可以发出一次探测请求报文，但是由于某些安装的APP影响导致终端无法调用浏览器再次发出请求，无法自动弹出页面。</li>
<li>大部分安卓手机，自动弹portal功能，依赖用户手动点击ssid界面进行触发。</li>
</ul>
<p>不同平台对应的测试固定网址如下：</p>
<table>
<thead>
<tr>
<th><strong>Platform</strong></th>
<th><strong>Test URL</strong></th>
<th><strong>Expected response</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Apple (MacOS&#x2F;IOS Family)</td>
<td><a href="http://captive.apple.com/hotspot-detect.html">http://captive.apple.com/hotspot-detect.html</a></td>
<td>“Success” (plain text)</td>
</tr>
<tr>
<td>Google (Android&#x2F;ChromeOS)</td>
<td><a href="http://connectivitycheck.gstatic.com/generate_204">http://connectivitycheck.gstatic.com/generate_204</a></td>
<td>HTTP status code 204 with an empty body</td>
</tr>
<tr>
<td>Windows</td>
<td><a href="http://www.msftconnecttest.com/connecttest.txt">http://www.msftconnecttest.com/connecttest.txt</a></td>
<td>“Microsoft Connect Test” (plain text)</td>
</tr>
<tr>
<td>NetworkManager (GNOME)</td>
<td><a href="http://nmcheck.gnome.org/check_network_status.txt">http://nmcheck.gnome.org/check_network_status.txt</a></td>
<td>“NetworkManager is online” (plain text)</td>
</tr>
<tr>
<td>NetworkManager (KDE Plasma)</td>
<td><a href="http://networkcheck.kde.org/">http://networkcheck.kde.org/</a></td>
<td>“OK” (plain text)</td>
</tr>
</tbody></table>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>captive portal的实现方式：</p>
<ul>
<li>DNS拦截：将所有 DNS 请求指向自己的 portal 地址</li>
<li>HTTP重定向：直接劫持 HTTP&#x2F;HTTPS 流量，响应自己的页面</li>
</ul>
<p><em>注意：仅网关实现了Captive Portal还不够，还不能自动弹出认证页面。需要操作系统支持才能实现在网络连接后主动弹出认证页面的功能。</em></p>
<h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>今天（2024-11-17）上午我连接上了图书馆的WiFi（ssid&#x3D;reader），在Ubuntu系统消息中心上弹出了Web认证消息，点击后就可以跳转到网页。此时我的WifI图标还是带问号，但我输入正确的账号和密码，就成功跳转到图书馆的官网主页，同时WiFI图标的问号消失。</p>
<p>我使用 wireshark 把这个过程的数据包都抓下来了。当我点击 reader WiFi网络时，此时我其实已经连接上了 reader WiFi网络，我的IP地址是 <code>10.5.243.105</code>，只是无法接入互联网。在wireshark 中出现了很多 mDNS 数据包，按照正常的步骤，Ubuntu 应该会尝试去访问固定的URL，那么首先要进行DNS解析，所有先把 DNS 数据包过滤出来。</p>
<p>Ubuntu 会发出 DNS 数据包，这个数据包的作用是：请求本地网关帮我解析域名 <code>connectivity-check.ubuntu.com</code> ，如果本地网关（网络IP是 <code>10.5.9.9</code>）也不知道，接着报数据包转发给上一级 DNS 服务器。可是从抓包结果来看，本地网络显然是知道该域名对应的IP地址的。</p>
<p><img src="/2024/11/16/2024/Captive-Portal/image-20241117100111698.png" alt="image-20241117100111698"></p>
<p>Ubuntu 拿到了域名 <code>connectivity-check.ubuntu.com</code> 的IP地址，接着就会发出 HTTP 请求，URL是 <code>http:connectivity-check.ubuntu.com:80</code> ，所有我在 wireshark 中把 HTTP 数据包过滤出来。</p>
<p><img src="/2024/11/16/2024/Captive-Portal/image-20241117102414335.png" alt="image-20241117102414335"></p>
<p>HTTP 请求成功了，看一下 HTTP 应答的内容是什么？这时候有意思的地方来了，HTTP 应答报文为如下部分：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Frame 662: 562 bytes on wire (4496 bits), 562 bytes captured (4496 bits) on interface wlp1s0, <span class="built_in">id</span> 0</span><br><span class="line">Ethernet II, Src: HuaweiTe_28:33:a0 (e8:ea:4d:28:33:a0), Dst: 60:e9:aa:d3:81:93 (60:e9:aa:d3:81:93)</span><br><span class="line">Internet Protocol Version 4, Src: 91.189.91.97, Dst: 10.5.243.105</span><br><span class="line">Transmission Control Protocol, Src Port: 80, Dst Port: 42282, Seq: 1, Ack: 88, Len: 508</span><br><span class="line">Hypertext Transfer Protocol</span><br><span class="line">    HTTP/1.1 200 OK\r\n</span><br><span class="line">    Content-Type: text/html\r\n</span><br><span class="line">    Content-Length: 443\r\n</span><br><span class="line">    \r\n</span><br><span class="line">    [HTTP response 1/1]</span><br><span class="line">    [Time since request: 0.003968927 seconds]</span><br><span class="line">    [Request <span class="keyword">in</span> frame: 661]</span><br><span class="line">    [Request URI: http://connectivity-check.ubuntu.com/]</span><br><span class="line">    File Data: 443 bytes</span><br><span class="line">Line-based text data: text/html (9 lines)</span><br><span class="line">    &lt;HTML&gt;\r\n</span><br><span class="line">    &lt;HEAD&gt;\r\n</span><br><span class="line">    &lt;TITLE&gt; Web Authentication Redirect&lt;/TITLE&gt;\r\n</span><br><span class="line">    &lt;META http-equiv=<span class="string">&quot;Cache-control&quot;</span> content=<span class="string">&quot;no-cache&quot;</span>&gt;\r\n</span><br><span class="line">    &lt;META http-equiv=<span class="string">&quot;Pragma&quot;</span> content=<span class="string">&quot;no-cache&quot;</span>&gt;\r\n</span><br><span class="line">    &lt;META http-equiv=<span class="string">&quot;Expires&quot;</span> content=<span class="string">&quot;-1&quot;</span>&gt;\r\n</span><br><span class="line">    &lt;META http-equiv=<span class="string">&quot;refresh&quot;</span> content=<span class="string">&quot;1; URL=http://10.5.12.50:8445/portal?wac%2Dmac=f4fbb823682f&amp;redirect%2Durl=http%3A%2F%2Fconnectivity%2Dcheck%2Eubuntu%2Ecom&amp;ssid=reader&amp;uaddress=10%2E5%2E243%2E105&amp;umac=60e9aad38193&quot;</span>&gt;\r\n</span><br><span class="line">    &lt;/HEAD&gt;\r\n</span><br><span class="line">    &lt;/HTML&gt;\r\n</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>而上述内容中的URL就是Web认证网页，用户只要在Ubuntu的消息中心点击WiFi认证消息，就会向这个URL发送HTTP请求，然后出现WiFI认证页面。</p>
<h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p>1、如果我不想在Ubuntu开启网络检测，该如何设置？</p>
<p>其实在Ubuntu 22.04 中，网络检测是默认开启的，当我们连接到一个有限网络或无线网络时，Ubuntu 会尝试去访问固定的URL来判断是否可以访问互联网。</p>
<p><img src="/2024/11/16/2024/Captive-Portal/image-20241117110835593.png" alt="image-20241117110835593"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.twomeetings.com/2020-07-24-how-to-build-captive-portal-with-nodogslash/">如何搭建类似麦当劳店中需登录认证的wifi</a></p>
<p><a href="https://blog.sixiaolong.win/2023/02/06/%E4%BD%BF%E7%94%A8ESP32C3%E5%BC%80%E5%8F%91%E6%9D%BF%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BC%BA%E5%88%B6%E9%97%A8%E6%88%B7%EF%BC%88Captive-Portal%EF%BC%89/">使用ESP32C3开发板实现一个强制门户（Captive Portal）</a></p>
<p><a href="https://pimylifeup.com/raspberry-pi-wireless-access-point/">树莓派搭建wifi热点</a></p>
<p><a href="https://pimylifeup.com/raspberry-pi-captive-portal/">树莓派搭建captive-portal</a></p>
<p><a href="https://github.com/ospanic/Captive_Portal_ESP">Captive_Portal_ESP</a></p>
]]></content>
      <categories>
        <category>esp</category>
      </categories>
      <tags>
        <tag>Captive Portal</tag>
      </tags>
  </entry>
  <entry>
    <title>esp: idf project architecture</title>
    <url>/2024/11/15/2024/esp-idf-project-architecture/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>WiFi Easy Connect</title>
    <url>/2024/11/15/2024/WiFi-Easy-Connect/</url>
    <content><![CDATA[<h2 id="WPS"><a href="#WPS" class="headerlink" title="WPS"></a>WPS</h2><p><strong>WPS（Wi-Fi Protected Setup，Wi-Fi安全防护设定）</strong>是由Wi-Fi联盟推出的全新标准，2018年推出该标准的主要原因是为了解决长久以来无线网络加密认证设定的步骤过于繁杂之弊病。WPS简化了Wi-Fi的安全设置和网络管理，它支持两种模式：<strong>个人识别码（PIN）模式</strong> 、 <strong>按钮（PBC）模式</strong> 和 <strong>NFC模式</strong> 。</p>
<p><img src="/2024/11/15/2024/WiFi-Easy-Connect/image-20241105144735611.png" alt="image-20241105144735611"></p>
<p><em>注意：这里要求Wi-Fi设备支持WPS功能（wps client），而且要求路由器也支持WPS功能（wps server）。</em></p>
<h2 id="WiFi-Easy-Connect"><a href="#WiFi-Easy-Connect" class="headerlink" title="WiFi Easy Connect"></a>WiFi Easy Connect</h2><p><strong><a href="https://www.wi-fi.org/zh-hans/file/wi-fi-certified-easy-connect-jishugaishu-2022">WiFi Easy Connect</a></strong> （也称为设备配置协议 ，DPP）也是有Wi-Fi Alliance（Wi-Fi联盟，简称WFA）推出的标准，用于替代 Wi-Fi 保护设置 (WPS)。Wi-Fi Easy Connect技术提高了安全的网络接入标准，提高了易用性以提升用户将设备连接到Wi-Fi网络的体验。通过使用QR代码和用户选择的设备来管理网络接入，用户界面有限或没有用户界面的设备也能轻松接入，例如智能家居和物联网（IoT）产品。</p>
<p>Wi-Fi Easy Connect中包含两个角色类型：</p>
<ul>
<li>Configurator：可以是手机、平板等移动设备上的应用程序，AP的Web接口或应用程序接口。</li>
<li>Enrollee：除Configurator外的其他都是Enrollee。</li>
</ul>
<p><em>Tips：</em></p>
<p><em>1、WPS 在 Android 9 中已弃用，WiFi Easy Connect在 Android 10及其更后的版本才支持。</em></p>
<p><em>2、DPP，即Device Provisioning Protocol</em></p>
<p><strong>为什么会提出WiFi Easy Connect?</strong></p>
<p>对于智能家居和物联网（IoT）市场更是这样，这些市场上采用的设备，有些是 <strong>用户界面受限或根本没有用户界面</strong>。为了将Wi-Fi设备连入网络而对其加以配置时，需要向设备提供网络信息和安全证书。将用户界面受限或根本没有用户界面的设备连入网络时，其过程可能非常繁琐，而且繁琐程度视厂商实现方案的不同而不同。为配置Wi-Fi设备提供标准化的简便方法，可使用户在选择不同厂商的产品时，有更大的余地，并在整个生态系统内提供一致的用户体验。</p>
<p><strong>如何利用WiFi Easy Connect为设备配网呢？</strong></p>
<p>Wi-Fi Easy Connect™为以更简便的方式配置Wi-Fi设备建立了一种标准化的机制，从而使设备配置毫不费力，仅需用 智能手机扫描产品的 “快速响应（QR）”码，或者使用近距离无线通信（NFC）标签，就可使该产品连入Wi-Fi网络。</p>
<p><img src="/2024/11/15/2024/WiFi-Easy-Connect/image-20241118135015436.png" alt="image-20241118135015436"></p>
<p>具体操作过程：</p>
<ul>
<li><p>配置AP</p>
<p>首先用户可以使用手机（Configurator角色）等设备扫描AP（一般指支持wifi easy connect功能的路由器）上的二维码，通过设备配置协议（Device Provisioning Protocol，DPP）来配置AP使其创建网络。</p>
</li>
<li><p>配置设备</p>
<p>当手机与路由器网络建立后，就可以开始配置其他客户端设备了。可以通过手机扫描待配网设备的二维码（包含设备的公钥、信道、MAC地址等信息），每个设备（待配网设备）都将获得自己特有的配置用以加入网络。同时，会生成属于该设备与网络间独特的安全证书，保护双方的通信。</p>
</li>
<li><p>设备连接到网络</p>
<p>一旦配置完成，设备就会使用得到的配置信息去尝试连接目标无线网络。</p>
</li>
</ul>
<p><em>注意：使用WiFi easy connect功能，需要路由器和手机、终端均支持WiFi easy connect</em></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/stable/esp32/api-reference/network/esp_dpp.html">Wi-Fi Easy Connect (DPP) for ESP32</a></p>
<p><a href="https://community.tp-link.com/en/home/stories/detail/1056">Wi-Fi Easy Connect 是什么、为什么以及如何使用</a></p>
<p><a href="https://juejin.cn/post/7354940558672707593">从Android视角全面解读Wifi Easy Connect</a></p>
<p><a href="https://www.wi-fi.org/beacon/dan-harkins/wi-fi-easy-connect-simple-and-secure-onboarding-for-iot">Wi-Fi Easy Connect™：简单、安全的物联网接入</a></p>
]]></content>
      <categories>
        <category>esp</category>
      </categories>
      <tags>
        <tag>wifi easy connect</tag>
        <tag>wps</tag>
      </tags>
  </entry>
  <entry>
    <title>esp: idf.py command</title>
    <url>/2024/11/13/2024/esp-idf-py-command/</url>
    <content><![CDATA[<h2 id="esp-idf"><a href="#esp-idf" class="headerlink" title="esp-idf"></a>esp-idf</h2><blockquote>
<p><a href="https://www.espressif.com/zh-hans/products/sdks/esp-idf">esp-idf</a>是什么？</p>
</blockquote>
<p>ESP-IDF 是乐鑫官方的物联网开发框架，适用于 ESP32、ESP32-S、ESP32-C 和 ESP32-H 系列 SoC。</p>
<ul>
<li>ESP-IDF 相关资源已在 GitHub 上<strong>免费开放</strong>。用户可在 Apache 2.0 许可下以源代码形式获取 ESP-IDF 的大多数组件，或通过兼容许可证获取第三方组件。</li>
<li>ESP-IDF 具有清晰、严格的发布流程和支持策略，确保用户选择使用稳定的发布版本，并可持续获得适用于其应用的重要修复程序。每个稳定的发布版本均经过严格的测试流程，以确保<strong>版本稳定</strong>，客户可快速实现量产。</li>
<li>ESP-IDF 集成了<strong>大量的软件组件</strong>，包括 RTOS、外设驱动程序、网络栈、多种协议实现技术以及常见应用程序的使用助手。它提供了典型应用程序所需的大部分构建块，用户在开发应用时只需专注于业务逻辑即可。 ESP-IDF 不仅具有免费开源的开发工具，还支持 <strong>Eclipse</strong> 和 <strong>VSCode</strong> 等 IDE，确保其易于开发人员使用。</li>
<li>ESP-IDF 提供详尽的<strong>软件组件使用</strong>和<strong>设计文档</strong>，有助于开发人员充分理解 ESP-IDF 功能，并从中挑选最适合构建其应用程序的模块。ESP-IDF 包含 100 多个示例，详细说明了其组件及硬件外设的功能和用法。它们经过了严格的测试和维护，是用户开启应用开发的有效参考。</li>
</ul>
<h2 id="idf常用命令"><a href="#idf常用命令" class="headerlink" title="idf常用命令"></a>idf常用命令</h2><p>使用 <code>idf.py</code> 命令即可显示帮助提示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Options:</span><br><span class="line">--version				# 显示idf版本信息</span><br><span class="line">--list-targets			# 显示支持的SoC</span><br><span class="line">--ccache / --no-ccache	# 在编译是是否启用ccache环境以加快编译速度，默认是关闭的。</span><br><span class="line">-p PATH 				# 指定串口路径</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Commands:</span><br><span class="line">clean		# 从build目录删除编译输出文件</span><br><span class="line">fullclean	# 删除整个build目录中的文件</span><br><span class="line"></span><br><span class="line">set-target	# 设置编译目标SoC</span><br><span class="line">menuconfig	# 打开项目配置菜单</span><br><span class="line">erase-flash	# 擦除整个flash</span><br><span class="line">flash		# 烧录固件</span><br><span class="line">monitor 	# 显示串口日志输出</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>esp</category>
      </categories>
      <tags>
        <tag>esp-idf</tag>
      </tags>
  </entry>
  <entry>
    <title>USB-OTG</title>
    <url>/2024/11/08/2024/USB-OTG/</url>
    <content><![CDATA[<h2 id="USB"><a href="#USB" class="headerlink" title="USB"></a>USB</h2><blockquote>
<p><a href="https://zh.wikipedia.org/wiki/USB">USB</a>是什么？</p>
</blockquote>
<p>USB（Universal Serial Bus）是一种通用的总线标准，用于连接主机和外设设备。<strong>USB 主机（USB Host）</strong>可以通过 USB 接口与 <strong>USB 设备（UBS Device）</strong>连接，实现 <strong>数据传输、电源供给</strong> 等功能。</p>
<p>USB IF（USB Implementers Forum）是 USB 标准的制定者，它制定了 USB 标准，包括 USB 1.1、USB 2.0、USB 3.0 等，定义了 USB 接口的物理层、数据链路层、传输层、会话层、表示层等协议，以及 USB 设备类（Device Class）标准，常见的设备类包括 HID（Human Interface Device，人机接口设备）、MSC（Mass Storage Class，大容量存储设备）、CDC（Communication Device Class，通信设备）、Audio、Video 等。</p>
<p><strong>USB协议版本（协议版本向下兼容）：</strong></p>
<ul>
<li>USB 1.0&#x2F;1.1(low&#x2F;full speed)，传输速率最大为12Mbps</li>
<li>USB 2.0(high speed)，传输速率最大480Mbps</li>
<li>USB 3.0(super speed)，传输速率最大5Gbps</li>
</ul>
<p><strong>USB接口类型：</strong></p>
<ul>
<li>Type A，即使我们电脑上的那种接口。</li>
<li>Type B，不太常见，比较方正的T型接口，有的嵌入式开发板会用。</li>
<li>Type C，2013年公布该接口类型，现在开始流行起来了，最大的好处就是可以盲插，而不用区分正反。后续电子产品接口将实现 Typc-C 接口大一统。</li>
<li>Micro&#x2F;mini，早期的安卓手机上使用Micro USB比较常见。</li>
</ul>
<p>USB各种接口图片：<a href="https://www.usbzh.com/article/detail-144.html">https://www.usbzh.com/article/detail-144.html</a></p>
<p><strong>USB Device：</strong></p>
<p>USB Device 是连接到USB Host的外设，它响应Host的命令和请求，提供特定的功能或服务。USB Device可以是简单的输入设备（如键盘、鼠标）、存储设备（如U盘、外置硬盘）、打印机、摄像头等。</p>
<p><strong>USB Host：</strong></p>
<p>USB Host 是USB通信中的控制者，负责初始化和管理所有USB通信。它通常是一个计算设备，如个人计算机、笔记本电脑、平板电脑或某些嵌入式系统（如支持USB OTG的微控制器）。</p>
<p><strong>USB OTG：</strong></p>
<p>USB On-The-Go 通常缩写为<strong>USB OTG</strong>，是<a href="https://zh.wikipedia.org/wiki/USB_2.0">USB 2.0</a>规格的补充标准。它可使USB设备，例如播放器或手机，从USB周边设备变为USB主机，与其他USB设备连接通信。在正常情况下，这些支持OTG的USB设备和USB主机（例如：PC），仍然作为USB周边设备使用。</p>
<p>支持OTG的设备，如USB打印机，可以不连接电脑的情况下直接接入U盘来读取设备内文件进行打印；或平板电脑可以直接接入USB存储碟、键盘或鼠标来扩充外界硬件功能。</p>
<h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p> <strong>1、USB Type-C OTG 口自身怎么判断当前只是供电，还是既供电又传输数据？</strong></p>
<p><img src="/2024/11/08/2024/USB-OTG/image-20241111173957481.png" alt="image-20241111173957481"></p>
<p><img src="/2024/11/08/2024/USB-OTG/image-20241111105502903.png" alt="image-20241111105502903"></p>
<ul>
<li>CC线（CC1或CC2）：CC线用于协商电源角色和数据角色，以及检测连接的设备类型（电源适配器或USB设备）。电源适配器通常只提供电源，不支持数据传输。USB设备会通过CC线与USB Host进行通信，协商电源和数据角色。</li>
<li>VBUS线：通过检测VBUS线有5V电压来确认连接的设备提供电源。</li>
<li>D+和D-线：两根查分信号线，支持USB2.0用于传输高速数字信号，最高传输速率可达480 Mbps。或支持Type-C 耳机的左右声道信号。</li>
<li>TX和RX：支持USB 3.2&#x2F;4.0 信号传输</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.espressif.com/projects/esp-iot-solution/zh_CN/latest/usb/usb_overview/usb_overview.html"><strong>ESP USB 外设介绍</strong></a></p>
<p><a href="https://www.cnblogs.com/bujidao1128/p/18307221">Type-c接口及其协议介绍</a></p>
<p><a href="https://nihil.cc/posts/usb/">USB 2.0 与 USB 3.2</a></p>
<p><a href="https://www.espressif.com/zh-hans/solutions/peripherals/usb-solutions">ESP USB方案</a></p>
<p><a href="https://blog.csdn.net/jia_weihui/article/details/128562625">OTG硬件检测电路</a></p>
]]></content>
      <categories>
        <category>esp</category>
      </categories>
      <tags>
        <tag>USB OTG</tag>
      </tags>
  </entry>
  <entry>
    <title>mDNS</title>
    <url>/2024/11/05/2024/mDNS/</url>
    <content><![CDATA[<h2 id="mDNS"><a href="#mDNS" class="headerlink" title="mDNS"></a>mDNS</h2><p>在计算机网络中，多播DNS（Multicast DNS，mDNS）协议将主机名（hostname）解析为不包含本地名称服务器端的小型网络中的IP地址，旨在提供 <strong>本地网络服务</strong> 和 <strong>主机发现</strong>。这是一种零配置的服务器端，mDNS与传统域名解析服务（DNS）有着基本相同的编程接口、数据包格式和操作方式。</p>
<p>mDNS由Bill Woodcock和Bill Manning于2000年在IETF中首次提出，在2013年最终由Stuart Cheshire和Marc Krochmal作为标准协议发布在 <strong>RFC 6762</strong>，并由<strong>Apple Bonjour</strong>和<strong>开源Avahi</strong> 软件包实现，包含在大多数Linux发行版中（例如Ubuntu 22.04）。</p>
<p>mDNS 是本地网络的域名解析协议，使用 <strong>5353</strong> 端口，组播地址是 <strong>224.0.0.251</strong>，是运行于 <strong>UDP</strong> 之上的应用协议。不同于传统的DNS协议，mDNS协议不需要DNS服务器端进行域名解析，可节省本地网络的域名服务器端配置。</p>
<p>如果主机查询一个域名，那么该怎么区分该域名是DNS域名还是mDNS域名呢？mDNS域名与DNS域名是通过后缀.local区分的。</p>
<h2 id="DNS-SD"><a href="#DNS-SD" class="headerlink" title="DNS-SD"></a>DNS-SD</h2><p><a href="http://www.dns-sd.org/">DNS-SD</a>（DNS-Based Service Discovery，即基于DNS的服务发现）是一个网络协议框架，它基于mDNS实现。DNS-SD主要用于在本地网络中自动发现并使用网络服务，如打印机、文件共享、媒体播放等。</p>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>DNS-SD借助于多播DNS（mDNS），在本地网络（local network）内进行服务的发现和发布。以下是DNS-SD的基本工作原理：</p>
<ol>
<li><strong>服务注册</strong>：<br>服务提供者自注册。该信息通常包括服务名称、类型（如 “_http._tcp”）、端口号、及其他附加参数。</li>
<li><strong>服务发现</strong>：<br>客户端在本地网络中查询特定类型的服务。例如，客户端广播一个查询，想找到所有的 “_http._tcp” 服务。其它设备收到这个查询后，会响应其提供的服务信息。</li>
<li><strong>服务解析</strong>：<br>客户端在发现服务后，可以进一步解析获取具体的服务细节。例如，从服务名称解析出具体的 IP 地址和端口号。</li>
</ol>
<h3 id="DNS-SD-记录类型"><a href="#DNS-SD-记录类型" class="headerlink" title="DNS-SD 记录类型"></a>DNS-SD 记录类型</h3><p>DNS-SD 中采用了多个特定的 DNS 记录类型来进行服务的发现和信息传递：</p>
<ul>
<li><strong>PTR 记录</strong>：用于枚举网络中 <em>某一类型</em> 的所有服务。例如，”_http._tcp.local” PTR 记录列出了网络中所有的 HTTP 服务。</li>
<li><strong>SRV 记录</strong>：提供具体的服务主机名和端口信息；每个服务有一个或者多个 SRV 记录。</li>
<li><strong>TXT 记录</strong>：用来存储与服务相关的任意文本信息，如服务的配置选项等。</li>
<li><strong>A&#x2F;AAAA 记录</strong>：将服务主机名解析为一个或多个 IP 地址，其中A记录为IPv4地址，AAAA记录为IPv6地址。</li>
</ul>
<h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><ul>
<li><strong>局域网范围</strong>：DNS-SD 和 mDNS 一般只在局域网内工作，因为它们使用多播地址。</li>
<li><strong>名称冲突</strong>：多个设备在同一个局域网内提供相同名称服务时，会发生名称冲突，需要进行名称分配和冲突解决机制。</li>
</ul>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>DNS-SD 被广泛应用于各种需要自动发现网络服务的应用环境，如家庭网络、办公室局域网、多媒体设备连接等。例如：</p>
<ul>
<li>Apple 的 Bonjour 服务发现技术就是基于 DNS-SD 和 mDNS 实现的。</li>
<li>各种智能家居设备和 IoT 设备的互联互通，比如Matter、Home Assistant。</li>
</ul>
<h3 id="DNS-SD设备发现"><a href="#DNS-SD设备发现" class="headerlink" title="DNS-SD设备发现"></a>DNS-SD设备发现</h3><p>例1：我想查询本地局域网所有（全局搜索）的 <strong>smb</strong> 服务，即查询PTR：<code>_smb._tcp.local</code>，若存在该服务，那么就会返回并解析结果（SRV、A&#x2F;AAAA、TXT）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I (641773) mdns-test: Query PTR: _smb._tcp.local</span><br><span class="line">1: Interface: WIFI_STA_DEF, Type: V4, TTL: 120</span><br><span class="line">  PTR : raspberrypi._smb._tcp</span><br><span class="line">  SRV : raspberrypi.local:445</span><br><span class="line">  A   : 192.168.0.210</span><br><span class="line">  AAAA: fe80:0000:0000:0000:0145:95a9:8787:0030</span><br></pre></td></tr></table></figure>

<p>例2：我想查询本地局域网所有的 <strong>http</strong> 服务，即查询PTR：<code>_http._tcp.local</code>，若存在该服务，那么就会返回并解析结果（SRV、A&#x2F;AAAA、TXT）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I (651073) mdns-test: Lookup selfhosted service: _http._tcp.local</span><br><span class="line">  PTR : ESP32-WebServer._http._tcp</span><br><span class="line">  SRV : esp32-mdns.local:80</span><br><span class="line">  TXT : [3] p=password(8); u=user(4); board=esp32(5); </span><br><span class="line">  PTR : ESP32-WebServer1._http._tcp</span><br><span class="line">  SRV : esp32-mdns.local:80</span><br><span class="line">  TXT : [2] u=admin(5); path=/foobar(7); </span><br></pre></td></tr></table></figure>

<p>例3：我想查询本地局域网所有的 <strong>HomeAssistant</strong> 服务，即查询PTR：<code>_home-assistant._tcp</code>，若存在该服务，那么就会返回并解析结果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">I (42702) mdns-test: Query PTR: _home-assistant._tcp.local</span><br><span class="line">1: Interface: WIFI_STA_DEF, Type: V6, TTL: 120</span><br><span class="line">  PTR : MyHome._home-assistant._tcp</span><br><span class="line">  SRV : ab96469f357e444280b0182d96da73b3.local:8123</span><br><span class="line">  TXT : [7] location_name=MyHome(6); uuid=ab96469f357e444280b0182d96da73b3(32); version=2024.11.3(9); external_url=NULL(0); internal_url=http://192.168.5.193:8123(25); base_url=http://192.168.5.193:8123(25); requires_api_password=True(4); </span><br><span class="line">  AAAA: fdfc:869c:9ebb:0000:0000:0000:0000:0936</span><br><span class="line">  A   : 192.168.5.193</span><br><span class="line">  AAAA: fdfc:869c:9ebb:0000:c1a5:a79e:bc90:54b8</span><br><span class="line">  AAAA: fe80:0000:0000:0000:2498:72a5:dcc1:61e8</span><br><span class="line">2: Interface: WIFI_STA_DEF, Type: V4, TTL: 120</span><br><span class="line">  PTR : MyHome._home-assistant._tcp</span><br><span class="line">  SRV : ab96469f357e444280b0182d96da73b3.local:8123</span><br><span class="line">  TXT : [7] location_name=MyHome(6); uuid=ab96469f357e444280b0182d96da73b3(32); version=2024.11.3(9); external_url=NULL(0); internal_url=http://192.168.5.193:8123(25); base_url=http://192.168.5.193:8123(25); requires_api_password=True(4); </span><br><span class="line">  AAAA: fdfc:869c:9ebb:0000:0000:0000:0000:0936</span><br><span class="line">  A   : 192.168.5.193</span><br><span class="line">  AAAA: fdfc:869c:9ebb:0000:c1a5:a79e:bc90:54b8</span><br><span class="line">  AAAA: fe80:0000:0000:0000:2498:72a5:dcc1:61e8</span><br></pre></td></tr></table></figure>





<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>mDNS示例：<a href="https://github.com/espressif/esp-protocols/tree/master/components/mdns/examples/query_advertise">query_advertise</a></p>
<p>当设备（例如esp32-c3）和PC处于同一个局域网，那么PC如何找到设备的IP地址呢？ 此时mDNS就起作用了，设备启用了mDNS服务，当连接上路由器后，设备会向局域网组播地址发送组播报文：“我是谁，我的IP地址是多少，我提供的服务和端口号是多少”。如果PC想要查询mDNS域名，会先查询自己的缓存信息，如果没有查询到目标mDNS域名，则会向局域网组播查询目标mDNS域名（esp32-mdns.local）的IP是多少，以及提供的服务（service）和端口（port）是多少。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">I (373) mdns-test: mdns hostname <span class="built_in">set</span> to: [esp32-mdns]</span><br><span class="line"></span><br><span class="line">I (613) example_connect: Connecting to ZTE_5GCPE_F876...</span><br><span class="line">I (613) example_connect: Waiting <span class="keyword">for</span> IP(s)</span><br><span class="line">I (3323) wifi:new:&lt;7,1&gt;, old:&lt;1,0&gt;, ap:&lt;255,255&gt;, sta:&lt;7,1&gt;, prof:1</span><br><span class="line">I (3323) wifi:state: init -&gt; auth (b0)</span><br><span class="line">I (3333) wifi:state: auth -&gt; assoc (0)</span><br><span class="line">I (3363) wifi:state: assoc -&gt; run (10)</span><br><span class="line">I (3383) wifi:connected with ZTE_5GCPE_F876, aid = 1, channel 7, 40U, bssid = b0:0a:d5:75:f8:76</span><br><span class="line">I (3393) wifi:security: WPA2-PSK, phy: bgn, rssi: -58</span><br><span class="line">I (3393) wifi:pm start, <span class="built_in">type</span>: 1</span><br><span class="line"></span><br><span class="line">I (3393) wifi:dp: 1, bi: 102400, li: 3, scale listen interval from 307200 us to 307200 us</span><br><span class="line">I (3403) wifi:<span class="built_in">set</span> rx beacon pti, rx_bcn_pti: 0, bcn_timeout: 25000, mt_pti: 0, mt_time: 10000</span><br><span class="line">I (3593) wifi:dp: 5, bi: 102400, li: 5, scale listen interval from 307200 us to 512000 us</span><br><span class="line">I (3593) wifi:AP<span class="string">&#x27;s beacon interval = 102400 us, DTIM period = 5</span></span><br><span class="line"><span class="string">I (5373) example_connect: Got IPv6 event: Interface &quot;example_netif_sta&quot; address: fe80:0000:0000:0000:f29e:9eff:fe99:1260, type: ESP_IP6_ADDR_IS_LINK_LOCAL</span></span><br><span class="line"><span class="string">I (6483) wifi:&lt;ba-add&gt;idx:0 (ifx:0, b0:0a:d5:75:f8:76), tid:0, ssn:0, winSize:64</span></span><br><span class="line"><span class="string">I (7413) esp_netif_handlers: example_netif_sta ip: 192.168.0.169, mask: 255.255.255.0, gw: 192.168.0.1</span></span><br><span class="line"><span class="string">I (7413) example_connect: Got IPv4 event: Interface &quot;example_netif_sta&quot; address: 192.168.0.169</span></span><br><span class="line"><span class="string">I (7423) example_common: Connected to example_netif_sta</span></span><br><span class="line"><span class="string">I (7423) example_common: - IPv4 address: 192.168.0.169,</span></span><br><span class="line"><span class="string">I (7433) example_common: - IPv6 address: fe80:0000:0000:0000:f29e:9eff:fe99:1260, type: ESP_IP6_ADDR_IS_LINK_LOCAL</span></span><br><span class="line"><span class="string">I (7443) gpio: GPIO[9]| InputEn: 1| OutputEn: 0| OpenDrain: 0| Pullup: 1| Pulldown: 0| Intr:0 </span></span><br><span class="line"><span class="string">I (7453) main_task: Returned from app_main()</span></span><br><span class="line"><span class="string">I (623103) mdns-test: Query both A and AAA: esp32-mdns.local</span></span><br><span class="line"><span class="string">I (624203) mdns-test: Query A esp32-mdns.local finished</span></span><br><span class="line"><span class="string">I (624203) mdns-test: Query AAAA esp32-mdns.local finished</span></span><br><span class="line"><span class="string">I (624253) mdns-test: Query A: esp32.local</span></span><br><span class="line"><span class="string">W (626273) mdns-test: ESP_ERR_NOT_FOUND: Host was not found!</span></span><br><span class="line"><span class="string">I (626273) mdns-test: Query PTR: _arduino._tcp.local</span></span><br><span class="line"><span class="string">W (629373) mdns-test: No results found!</span></span><br><span class="line"><span class="string">I (629373) mdns-test: Query PTR: _http._tcp.local</span></span><br><span class="line"><span class="string">W (632473) mdns-test: No results found!</span></span><br><span class="line"><span class="string">I (632473) mdns-test: Query PTR: _printer._tcp.local</span></span><br><span class="line"><span class="string">W (635573) mdns-test: No results found!</span></span><br><span class="line"><span class="string">I (635573) mdns-test: Query PTR: _ipp._tcp.local</span></span><br><span class="line"><span class="string">W (638673) mdns-test: No results found!</span></span><br><span class="line"><span class="string">I (638673) mdns-test: Query PTR: _afpovertcp._tcp.local</span></span><br><span class="line"><span class="string">W (641773) mdns-test: No results found!</span></span><br><span class="line"><span class="string">I (641773) mdns-test: Query PTR: _smb._tcp.local</span></span><br><span class="line"><span class="string">1: Interface: WIFI_STA_DEF, Type: V4, TTL: 120</span></span><br><span class="line"><span class="string">  PTR : raspberrypi._smb._tcp</span></span><br><span class="line"><span class="string">  SRV : raspberrypi.local:445</span></span><br><span class="line"><span class="string">  A   : 192.168.0.210</span></span><br><span class="line"><span class="string">  AAAA: fe80:0000:0000:0000:0145:95a9:8787:0030</span></span><br><span class="line"><span class="string">2: Interface: WIFI_STA_DEF, Type: V6, TTL: 120</span></span><br><span class="line"><span class="string">  PTR : raspberrypi._smb._tcp</span></span><br><span class="line"><span class="string">  SRV : raspberrypi.local:445</span></span><br><span class="line"><span class="string">  AAAA: fe80:0000:0000:0000:0145:95a9:8787:0030</span></span><br><span class="line"><span class="string">I (644893) mdns-test: Query PTR: _ftp._tcp.local</span></span><br><span class="line"><span class="string">W (647973) mdns-test: No results found!</span></span><br><span class="line"><span class="string">I (647973) mdns-test: Query PTR: _nfs._tcp.local</span></span><br><span class="line"><span class="string">W (651073) mdns-test: No results found!</span></span><br><span class="line"><span class="string">I (651073) mdns-test: Lookup selfhosted service: _http._tcp.local</span></span><br><span class="line"><span class="string">  PTR : ESP32-WebServer._http._tcp</span></span><br><span class="line"><span class="string">  SRV : esp32-mdns.local:80</span></span><br><span class="line"><span class="string">  TXT : [3] p=password(8); u=user(4); board=esp32(5); </span></span><br><span class="line"><span class="string">  PTR : ESP32-WebServer1._http._tcp</span></span><br><span class="line"><span class="string">  SRV : esp32-mdns.local:80</span></span><br><span class="line"><span class="string">  TXT : [2] u=admin(5); path=/foobar(7); </span></span><br></pre></td></tr></table></figure>



<h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p><img src="/2024/11/05/2024/mDNS/image-20241107103144932.png" alt="image-20241107103144932"></p>
<h2 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h2><p>1、如果将esp32 mDNS demo固件烧录到相同的开发板，那么理论上两块开发板设置的本地mDNS域名应该都是 <code>esp32-mdns.local</code></p>
<p>验证结果：实际的结果跟猜想不一致，开发板A的本地mDNS域名是 <code>esp32-mdns.local</code>，而开发板B的本地mDNS域名是 <code>esp32-mdns-2.local</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过和开发板在同一局域网的PC利用avahi-browse</span></span><br><span class="line">$ avahi-browse -a -r -l</span><br><span class="line">= wlp1s0 IPv4 ESP32-WebServer1-10                           Web Site             <span class="built_in">local</span></span><br><span class="line">   hostname = [esp32-mdns.local]</span><br><span class="line">   address = [192.168.0.169]</span><br><span class="line">   port = [80]</span><br><span class="line">   txt = [<span class="string">&quot;path=/foobar&quot;</span> <span class="string">&quot;u=admin&quot;</span>]</span><br><span class="line">= wlp1s0 IPv4 ESP32-WebServer1                              Web Site             <span class="built_in">local</span></span><br><span class="line">   hostname = [esp32-mdns-2.local]</span><br><span class="line">   address = [192.168.0.155]</span><br><span class="line">   port = [80]</span><br><span class="line">   txt = [<span class="string">&quot;path=/foobar&quot;</span> <span class="string">&quot;u=admin&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2、通过mDNS可以获取局域网内的主机名和IP，那么还能获取什么信息？</p>
<p>还是以 “esp32 mDNS demo” 为例，看一下在发布mDNS组播数据包需要设置哪些东西。</p>
<ul>
<li><p>mDNS属性</p>
<ul>
<li><code>hostname</code>：设备会去响应的主机名，如果没有设置，会根据设备的网络接口名定义 <code>hostname</code> 。例如，<code>my-esp32</code> 会被解析为 <code>my-esp32.local</code>。</li>
<li><code>default_instance</code>：默认实例名（即易记的设备名），例如 <code>Jhon&#39;s ESP32 Thing</code>。如果没有设置，将会使用 <code>hostname</code>。</li>
</ul>
</li>
<li><p>mDNS服务（ DNS-Based Service Discovery，DNS-SD）</p>
<p>mDNS 可以广播设备能够提供的网络服务的相关信息，每个服务会由以下属性构成：</p>
<ul>
<li><code>instance_name</code>：实例名（即易记的服务名），例如 <code>Jhon&#39;s ESP32 Web Server</code>。如果没有定义，会使用 <code>default_instance</code>。</li>
<li><code>service_type</code>：（必需）服务类型，以下划线为前缀，<a href="http://www.dns-sd.org/serviceTypes.html">这里</a> 列出了常见的类型。</li>
<li><code>proto</code>：（必需）服务运行所依赖的协议，以下划线为前缀，例如 <code>_tcp</code> 或者 <code>_udp</code>。</li>
<li><code>port</code>：（必需）服务运行所用的端口号。</li>
<li><code>txt</code>：形如 <code>&#123;var, val&#125;</code> 的字符串数组，用于定义服务的属性。</li>
</ul>
<p>例如：可以发布一个http服务：<code>http://esp32-mdns.local:80/foobar</code></p>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.waynecommand.com/post/mdns">1、multicast DNS</a></p>
<p><a href="https://blog.csdn.net/Marchtwentytwo/article/details/122770716">2、ESP mDNS 学习</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>mDNS</tag>
      </tags>
  </entry>
  <entry>
    <title>esp: Wi-Fi network configuration</title>
    <url>/2024/11/05/2024/esp-Wi-Fi-network-configuration/</url>
    <content><![CDATA[<h2 id="Wi-Fi配网"><a href="#Wi-Fi配网" class="headerlink" title="Wi-Fi配网"></a>Wi-Fi配网</h2><blockquote>
<p>什么是WiFi配网？</p>
</blockquote>
<p>Wi-Fi配网是指外部向Wi-Fi设备提供 SSID 和密码，以便Wi-Fi设备可以连接到指定的AP并加入AP所建立的Wi-Fi网络。</p>
<p>Wi-Fi配网的核心就是通过各种方法，将要连接的AP的SSID和密码发送到需要联网的Wi-Fi设备，然后由Wi-Fi设备去连接指定的Wi-Fi网络，达到接入局域网或互联网的目的。</p>
<p>Wi-Fi配网的实现方式有：<strong>SoftAP配网、一键配网、蓝牙配网、其他方式配网</strong>。</p>
<h3 id="SoftAP配网"><a href="#SoftAP配网" class="headerlink" title="SoftAP配网"></a>SoftAP配网</h3><p>SoftAP配网又称为传统配网。</p>
<p>工作流程：首先，待配网的Wi-Fi设备自身会建立一个AP，用户将智能手机连接到这个AP。然后，智能手机中的APP将要连接的SSID和密码发送给待配网的Wi-Fi设备，待配网的Wi-Fi设备收到信息后，找到对应的AP并与之连接，完成配网。</p>
<p><img src="/2024/11/05/2024/esp-Wi-Fi-network-configuration/image-20241105142135546.png" alt="image-20241105142135546"></p>
<p><em>注意：这里要求Wi-Fi设备支持 AP模式 和 Station模式。启用AP模式，智能手机可以连接Wi-Fi设备发出的热点；启用Station模式，Wi-Fi设备可以连接到路由器发出的热点。</em></p>
<h3 id="一键配网"><a href="#一键配网" class="headerlink" title="一键配网"></a>一键配网</h3><p>一键配网是指智能手机将SSID和密码按照一定的编码格式填充在MAC包中<strong>不加密</strong>的包头部分，并采用<strong>广播或组播</strong>方式发送数据包，Wi-Fi设备监听无线信道中的广播包或组播包，然后从数据包的头部解析出SSID和密码，最后去连接SSID对应的Wi-Fi。一般需要在发送SSID和密码的设备上安装一个App，该App实现了和Wi-Fi设备之间发送SSID和密码的协议交互。</p>
<p><img src="/2024/11/05/2024/esp-Wi-Fi-network-configuration/image-20241105142652143.png" alt="image-20241105142652143"></p>
<p><em>注意：这里要求Wi-Fi设备至少支持Station模式</em></p>
<h3 id="蓝牙配网"><a href="#蓝牙配网" class="headerlink" title="蓝牙配网"></a>蓝牙配网</h3><p>待配网的Wi-Fi设备会建立一个蓝牙的Profile，向蓝牙信道一直广播数据，用户将智能手机或其他可以具备人机交互功能的设备（如平板电脑等）通过蓝牙信道连接到设备，然后通过蓝牙将要连接的信息发送给待配网的Wi-Fi设备。待配网的Wi-Fi设备接收到信息后，找到对应的AP并主动与之连接，完成配网。</p>
<p><img src="/2024/11/05/2024/esp-Wi-Fi-network-configuration/image-20241105143818868.png" alt="image-20241105143818868"></p>
<p><em>注意：这里要求Wi-Fi设置至少支持Station模式，同时具备BLE功能。</em></p>
<h3 id="其他方式配网"><a href="#其他方式配网" class="headerlink" title="其他方式配网"></a>其他方式配网</h3><p>其他方式配网包括：直接配网、路由器配网、零配（Zeroconfig）配网、手机AP配网</p>
<h4 id="直接配网"><a href="#直接配网" class="headerlink" title="直接配网"></a>直接配网</h4><p>直接配网是指通过<strong>UART、SPI、SDIO、I2C</strong>等外设接口，遵循一定的通信协议，将SSID和密码直接发送给Wi-Fi设备，所以这种方式也称为有线配网。Wi-Fi设备在收到SSID和密码后连接AP，并将连接的结果从主机接口返回。</p>
<p><img src="/2024/11/05/2024/esp-Wi-Fi-network-configuration/image-20241105144552396.png" alt="image-20241105144552396"></p>
<p><em>注意：这里要求Wi-Fi设备引出外设的GPIO接口。</em></p>
<h4 id="路由器配网"><a href="#路由器配网" class="headerlink" title="路由器配网"></a>路由器配网</h4><p><strong>WPS（Wi-Fi Protected Setup，Wi-Fi安全防护设定）</strong>是由Wi-Fi联盟推出的全新标准，推出该标准的主要原因是为了解决长久以来无线网络加密认证设定的步骤过于繁杂之弊病。WPS简化了Wi-Fi的安全设置和网络管理，它支持两种模式：<strong>个人识别码（PIN）模式</strong> 和 <strong>按钮（PBC）模式</strong>。</p>
<p><img src="/2024/11/05/2024/esp-Wi-Fi-network-configuration/image-20241105144735611.png" alt="image-20241105144735611"></p>
<p><em>注意：这里要求Wi-Fi设备支持WPS功能（wps client），而且要求路由器也支持WPS功能（wps server）。</em></p>
<h4 id="零配（Zeroconfig）配网"><a href="#零配（Zeroconfig）配网" class="headerlink" title="零配（Zeroconfig）配网"></a>零配（Zeroconfig）配网</h4><p>零配配网的本质是用一台已联网的设备给另外一台设备配网，在整个环节中，智能手机这个角色用别的设备替换掉了，如智能音箱等。</p>
<p>待配网的Wi-Fi设备进入配网状态，并将自己的MAC地址通过自定义报文的方式发送出去，此时路由器下支持的零配配网设备就可以获取到待配网设备的MAC地址，同时已联网设备会将自己保存的路由器SSID和密码通过自定义报文发送给待配网设备，并等待待配网设备连接上网络，进行外网绑定等流程。</p>
<p><img src="/2024/11/05/2024/esp-Wi-Fi-network-configuration/image-20241105145445101.png" alt="image-20241105145445101"></p>
<h4 id="手机AP配网"><a href="#手机AP配网" class="headerlink" title="手机AP配网"></a>手机AP配网</h4><p>手机AP配网是将智能手机设置成一个具有特定名字和密码的AP，然后让待配网设备连接智能手机，再发送和接收配网绑定信息。</p>
<p><img src="/2024/11/05/2024/esp-Wi-Fi-network-configuration/image-20241105145735981.png" alt="image-20241105145735981"></p>
]]></content>
      <categories>
        <category>esp</category>
      </categories>
      <tags>
        <tag>WiFi配网</tag>
      </tags>
  </entry>
  <entry>
    <title>esp: flash search and configure</title>
    <url>/2024/11/04/2024/esp-flash-search-and-configure/</url>
    <content><![CDATA[<p>串口日志报警告：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spi_flash: Detected size(4096k) larger than the size <span class="keyword">in</span> the binary image header(2048k). Using the size <span class="keyword">in</span> the binary image header.</span><br></pre></td></tr></table></figure>

<p>原因：硬件flash为4MB，而编译固件的配置flash为2MB，导致报警告。</p>
<h2 id="查询flash大小"><a href="#查询flash大小" class="headerlink" title="查询flash大小"></a>查询flash大小</h2><p>通过esptool.py工具可以查询flash信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ esptool.py flash_id</span><br><span class="line">esptool.py v4.7.0</span><br><span class="line">Found 33 serial ports</span><br><span class="line">Serial port /dev/ttyUSB0</span><br><span class="line">Connecting....</span><br><span class="line">Detecting chip <span class="built_in">type</span>... Unsupported detection protocol, switching and trying again...</span><br><span class="line">Connecting...</span><br><span class="line">Detecting chip <span class="built_in">type</span>... ESP32</span><br><span class="line">Chip is ESP32-D0WD-V3 (revision v3.0)</span><br><span class="line">Features: WiFi, BT, Dual Core, 240MHz, VRef calibration <span class="keyword">in</span> efuse, Coding Scheme None</span><br><span class="line">Crystal is 40MHz</span><br><span class="line">MAC: 40:22:d8:<span class="built_in">fc</span>:d1:<span class="built_in">fc</span></span><br><span class="line">Uploading stub...</span><br><span class="line">Running stub...</span><br><span class="line">Stub running...</span><br><span class="line">Manufacturer: 5e</span><br><span class="line">Device: 4016</span><br><span class="line">Detected flash size: 4MB</span><br><span class="line">Hard resetting via RTS pin...</span><br></pre></td></tr></table></figure>

<p>Detected flash size: 4MB，就是实际的flash大小。</p>
<h2 id="设置flash大小"><a href="#设置flash大小" class="headerlink" title="设置flash大小"></a>设置flash大小</h2><p>通过 <code>idf.py menuconfig</code> 菜单修改flash的大小。</p>
<p>操作过程：”Serial flasher config” –&gt; “Flash size” –&gt; “4M”，然后保存退出。</p>
<p><img src="/2024/11/04/2024/esp-flash-search-and-configure/image-20241105114934762.png" alt="image-20241105114934762"></p>
]]></content>
      <categories>
        <category>esp</category>
      </categories>
      <tags>
        <tag>esp32c3</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 22.04: smb</title>
    <url>/2024/11/04/2024/Ubuntu-22-04-smb/</url>
    <content><![CDATA[<h2 id="安装smb"><a href="#安装smb" class="headerlink" title="安装smb"></a>安装smb</h2><p>在Ubuntu 22.04 安装smb服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt update</span><br><span class="line">$ <span class="built_in">sudo</span> apt install smb</span><br></pre></td></tr></table></figure>

<p>在 test 用户家目录下创建共享文件夹：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p /home/test/Share</span><br><span class="line">$ <span class="built_in">chmod</span> 755 /home/test/Share</span><br></pre></td></tr></table></figure>

<p>在 <code>/etc/samba/smb.conf</code> 文件末尾新增如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Ubuntu_22.04]</span><br><span class="line">   comment = Samba</span><br><span class="line">   path = /home/test/Share</span><br><span class="line">   public = yes</span><br><span class="line">   writable = yes</span><br><span class="line">   available = yes</span><br><span class="line">   browseable = yes</span><br><span class="line">   valid users = test</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将已创建的用户添加为smb用户（当前用户是：test）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo smbpasswd -a test</span><br></pre></td></tr></table></figure>

<p>防火墙放行smb端口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ufw allow smb</span><br></pre></td></tr></table></figure>

<p>重启smb服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart smb.service</span><br></pre></td></tr></table></figure>



<h2 id="访问smb"><a href="#访问smb" class="headerlink" title="访问smb"></a>访问smb</h2><p>在iPad中打开 “文件App” ，点击右上角…，接着可以点击”连接服务器”，输入：<code>smb://&lt;xxx.xxx.xxx.xxx&gt;</code></p>
<p><img src="/2024/11/04/2024/Ubuntu-22-04-smb/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241104202501.jpg" alt="微信图片_20241104202501"></p>
<p>然后输入test的用户名和密码：</p>
<p><img src="/2024/11/04/2024/Ubuntu-22-04-smb/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241104202804.jpg" alt="微信图片_20241104202804"></p>
<p>接着就进入了smb服务器的共享文件夹</p>
<p><img src="/2024/11/04/2024/Ubuntu-22-04-smb/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241104202535.jpg" alt="微信图片_20241104202535"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>smb</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux: grub</title>
    <url>/2024/11/03/2024/Linux-grub/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>由于未知原因（ 1、我猜测是升级了内核，且内核成为 grub 默认启动项； 2、也有可能是我删除了<code>/lib/modules/6.8.0-48-generic</code> 这个目录），导致Ubuntu 22.04启动失败，报错：Failed to start load kernel modules。</p>
<p>这让我有点慌，毕竟重装系统对我来说不难，但是系统内的软件安装和数据都是非常繁琐的，不到万不得已，肯定不会做这样的事，那么接下来只能查看原因，并寻求其他解决方法。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>首先，我通过物理按键强制关机，接着启动计算机，发现出现了grub菜单。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*Ubuntu</span><br><span class="line">Advanced options <span class="keyword">for</span> Ubuntu</span><br><span class="line">Memory <span class="built_in">test</span> (memtest86+)</span><br><span class="line">Memory <span class="built_in">test</span> (memtest86+, serial console 115200)</span><br></pre></td></tr></table></figure>

<p>默认的ubuntu是启动失败的，所以选择 <code>Advanced options for Ubuntu</code> 进入子菜单，显示了多个内核选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*Ubuntu, with Linux 6.8.0-48-generic</span><br><span class="line">Ubuntu, with Linux 6.8.0-48-generic (recovery mode)</span><br><span class="line">Ubuntu, with Linux 6.8.0-47-generic</span><br><span class="line">Ubuntu, with Linux 6.8.0-47-generic (recovery mode)</span><br></pre></td></tr></table></figure>

<p><strong>其实，默认启动的Ubuntu内核就是Linux 6.8.0-48-generic，但是失败了。所以我选择了<code>Ubuntu, with Linux 6.8.0-47-generic</code> ，然后就正常启动了。</strong></p>
<p>以上就是解决过程，但是没有原理性的东西。为了进一步对于计算机开机启动流程的理解，还是要接着研究。</p>
<h2 id="grub-菜单"><a href="#grub-菜单" class="headerlink" title="grub 菜单"></a>grub 菜单</h2><blockquote>
<p><a href="https://www.gnu.org/software/grub/">grub</a>是什么？</p>
</blockquote>
<p>GNU GRUB 是一个<a href="http://www.gnu.org/software/grub/manual/multiboot/multiboot.html">多引导启动</a> 加载程序。它源自 GRUB（<strong>GRand Unified Bootloader）</strong>，最初由 Erich Stefan Boleyn 设计和实现。引导加载程序（Bootloader）有很多种，现如今在各种Linux发行版上基本都使用 grub2 作为引导加载程序。</p>
<p>正常进入计算机后，查看安装了多个linux image文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dpkg --get-selections | grep linux-image</span><br><span class="line">linux-image-6.5.0-18-generic			deinstall</span><br><span class="line">linux-image-6.5.0-45-generic			deinstall</span><br><span class="line">linux-image-6.8.0-40-generic			deinstall</span><br><span class="line">linux-image-6.8.0-45-generic			deinstall</span><br><span class="line">linux-image-6.8.0-47-generic			install</span><br><span class="line">linux-image-6.8.0-48-generic			install</span><br><span class="line">linux-image-generic-hwe-22.04			install</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接着查看linux-image的位置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dpkg -L linux-image-6.8.0-47-generic</span><br><span class="line">/.</span><br><span class="line">/boot</span><br><span class="line">/boot/vmlinuz-6.8.0-47-generic</span><br><span class="line">/usr</span><br><span class="line">/usr/share</span><br><span class="line">/usr/share/doc</span><br><span class="line">/usr/share/doc/linux-image-6.8.0-47-generic</span><br><span class="line">/usr/share/doc/linux-image-6.8.0-47-generic/changelog.Debian.gz</span><br><span class="line">/usr/share/doc/linux-image-6.8.0-47-generic/copyright</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以确认 <code>/boot/vmlinuz-6.8.0-47-generic</code> 就是内核文件的位置，当然 <code>/boot</code> 目录下还有其他内核文件，查看一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$/usr/share/doc# ll /boot</span><br><span class="line">total 187836</span><br><span class="line">drwxr-xr-x  5 root root     4096 11月  1 06:59 ./</span><br><span class="line">drwxr-xr-x 21 root root     4096  9月 13 10:40 ../</span><br><span class="line">-rw-r--r--  1 root root   287058 10月  2 22:39 config-6.8.0-47-generic</span><br><span class="line">-rw-r--r--  1 root root   287024 10月  7 17:56 config-6.8.0-48-generic</span><br><span class="line">drwx------  3 root root     4096  1月  1  1970 efi/</span><br><span class="line">drwxr-xr-x  5 root root     4096 11月  1 20:13 grub/</span><br><span class="line">lrwxrwxrwx  1 root root       27 11月  1 06:58 initrd.img -&gt; initrd.img-6.8.0-48-generic</span><br><span class="line">-rw-r--r--  1 root root 72002483 10月 21 09:59 initrd.img-6.8.0-47-generic</span><br><span class="line">-rw-r--r--  1 root root 72011182 11月  1 06:58 initrd.img-6.8.0-48-generic</span><br><span class="line">lrwxrwxrwx  1 root root       27 11月  1 06:58 initrd.img.old -&gt; initrd.img-6.8.0-47-generic</span><br><span class="line">drwx------  2 root root    16384  8月  8 09:53 lost+found/</span><br><span class="line">-rw-r--r--  1 root root   182800  2月  7  2022 memtest86+.bin</span><br><span class="line">-rw-r--r--  1 root root   184476  2月  7  2022 memtest86+.elf</span><br><span class="line">-rw-r--r--  1 root root   184980  2月  7  2022 memtest86+_multiboot.bin</span><br><span class="line">-rw-------  1 root root  8657806 10月  2 22:39 System.map-6.8.0-47-generic</span><br><span class="line">-rw-------  1 root root  8659561 10月  7 17:56 System.map-6.8.0-48-generic</span><br><span class="line">lrwxrwxrwx  1 root root       24 11月  1 06:58 vmlinuz -&gt; vmlinuz-6.8.0-48-generic</span><br><span class="line">-rw-------  1 root root 14911880 10月  2 22:43 vmlinuz-6.8.0-47-generic</span><br><span class="line">-rw-------  1 root root 14915976 10月  7 17:58 vmlinuz-6.8.0-48-generic</span><br><span class="line">lrwxrwxrwx  1 root root       24 11月  1 06:58 vmlinuz.old -&gt; vmlinuz-6.8.0-47-generic</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从上面 <code>/boot</code> 目录下的信息来看，这不就是 grub 菜单里面的东西嘛。那么就下来只要在 grub.conf 找到菜单排列就好了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 省略...</span></span><br><span class="line">menuentry <span class="string">&#x27;Ubuntu&#x27;</span> --class ubuntu --class gnu-linux --class gnu --class os <span class="variable">$menuentry_id_option</span> <span class="string">&#x27;gnulinux-simple-78ef3df0-dd4a-47f6-a7f9-4cda535dfe1b&#x27;</span> &#123;</span><br><span class="line">	recordfail</span><br><span class="line">	load_video</span><br><span class="line">	gfxmode <span class="variable">$linux_gfx_mode</span></span><br><span class="line">	insmod gzio</span><br><span class="line">	<span class="keyword">if</span> [ x<span class="variable">$grub_platform</span> = xxen ]; <span class="keyword">then</span> insmod xzio; insmod lzopio; <span class="keyword">fi</span></span><br><span class="line">	insmod part_gpt</span><br><span class="line">	insmod ext2</span><br><span class="line">	search --no-floppy --fs-uuid --<span class="built_in">set</span>=root 0691b564-31ef-421c-9b8e-c7e498f0a651</span><br><span class="line">	linux	/vmlinuz-6.8.0-48-generic root=UUID=78ef3df0-dd4a-47f6-a7f9-4cda535dfe1b ro  quiet splash <span class="variable">$vt_handoff</span></span><br><span class="line">	initrd	/initrd.img-6.8.0-48-generic</span><br><span class="line">&#125;</span><br><span class="line">submenu <span class="string">&#x27;Advanced options for Ubuntu&#x27;</span> <span class="variable">$menuentry_id_option</span> <span class="string">&#x27;gnulinux-advanced-78ef3df0-dd4a-47f6-a7f9-4cda535dfe1b&#x27;</span> &#123;</span><br><span class="line">	menuentry <span class="string">&#x27;Ubuntu, with Linux 6.8.0-48-generic&#x27;</span> --class ubuntu --class gnu-linux --class gnu --class os <span class="variable">$menuentry_id_option</span> <span class="string">&#x27;gnulinux-6.8.0-48-generic-advanced-78ef3df0-dd4a-47f6-a7f9-4cda535dfe1b&#x27;</span> &#123;</span><br><span class="line">		recordfail</span><br><span class="line">		load_video</span><br><span class="line">		gfxmode <span class="variable">$linux_gfx_mode</span></span><br><span class="line">		insmod gzio</span><br><span class="line">		<span class="keyword">if</span> [ x<span class="variable">$grub_platform</span> = xxen ]; <span class="keyword">then</span> insmod xzio; insmod lzopio; <span class="keyword">fi</span></span><br><span class="line">		insmod part_gpt</span><br><span class="line">		insmod ext2</span><br><span class="line">		search --no-floppy --fs-uuid --<span class="built_in">set</span>=root 0691b564-31ef-421c-9b8e-c7e498f0a651</span><br><span class="line">		<span class="built_in">echo</span>	<span class="string">&#x27;Loading Linux 6.8.0-48-generic ...&#x27;</span></span><br><span class="line">		linux	/vmlinuz-6.8.0-48-generic root=UUID=78ef3df0-dd4a-47f6-a7f9-4cda535dfe1b ro  quiet splash <span class="variable">$vt_handoff</span></span><br><span class="line">		<span class="built_in">echo</span>	<span class="string">&#x27;Loading initial ramdisk ...&#x27;</span></span><br><span class="line">		initrd	/initrd.img-6.8.0-48-generic</span><br><span class="line">	&#125;</span><br><span class="line">	menuentry <span class="string">&#x27;Ubuntu, with Linux 6.8.0-48-generic (recovery mode)&#x27;</span> --class ubuntu --class gnu-linux --class gnu --class os <span class="variable">$menuentry_id_option</span> <span class="string">&#x27;gnulinux-6.8.0-48-generic-recovery-78ef3df0-dd4a-47f6-a7f9-4cda535dfe1b&#x27;</span> &#123;</span><br><span class="line">		recordfail</span><br><span class="line">		load_video</span><br><span class="line">		insmod gzio</span><br><span class="line">		<span class="keyword">if</span> [ x<span class="variable">$grub_platform</span> = xxen ]; <span class="keyword">then</span> insmod xzio; insmod lzopio; <span class="keyword">fi</span></span><br><span class="line">		insmod part_gpt</span><br><span class="line">		insmod ext2</span><br><span class="line">		search --no-floppy --fs-uuid --<span class="built_in">set</span>=root 0691b564-31ef-421c-9b8e-c7e498f0a651</span><br><span class="line">		<span class="built_in">echo</span>	<span class="string">&#x27;Loading Linux 6.8.0-48-generic ...&#x27;</span></span><br><span class="line">		linux	/vmlinuz-6.8.0-48-generic root=UUID=78ef3df0-dd4a-47f6-a7f9-4cda535dfe1b ro recovery nomodeset dis_ucode_ldr </span><br><span class="line">		<span class="built_in">echo</span>	<span class="string">&#x27;Loading initial ramdisk ...&#x27;</span></span><br><span class="line">		initrd	/initrd.img-6.8.0-48-generic</span><br><span class="line">	&#125;</span><br><span class="line">	menuentry <span class="string">&#x27;Ubuntu, with Linux 6.8.0-47-generic&#x27;</span> --class ubuntu --class gnu-linux --class gnu --class os <span class="variable">$menuentry_id_option</span> <span class="string">&#x27;gnulinux-6.8.0-47-generic-advanced-78ef3df0-dd4a-47f6-a7f9-4cda535dfe1b&#x27;</span> &#123;</span><br><span class="line">		recordfail</span><br><span class="line">		load_video</span><br><span class="line">		gfxmode <span class="variable">$linux_gfx_mode</span></span><br><span class="line">		insmod gzio</span><br><span class="line">		<span class="keyword">if</span> [ x<span class="variable">$grub_platform</span> = xxen ]; <span class="keyword">then</span> insmod xzio; insmod lzopio; <span class="keyword">fi</span></span><br><span class="line">		insmod part_gpt</span><br><span class="line">		insmod ext2</span><br><span class="line">		search --no-floppy --fs-uuid --<span class="built_in">set</span>=root 0691b564-31ef-421c-9b8e-c7e498f0a651</span><br><span class="line">		<span class="built_in">echo</span>	<span class="string">&#x27;Loading Linux 6.8.0-47-generic ...&#x27;</span></span><br><span class="line">		linux	/vmlinuz-6.8.0-47-generic root=UUID=78ef3df0-dd4a-47f6-a7f9-4cda535dfe1b ro  quiet splash <span class="variable">$vt_handoff</span></span><br><span class="line">		<span class="built_in">echo</span>	<span class="string">&#x27;Loading initial ramdisk ...&#x27;</span></span><br><span class="line">		initrd	/initrd.img-6.8.0-47-generic</span><br><span class="line">	&#125;</span><br><span class="line">	menuentry <span class="string">&#x27;Ubuntu, with Linux 6.8.0-47-generic (recovery mode)&#x27;</span> --class ubuntu --class gnu-linux --class gnu --class os <span class="variable">$menuentry_id_option</span> <span class="string">&#x27;gnulinux-6.8.0-47-generic-recovery-78ef3df0-dd4a-47f6-a7f9-4cda535dfe1b&#x27;</span> &#123;</span><br><span class="line">		recordfail</span><br><span class="line">		load_video</span><br><span class="line">		insmod gzio</span><br><span class="line">		<span class="keyword">if</span> [ x<span class="variable">$grub_platform</span> = xxen ]; <span class="keyword">then</span> insmod xzio; insmod lzopio; <span class="keyword">fi</span></span><br><span class="line">		insmod part_gpt</span><br><span class="line">		insmod ext2</span><br><span class="line">		search --no-floppy --fs-uuid --<span class="built_in">set</span>=root 0691b564-31ef-421c-9b8e-c7e498f0a651</span><br><span class="line">		<span class="built_in">echo</span>	<span class="string">&#x27;Loading Linux 6.8.0-47-generic ...&#x27;</span></span><br><span class="line">		linux	/vmlinuz-6.8.0-47-generic root=UUID=78ef3df0-dd4a-47f6-a7f9-4cda535dfe1b ro recovery nomodeset dis_ucode_ldr </span><br><span class="line">		<span class="built_in">echo</span>	<span class="string">&#x27;Loading initial ramdisk ...&#x27;</span></span><br><span class="line">		initrd	/initrd.img-6.8.0-47-generic</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略...</span></span><br></pre></td></tr></table></figure>

<p>上面的信息就更加完整了，计算机启动时 gurb 菜单就是按照这个配置文件输出的。既然 grub 菜单中Ubuntu默认内核 linuz-6.8.0-48-generic 启动失败，那么就修改为 linuz-6.8.0-47-generic。</p>
<p>编辑 &#x2F;boot&#x2F;grub&#x2F;grub.conf，仅修改Ubuntu菜单里面的内容，其他内容不做修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menuentry <span class="string">&#x27;Ubuntu&#x27;</span> --class ubuntu --class gnu-linux --class gnu --class os <span class="variable">$menuentry_id_option</span> <span class="string">&#x27;gnulinux-simple-78ef3df0-dd4a-47f6-a7f9-4cda535dfe1b&#x27;</span> &#123;</span><br><span class="line">	recordfail</span><br><span class="line">	load_video</span><br><span class="line">	gfxmode <span class="variable">$linux_gfx_mode</span></span><br><span class="line">	insmod gzio</span><br><span class="line">	<span class="keyword">if</span> [ x<span class="variable">$grub_platform</span> = xxen ]; <span class="keyword">then</span> insmod xzio; insmod lzopio; <span class="keyword">fi</span></span><br><span class="line">	insmod part_gpt</span><br><span class="line">	insmod ext2</span><br><span class="line">	search --no-floppy --fs-uuid --<span class="built_in">set</span>=root 0691b564-31ef-421c-9b8e-c7e498f0a651</span><br><span class="line">	linux	/vmlinuz-6.8.0-47-generic root=UUID=78ef3df0-dd4a-47f6-a7f9-4cda535dfe1b ro  quiet splash <span class="variable">$vt_handoff</span></span><br><span class="line">	initrd	/initrd.img-6.8.0-47-generic</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着重启计算机，grub 默认使用 linuz-6.8.0-47-generic 内核文件（因为选择这个可以正常进入系统），直接进入到用户登录界面。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>grub</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 22.04: ch34x UART Error</title>
    <url>/2024/10/31/2024/Ubuntu-22-04-ch34x-UART-Error/</url>
    <content><![CDATA[<p>USB-TTL模块接入PC后，无法识别为正常的USB接口。接着一系列问题排查过程：</p>
<ul>
<li><p>确认USB-TTL模块是否被识别</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pi@localhost:~$ lsusb</span><br><span class="line">Bus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 003 Device 003: ID 27c6:5125 Shenzhen Goodix Technology Co.,Ltd. Goodix Fingerprint Device </span><br><span class="line">Bus 003 Device 002: ID 0489:e0df Foxconn / Hon Hai </span><br><span class="line">Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br><span class="line">Bus 002 Device 011: ID 0b95:1790 ASIX Electronics Corp. AX88179 Gigabit Ethernet</span><br><span class="line">Bus 002 Device 010: ID 05e3:0626 Genesys Logic, Inc. USB3.1 Hub</span><br><span class="line">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 001 Device 005: ID 13d3:56f8 IMC Networks ov9734_azurewave_camera</span><br><span class="line">Bus 001 Device 003: ID 046d:c52f Logitech, Inc. Unifying Receiver</span><br><span class="line">Bus 001 Device 019: ID 10c4:ea60 Silicon Labs CP210x UART Bridge</span><br><span class="line">Bus 001 Device 028: ID 1a86:7523 QinHeng Electronics CH340 serial converter</span><br><span class="line">Bus 001 Device 020: ID 2207:0006 Fuzhou Rockchip Electronics Company rk3xxx</span><br><span class="line">Bus 001 Device 018: ID 05e3:0610 Genesys Logic, Inc. Hub</span><br><span class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>QinHeng Electronics CH340 serial converter</code>：表示已经被识别了</p>
</li>
<li><p>确认ch34x驱动是否安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pi@localhost:~$ lsmod | grep usbserial</span><br><span class="line">usbserial              69632  2 cp210x,ch341</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用这种方式查询</span></span><br><span class="line">pi@localhost:~$ <span class="built_in">ls</span> /lib/modules/$(<span class="built_in">uname</span> -r)/kernel/drivers/usb/serial</span><br><span class="line">aircable.ko    digi_acceleport.ko  io_ti.ko        kl5kusb105.ko  navman.ko   qcserial.ko      ti_usb_3410_5052.ko   whiteheat.ko</span><br><span class="line">ark3116.ko     empeg.ko            ipaq.ko         kobil_sct.ko   omninet.ko  quatech2.ko      upd78f0730.ko         wishbone-serial.ko</span><br><span class="line">belkin_sa.ko   f81232.ko           ipw.ko          mct_u232.ko    opticon.ko  safe_serial.ko   usb_debug.ko          xr_serial.ko</span><br><span class="line">ch341.ko       f81534.ko           ir-usb.ko       metro-usb.ko   option.ko   sierra.ko        usbserial.ko          xsens_mt.ko</span><br><span class="line">cp210x.ko      ftdi_sio.ko         iuu_phoenix.ko  mos7720.ko     oti6858.ko  spcp8x5.ko       usb-serial-simple.ko</span><br><span class="line">cyberjack.ko   garmin_gps.ko       keyspan.ko      mos7840.ko     pl2303.ko   ssu100.ko        usb_wwan.ko</span><br><span class="line">cypress_m8.ko  io_edgeport.ko      keyspan_pda.ko  mxuport.ko     qcaux.ko    symbolserial.ko  visor.ko</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>cp210x,ch341</code>：表示已经加载了cp210x驱动和ch341驱动</p>
</li>
<li><p><strong>查看关于tty的系统日志（重点问题）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pi@localhost:~$ <span class="built_in">sudo</span> dmesg | grep <span class="built_in">tty</span></span><br><span class="line">[290153.696478] usb 1-2.2: ch341-uart converter now attached to ttyUSB0</span><br><span class="line">[290154.264259] usb 1-2.2: usbfs: interface 0 claimed by ch341 <span class="keyword">while</span> <span class="string">&#x27;brltty&#x27;</span> sets config <span class="comment">#1</span></span><br><span class="line">[290154.266443] ch341-uart ttyUSB0: ch341-uart converter now disconnected from ttyUSB0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在浏览器上找到了 <a href="https://cn.linuxos.info/command/brltty">brltty</a> 这个进程导致USB-TTL转换失败了。</p>
<p><strong>brltty</strong> 是一个后台进程（守护进程），它使用可刷新的盲文显示器为盲人提供对控制台屏幕（在文本模式下）的访问。它驱动盲文显示器，并提供完整的屏幕查看功能。一些语音功能也被纳入其中。</p>
<p>解决方法：卸载brltty，执行命令 <code>sudo apt remove brltty</code></p>
<p>再次查询 <code>/dev/ttyUSB0</code> 是否存在了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pi@localhost:~$  <span class="built_in">sudo</span> <span class="built_in">ls</span> /dev/ttyU*</span><br><span class="line">/dev/ttyUSB0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果不是这种原因引起的，那么就可能是ch34x驱动太旧了，需要更新驱动程序。可以到这个地址去下载驱动：<a href="https://www.wch.cn/downloads/CH341SER_LINUX_ZIP.html">CH341SER_LINUX.ZIP</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>UART</tag>
        <tag>ch34x</tag>
      </tags>
  </entry>
  <entry>
    <title>DBUS: busctl tool</title>
    <url>/2024/10/31/2024/DBUS-busctl-tool/</url>
    <content><![CDATA[<h2 id="busctl"><a href="#busctl" class="headerlink" title="busctl"></a>busctl</h2><blockquote>
<p><a href="https://www.freedesktop.org/software/systemd/man/latest/busctl.html">busctl</a>是什么的？</p>
</blockquote>
<p>busctl 可用于自省和监控 D-Bus 总线。</p>
<p><strong>busctl用法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">busctl [OPTIONS...] COMMAND ...</span><br><span class="line"></span><br><span class="line">Introspect the D-Bus IPC bus.</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  list                     List bus names</span><br><span class="line">  status [SERVICE]         Show bus service, process or bus owner credentials</span><br><span class="line">  monitor [SERVICE...]     Show bus traffic</span><br><span class="line">  capture [SERVICE...]     Capture bus traffic as pcap</span><br><span class="line">  tree [SERVICE...]        Show object tree of service</span><br><span class="line">  introspect SERVICE OBJECT [INTERFACE]</span><br><span class="line">  call SERVICE OBJECT INTERFACE METHOD [SIGNATURE [ARGUMENT...]]</span><br><span class="line">                           Call a method</span><br><span class="line">  emit OBJECT INTERFACE SIGNAL [SIGNATURE [ARGUMENT...]]</span><br><span class="line">                           Emit a signal</span><br><span class="line">  get-property SERVICE OBJECT INTERFACE PROPERTY...</span><br><span class="line">                           Get property value</span><br><span class="line">  set-property SERVICE OBJECT INTERFACE PROPERTY SIGNATURE ARGUMENT...</span><br><span class="line">                           Set property value</span><br><span class="line">  <span class="built_in">help</span>                     Show this <span class="built_in">help</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="查询所有的bus-name"><a href="#查询所有的bus-name" class="headerlink" title="查询所有的bus name"></a>查询所有的bus name</h3><p>执行命令：<code>busctl list --no-pager --system</code></p>
<p><em>注意：–no-pager 参数表示不分页显示，–systemc 参数表示链接到系统bus</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NAME                            PID PROCESS         USER             CONNECTION    UNIT                                  SESSION DESCRIPTION</span><br><span class="line">:1.0                            123 dbus-broker-lau root             :1.0          dbus-broker.service                   -       -          </span><br><span class="line">:1.1                              1 systemd         root             :1.1          init.scope                            -       -          </span><br><span class="line">:1.11                           573 rauc            root             :1.11         rauc.service                          -       -          </span><br><span class="line">:1.15                           622 systemd-timesyn systemd-timesync :1.15         systemd-timesyncd.service             -       -          </span><br><span class="line">:1.19                          1042 python3         root             :1.19         docker-007b2d3a171bb6c083dc68968a4f6… -       -          </span><br><span class="line">:1.2                            135 udisksd         root             :1.2          udisks2.service                       -       -          </span><br><span class="line">:1.28                          1624 coredns         root             :1.28         docker-30807294999a70b11bed61212f49c… -       -          </span><br><span class="line">:1.3                            287 os-agent        root             :1.3          haos-agent.service                    -       -          </span><br><span class="line">:1.33                          1944 pulseaudio      root             :1.33         docker-f3b5cb4c6d236b78db17af3dcab3b… -       -          </span><br><span class="line">:1.4                            517 systemd-resolve systemd-resolve  :1.4          systemd-resolved.service              -       -          </span><br><span class="line">:1.6                            532 systemd-logind  root             :1.6          systemd-logind.service                -       -          </span><br><span class="line">:1.7                            533 wpa_supplicant  root             :1.7          wpa_supplicant.service                -       -          </span><br><span class="line">:1.8                            520 NetworkManager  root             :1.8          NetworkManager.service                -       -          </span><br><span class="line">:1.831                         4650 busctl          root             :1.831        dropbear.service                      -       -          </span><br><span class="line">de.pengutronix.rauc             573 rauc            root             :1.11         rauc.service                          -       -          </span><br><span class="line">fi.w1.wpa_supplicant1           533 wpa_supplicant  root             :1.7          wpa_supplicant.service                -       -          </span><br><span class="line">io.hass.os                      287 os-agent        root             :1.3          haos-agent.service                    -       -          </span><br><span class="line">org.bluez                         - -               -                (activatable) -                                     -       -          </span><br><span class="line">org.freedesktop.DBus              1 systemd         root             -             init.scope                            -       -          </span><br><span class="line">org.freedesktop.NetworkManager  520 NetworkManager  root             :1.8          NetworkManager.service                -       -          </span><br><span class="line">org.freedesktop.UDisks2         135 udisksd         root             :1.2          udisks2.service                       -       -          </span><br><span class="line">org.freedesktop.hostname1         - -               -                (activatable) -                                     -       -          </span><br><span class="line">org.freedesktop.login1          532 systemd-logind  root             :1.6          systemd-logind.service                -       -          </span><br><span class="line">org.freedesktop.nm_dispatcher     - -               -                (activatable) -                                     -       -          </span><br><span class="line">org.freedesktop.nm_priv_helper    - -               -                (activatable) -                                     -       -          </span><br><span class="line">org.freedesktop.resolve1        517 systemd-resolve systemd-resolve  :1.4          systemd-resolved.service              -       -          </span><br><span class="line">org.freedesktop.systemd1          1 systemd         root             :1.1          init.scope                            -       -          </span><br><span class="line">org.freedesktop.timedate1         - -               -                (activatable) -                                     -       -          </span><br><span class="line">org.freedesktop.timesync1       622 systemd-timesyn systemd-timesync :1.15         systemd-timesyncd.service             -       -          </span><br><span class="line">org.pulseaudio.Server          1944 pulseaudio      root             :1.33         docker-f3b5cb4c6d236b78db17af3dcab3b… -       -          </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="查询指定bus-name的对象信息"><a href="#查询指定bus-name的对象信息" class="headerlink" title="查询指定bus name的对象信息"></a>查询指定bus name的对象信息</h3><p>执行命令：<code>busctl introspect fi.w1.wpa_supplicant1 /fi/w1/wpa_supplicant1</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NAME                                TYPE      SIGNATURE RESULT/VALUE                            FLAGS</span><br><span class="line">fi.w1.wpa_supplicant1               interface -         -                                       -</span><br><span class="line">.CreateInterface                    method    a&#123;sv&#125;     o                                       -</span><br><span class="line">.ExpectDisconnect                   method    -         -                                       -</span><br><span class="line">.GetInterface                       method    s         o                                       -</span><br><span class="line">.RemoveInterface                    method    o         -                                       -</span><br><span class="line">.Capabilities                       property  as        6 <span class="string">&quot;ap&quot;</span> <span class="string">&quot;p2p&quot;</span> <span class="string">&quot;pmf&quot;</span> <span class="string">&quot;ft&quot;</span> <span class="string">&quot;sha384&quot;</span> <span class="string">&quot;owe&quot;</span>  emits-change</span><br><span class="line">.DebugLevel                         property  s         <span class="string">&quot;info&quot;</span>                                  emits-change writable</span><br><span class="line">.DebugShowKeys                      property  b         <span class="literal">false</span>                                   emits-change writable</span><br><span class="line">.DebugTimestamp                     property  b         <span class="literal">false</span>                                   emits-change writable</span><br><span class="line">.EapMethods                         property  as        1 <span class="string">&quot;WSC&quot;</span>                                 emits-change</span><br><span class="line">.Interfaces                         property  ao        1 <span class="string">&quot;/fi/w1/wpa_supplicant1/Interfaces/0&quot;</span> emits-change</span><br><span class="line">.InterfaceAdded                     signal    oa&#123;sv&#125;    -                                       -</span><br><span class="line">.InterfaceRemoved                   signal    o         -                                       -</span><br><span class="line">.PropertiesChanged                  signal    a&#123;sv&#125;     -                                       -</span><br><span class="line">org.freedesktop.DBus.Introspectable interface -         -                                       -</span><br><span class="line">.Introspect                         method    -         s                                       -</span><br><span class="line">org.freedesktop.DBus.Properties     interface -         -                                       -</span><br><span class="line">.Get                                method    ss        v                                       -</span><br><span class="line">.GetAll                             method    s         a&#123;sv&#125;                                   -</span><br><span class="line">.Set                                method    ssv       -                                       -</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>IPC</category>
      </categories>
  </entry>
  <entry>
    <title>NetworkManager Application</title>
    <url>/2024/10/31/2024/NetworkManager-Application/</url>
    <content><![CDATA[<h2 id="NetworkManager"><a href="#NetworkManager" class="headerlink" title="NetworkManager"></a>NetworkManager</h2><blockquote>
<p><a href="https://networkmanager.dev/docs/api/latest/NetworkManager.html">NetworkManager</a>是什么？</p>
</blockquote>
<p>NetworkManager 守护程序尝试通过管理主网络连接和其他网络接口（如以太网、Wi-Fi 和移动宽带设备）来使网络配置和操作尽可能轻松和自动化。当任何网络设备的连接可用时，NetworkManager 将连接该设备，除非该行为被禁用。有关网络的信息通过 D-Bus 接口导出到任何感兴趣的应用程序，从而提供丰富的 API 来检查和控制网络设置和操作。</p>
<h2 id="D-Bus-API"><a href="#D-Bus-API" class="headerlink" title="D-Bus API"></a>D-Bus API</h2><h2 id="libnm"><a href="#libnm" class="headerlink" title="libnm"></a>libnm</h2><blockquote>
<p><a href="https://networkmanager.dev/docs/libnm/latest/ref-overview.html">libnm</a>是什么？</p>
</blockquote>
<p>libnm 是 NetworkManager（标准 Linux 网络管理服务）的客户端库。NetworkManager 支持各种网络配置方案、硬件设备和协议系列。大多数功能都通过 <a href="https://networkmanager.dev/docs/api/latest/spec.html">D-Bus API</a>公开，从而允许其他工具使用 NetworkManager 提供的功能。</p>
<p>libnm 为 NetworkManager 提供的功能提供了 C 语言绑定，其他语言运行时也可以使用。</p>
<p>libnm 与 NetworkManager 提供的实际 D-Bus API 映射得相当紧密，将远程 D-Bus 对象包装为本机 GObject，将 D-Bus 信号和属性映射到 GObject 信号和属性，并提供有用的访问器和实用函数。但是，与旧的 libnm-util&#x2F;libnm-glib API 不同，与 D-Bus API 的映射并不精确，并且 D-Bus API 的各种不便之处和历史异常都被掩盖了。</p>
<p>以下是 libnm 对象结构的粗略概述以及如何使用它的各个部分：</p>
<p><img src="/2024/10/31/2024/NetworkManager-Application/image-20241031145554396.png" alt="image-20241031145554396"></p>
]]></content>
      <categories>
        <category>Wi-Fi</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>NetworkManager</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>wpa-supplicant applicant: Scan Method</title>
    <url>/2024/10/30/2024/wpa-supplicant-applicant-Scan-Method/</url>
    <content><![CDATA[<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>代码过程：</p>
<ul>
<li>注册信号回调函数</li>
<li>创建gdbus连接</li>
<li>创建gdbus事件循环</li>
<li>获取wlan0的对象路径（这一步比较关键，后面Scan方法需要wlan0的对象路径作为参数传入）</li>
<li>分别订阅ScanDone 信号、BSSAdded 信号、BSSRemoved 信号、PropertiesChanged 信号</li>
<li>调用Scan方法</li>
<li>启动gdbus事件循环</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">gcc src/main.c -o wpa-ctl \</span></span><br><span class="line"><span class="comment">	`pkg-config --cflags --libs gio-2.0`\</span></span><br><span class="line"><span class="comment">	`pkg-config --cflags --libs glib-2.0`\</span></span><br><span class="line"><span class="comment">	`pkg-config --cflags --libs dbus-1`</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gio/gio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glib/gprintf.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">GMainLoop *g_loop;</span><br><span class="line">GDBusConnection *g_gdbus_con;</span><br><span class="line"></span><br><span class="line">guint g_prop_changed;</span><br><span class="line">guint g_scan_done;</span><br><span class="line">guint g_bss_removed;</span><br><span class="line">guint g_bss_added;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">wpa_property_value</span><span class="params">(<span class="type">const</span> gchar *key, GVariant *value)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">const</span> gchar *type = g_variant_get_type_string(value);</span><br><span class="line">	<span class="comment">// g_printf(&quot;type: %s\n&quot;, type);</span></span><br><span class="line">	g_printf(<span class="string">&quot;\t%s(%s) : &quot;</span>, key, type);</span><br><span class="line">	<span class="keyword">switch</span>(*type) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;o&#x27;</span>: <span class="comment">// object_path</span></span><br><span class="line">			g_printf(<span class="string">&quot;%s\n&quot;</span>, g_variant_get_string(value, <span class="literal">NULL</span>));</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>: <span class="comment">// string</span></span><br><span class="line">			g_printf(<span class="string">&quot;%s\n&quot;</span>, g_variant_get_string(value, <span class="literal">NULL</span>));</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>: <span class="comment">// boolean</span></span><br><span class="line">			g_printf(<span class="string">&quot;%s\n&quot;</span>, g_variant_get_boolean(value)? <span class="string">&quot;true&quot;</span>:<span class="string">&quot;false&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">			g_printf(<span class="string">&quot;%#x\n&quot;</span>, g_variant_get_byte(value));</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>: <span class="comment">// uint32</span></span><br><span class="line">			g_printf(<span class="string">&quot;%d\n&quot;</span>, g_variant_get_uint32(value));</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>: <span class="comment">// int16</span></span><br><span class="line">			g_printf(<span class="string">&quot;%hd\n&quot;</span>, g_variant_get_int16(value));</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;q&#x27;</span>: <span class="comment">// uint16</span></span><br><span class="line">			g_printf(<span class="string">&quot;%u\n&quot;</span>, g_variant_get_uint16(value));</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>: <span class="comment">// int32</span></span><br><span class="line">			g_printf(<span class="string">&quot;%d\n&quot;</span>, g_variant_get_int32(value));</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>: <span class="comment">// array,[]</span></span><br><span class="line">		<span class="comment">/* TODO Handling only &#x27;as&#x27;, but not array of dicts */</span></span><br><span class="line">			<span class="keyword">if</span>(!g_strcmp0(type, <span class="string">&quot;as&quot;</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				g_printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">				gchar *uuid;</span><br><span class="line">				GVariantIter i;</span><br><span class="line">				g_variant_iter_init(&amp;i, value);</span><br><span class="line">				<span class="keyword">while</span>(g_variant_iter_next(&amp;i, <span class="string">&quot;s&quot;</span>, &amp;uuid))</span><br><span class="line">				&#123;</span><br><span class="line">					g_printf(<span class="string">&quot;\t\t%s\n&quot;</span>, uuid);</span><br><span class="line">					g_free(uuid);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (!g_strcmp0(type, <span class="string">&quot;ay&quot;</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				guint8 byte;</span><br><span class="line">				GVariantIter i;</span><br><span class="line">				g_variant_iter_init(&amp;i, value);</span><br><span class="line">				gsize size = g_variant_iter_n_children(&amp;i);</span><br><span class="line">				<span class="keyword">if</span> (!g_strcmp0(<span class="string">&quot;SSID&quot;</span>, key))</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">while</span>(g_variant_iter_next(&amp;i, <span class="string">&quot;y&quot;</span>, &amp;byte))</span><br><span class="line">						g_printf(<span class="string">&quot;%c&quot;</span>, byte);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (!g_strcmp0(<span class="string">&quot;BSSID&quot;</span>, key))</span><br><span class="line">				&#123;</span><br><span class="line">					guint8 cnt = <span class="number">0</span>;</span><br><span class="line">					<span class="keyword">while</span>(g_variant_iter_next(&amp;i, <span class="string">&quot;y&quot;</span>, &amp;byte))</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (cnt == size <span class="number">-1</span>)</span><br><span class="line">							g_printf(<span class="string">&quot;%02X&quot;</span>, byte);</span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">							g_printf(<span class="string">&quot;%02X-&quot;</span>, byte);</span><br><span class="line">						cnt++;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">while</span>(g_variant_iter_next(&amp;i, <span class="string">&quot;y&quot;</span>, &amp;byte))</span><br><span class="line">						g_printf(<span class="string">&quot;0x%x &quot;</span>, byte);</span><br><span class="line">				&#125;</span><br><span class="line">				g_printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (!g_strcmp0(type, <span class="string">&quot;ao&quot;</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				g_printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">				gchar *opath;</span><br><span class="line">				GVariantIter i;</span><br><span class="line">				g_variant_iter_init(&amp;i, value);</span><br><span class="line">				<span class="keyword">while</span>(g_variant_iter_next(&amp;i, <span class="string">&quot;o&quot;</span>, &amp;opath))</span><br><span class="line">				&#123;</span><br><span class="line">					g_printf(<span class="string">&quot;\t\t%s\n&quot;</span>, opath);</span><br><span class="line">					g_free(opath);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (!g_strcmp0(type, <span class="string">&quot;au&quot;</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				guint32 rate = <span class="number">0</span>;</span><br><span class="line">				GVariantIter i;</span><br><span class="line">				g_variant_iter_init(&amp;i, value);</span><br><span class="line">				<span class="keyword">while</span>(g_variant_iter_next(&amp;i, <span class="string">&quot;u&quot;</span>, &amp;rate))</span><br><span class="line">					g_printf(<span class="string">&quot;%u &quot;</span>, rate);</span><br><span class="line">				g_printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (!g_strcmp0(type, <span class="string">&quot;a&#123;sv&#125;&quot;</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				g_printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">				GVariantIter iter;</span><br><span class="line">    			GVariant *prop_val;</span><br><span class="line">				gchar *prop_name;</span><br><span class="line">				g_variant_iter_init(&amp;iter, value);</span><br><span class="line">				<span class="keyword">while</span> (g_variant_iter_next (&amp;iter, <span class="string">&quot;&#123;sv&#125;&quot;</span>, &amp;prop_name, &amp;prop_val))</span><br><span class="line">				&#123;</span><br><span class="line">					g_printf(<span class="string">&quot;\t\t%s: &quot;</span>, prop_name);</span><br><span class="line">					<span class="keyword">if</span> (g_variant_is_of_type(prop_val, G_VARIANT_TYPE_STRING))</span><br><span class="line">					&#123;</span><br><span class="line">						g_printf(<span class="string">&quot;%s\n&quot;</span>, g_variant_get_string(prop_val, <span class="literal">NULL</span>));</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (g_variant_is_of_type(prop_val, G_VARIANT_TYPE_STRING_ARRAY))</span><br><span class="line">					&#123;</span><br><span class="line">						gchar *str;</span><br><span class="line">						GVariantIter i;</span><br><span class="line">						g_variant_iter_init(&amp;i, prop_val);</span><br><span class="line">						<span class="keyword">while</span> (g_variant_iter_next(&amp;i, <span class="string">&quot;s&quot;</span>, &amp;str))</span><br><span class="line">						&#123;</span><br><span class="line">							g_printf(<span class="string">&quot;%s &quot;</span>, str);</span><br><span class="line">							g_free(str);</span><br><span class="line">						&#125;</span><br><span class="line">						g_printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line">					g_free(prop_name);</span><br><span class="line">					g_variant_unref(prop_val);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				g_printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			g_printf(<span class="string">&quot;Other\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">wpa_signal_scan_done_cb</span><span class="params">(GDBusConnection *sig,</span></span><br><span class="line"><span class="params">									<span class="type">const</span> gchar *sender_name,</span></span><br><span class="line"><span class="params">									<span class="type">const</span> gchar *object_path,</span></span><br><span class="line"><span class="params">									<span class="type">const</span> gchar *interface,</span></span><br><span class="line"><span class="params">									<span class="type">const</span> gchar *signal_name,</span></span><br><span class="line"><span class="params">									GVariant *parameters,</span></span><br><span class="line"><span class="params">									gpointer user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// parameters data type: (b)</span></span><br><span class="line">	(<span class="type">void</span>)sig;</span><br><span class="line">	(<span class="type">void</span>)sender_name;</span><br><span class="line">	(<span class="type">void</span>)object_path;</span><br><span class="line">	(<span class="type">void</span>)interface;</span><br><span class="line">	(<span class="type">void</span>)signal_name;</span><br><span class="line">	(<span class="type">void</span>)user_data;</span><br><span class="line"></span><br><span class="line">	<span class="type">const</span> gchar *type = g_variant_get_type_string(parameters);</span><br><span class="line">	g_printf(<span class="string">&quot;ScanDone signal data type: %s\n&quot;</span>, type);</span><br><span class="line">	g_printf(<span class="string">&quot;%s\n&quot;</span>, g_variant_print(parameters, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">	gboolean val;</span><br><span class="line">	g_variant_get(parameters, <span class="string">&quot;(b)&quot;</span>, &amp;val);</span><br><span class="line">	g_printf(<span class="string">&quot;ScanDone: %s\n&quot;</span>, val ? <span class="string">&quot;true&quot;</span>:<span class="string">&quot;false&quot;</span>);</span><br><span class="line">	g_printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">wpa_signal_bss_added_cb</span><span class="params">(GDBusConnection *sig,</span></span><br><span class="line"><span class="params">									<span class="type">const</span> gchar *sender_name,</span></span><br><span class="line"><span class="params">									<span class="type">const</span> gchar *object_path,</span></span><br><span class="line"><span class="params">									<span class="type">const</span> gchar *interface,</span></span><br><span class="line"><span class="params">									<span class="type">const</span> gchar *signal_name,</span></span><br><span class="line"><span class="params">									GVariant *parameters,</span></span><br><span class="line"><span class="params">									gpointer user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// parameters data type: (oa&#123;sv&#125;)</span></span><br><span class="line">	(<span class="type">void</span>)sig;</span><br><span class="line">	(<span class="type">void</span>)sender_name;</span><br><span class="line">	(<span class="type">void</span>)object_path;</span><br><span class="line">	(<span class="type">void</span>)interface;</span><br><span class="line">	(<span class="type">void</span>)signal_name;</span><br><span class="line">	(<span class="type">void</span>)user_data;</span><br><span class="line"></span><br><span class="line">	GVariantIter *iter;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *object;</span><br><span class="line">	gchar *interface_name;</span><br><span class="line">	GVariant *properties;</span><br><span class="line"></span><br><span class="line">	<span class="type">const</span> gchar *type = g_variant_get_type_string(parameters);</span><br><span class="line">	g_printf(<span class="string">&quot;BssAdded data type: %s\n&quot;</span>, type);</span><br><span class="line">	g_printf(<span class="string">&quot;%s\n&quot;</span>, g_variant_print(parameters, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">	g_variant_get(parameters, <span class="string">&quot;(oa&#123;sv&#125;)&quot;</span>, &amp;object, &amp;iter);</span><br><span class="line">	g_printf(<span class="string">&quot;object_path: %s\n&quot;</span>, object);</span><br><span class="line">	<span class="keyword">while</span> (g_variant_iter_next(iter, <span class="string">&quot;&#123;sv&#125;&quot;</span>, &amp;interface_name, &amp;properties))</span><br><span class="line">	&#123;</span><br><span class="line">		wpa_property_value(interface_name, properties);</span><br><span class="line">		g_free(interface_name);</span><br><span class="line">		g_variant_unref(properties);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	g_printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	g_variant_iter_free(iter);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">wpa_signal_bss_removed_cb</span><span class="params">(GDBusConnection *sig,</span></span><br><span class="line"><span class="params">									<span class="type">const</span> gchar *sender_name,</span></span><br><span class="line"><span class="params">									<span class="type">const</span> gchar *object_path,</span></span><br><span class="line"><span class="params">									<span class="type">const</span> gchar *interface,</span></span><br><span class="line"><span class="params">									<span class="type">const</span> gchar *signal_name,</span></span><br><span class="line"><span class="params">									GVariant *parameters,</span></span><br><span class="line"><span class="params">									gpointer user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// parameters data type: (o)</span></span><br><span class="line">	(<span class="type">void</span>)sig;</span><br><span class="line">	(<span class="type">void</span>)sender_name;</span><br><span class="line">	(<span class="type">void</span>)object_path;</span><br><span class="line">	(<span class="type">void</span>)interface;</span><br><span class="line">	(<span class="type">void</span>)signal_name;</span><br><span class="line">	(<span class="type">void</span>)user_data;</span><br><span class="line"></span><br><span class="line">	<span class="type">const</span> gchar *type = g_variant_get_type_string(parameters);</span><br><span class="line">	g_printf(<span class="string">&quot;BssRemoved data type: %s\n&quot;</span>, type);</span><br><span class="line">	g_printf(<span class="string">&quot;%s\n&quot;</span>, g_variant_print(parameters, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">	<span class="type">const</span> gchar *val = <span class="literal">NULL</span>;</span><br><span class="line">	g_variant_get(parameters, <span class="string">&quot;(o)&quot;</span>, &amp;val);</span><br><span class="line">	g_printf(<span class="string">&quot;BssRemoved: %s\n&quot;</span>, val);</span><br><span class="line">	g_printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">wpa_signal_properties_changed_cb</span><span class="params">(GDBusConnection *sig,</span></span><br><span class="line"><span class="params">									<span class="type">const</span> gchar *sender_name,</span></span><br><span class="line"><span class="params">									<span class="type">const</span> gchar *object_path,</span></span><br><span class="line"><span class="params">									<span class="type">const</span> gchar *interface,</span></span><br><span class="line"><span class="params">									<span class="type">const</span> gchar *signal_name,</span></span><br><span class="line"><span class="params">									GVariant *parameters,</span></span><br><span class="line"><span class="params">									gpointer user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// parameters data type: (a&#123;sv&#125;)</span></span><br><span class="line">	(<span class="type">void</span>)sig;</span><br><span class="line">	(<span class="type">void</span>)sender_name;</span><br><span class="line">	(<span class="type">void</span>)object_path;</span><br><span class="line">	(<span class="type">void</span>)interface;</span><br><span class="line">	(<span class="type">void</span>)signal_name;</span><br><span class="line">	(<span class="type">void</span>)user_data;</span><br><span class="line"></span><br><span class="line">	GVariantIter *iter;</span><br><span class="line">	gchar *property_name;</span><br><span class="line">	GVariant *prop_val;</span><br><span class="line"></span><br><span class="line">	<span class="type">const</span> gchar *type = g_variant_get_type_string(parameters);</span><br><span class="line">	g_printf(<span class="string">&quot;PropertiesChanged data type: %s\n&quot;</span>, type);</span><br><span class="line">	g_printf(<span class="string">&quot;%s\n&quot;</span>, g_variant_print(parameters, <span class="literal">true</span>));</span><br><span class="line">	</span><br><span class="line">	g_variant_get(parameters, <span class="string">&quot;(a&#123;sv&#125;)&quot;</span>, &amp;iter);</span><br><span class="line">	<span class="comment">// while (g_variant_iter_loop(iter, &quot;&#123;sv&#125;&quot;, &amp;property_name, &amp;prop_val))</span></span><br><span class="line">	<span class="keyword">while</span> (g_variant_iter_next(iter, <span class="string">&quot;&#123;sv&#125;&quot;</span>, &amp;property_name, &amp;prop_val))</span><br><span class="line">	&#123;</span><br><span class="line">		wpa_property_value(property_name, prop_val);</span><br><span class="line">		g_free(property_name);</span><br><span class="line">		g_variant_unref(prop_val);</span><br><span class="line">	&#125;</span><br><span class="line">	g_printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	g_variant_iter_free(iter);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">main_loop_stop</span><span class="params">(<span class="type">int</span> sig)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">sigact</span> =</span> &#123; .sa_handler = SIG_DFL &#125;;</span><br><span class="line">	sigaction(sig, &amp;sigact, <span class="literal">NULL</span>);</span><br><span class="line">	g_main_loop_quit(g_loop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 注册信号回调</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">sigact</span> =</span> &#123; .sa_handler = main_loop_stop &#125;;</span><br><span class="line">	sigaction(SIGTERM, &amp;sigact, <span class="literal">NULL</span>);</span><br><span class="line">	sigaction(SIGINT, &amp;sigact, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建gdbus连接</span></span><br><span class="line">	g_gdbus_con = g_bus_get_sync(G_BUS_TYPE_SYSTEM, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span>(g_gdbus_con == <span class="literal">NULL</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		g_printf(<span class="string">&quot;Not able to get connection to system bus\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建主循环</span></span><br><span class="line">	g_loop = g_main_loop_new(<span class="literal">NULL</span>, FALSE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步调用，获取wlan0的对象路径</span></span><br><span class="line">	GVariant *result;</span><br><span class="line">	GError *error = <span class="literal">NULL</span>;</span><br><span class="line">	result = g_dbus_connection_call_sync(</span><br><span class="line">				g_gdbus_con,</span><br><span class="line">				<span class="string">&quot;fi.w1.wpa_supplicant1&quot;</span>,</span><br><span class="line">				<span class="string">&quot;/fi/w1/wpa_supplicant1&quot;</span>,</span><br><span class="line">				<span class="string">&quot;fi.w1.wpa_supplicant1&quot;</span>,</span><br><span class="line">				<span class="string">&quot;GetInterface&quot;</span>,</span><br><span class="line">				g_variant_new(<span class="string">&quot;(s)&quot;</span>, <span class="string">&quot;wlan0&quot;</span>),</span><br><span class="line">				G_VARIANT_TYPE(<span class="string">&quot;(o)&quot;</span>),</span><br><span class="line">				G_DBUS_CALL_FLAGS_NONE,</span><br><span class="line">				<span class="number">-1</span>,</span><br><span class="line">				<span class="literal">NULL</span>,</span><br><span class="line">				&amp;error);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> != error)</span><br><span class="line">	&#123;</span><br><span class="line">		g_printf(<span class="string">&quot;Error GetInterface: %s\n&quot;</span>, error-&gt;message);</span><br><span class="line">		g_error_free(error);</span><br><span class="line">		<span class="keyword">goto</span> fail;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// g_printf(&quot;%s\n&quot;, g_variant_print(result, true));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析object path</span></span><br><span class="line">    <span class="type">const</span> gchar *object_path = <span class="literal">NULL</span>;</span><br><span class="line">    g_variant_get(result, <span class="string">&quot;(o)&quot;</span>, &amp;object_path);</span><br><span class="line">    g_variant_unref(result);</span><br><span class="line">    <span class="keyword">if</span> (object_path == <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        g_print(<span class="string">&quot;Failed to parse object path from the result.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> fail;</span><br><span class="line">    &#125;</span><br><span class="line">    g_printf(<span class="string">&quot;Received object path from wlan0: %s\n\n&quot;</span>, object_path);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 订阅 ScanDone 信号</span></span><br><span class="line">	g_scan_done = g_dbus_connection_signal_subscribe(</span><br><span class="line">						g_gdbus_con, 						<span class="comment">// connection</span></span><br><span class="line">						<span class="string">&quot;fi.w1.wpa_supplicant1&quot;</span>, 			<span class="comment">// sender</span></span><br><span class="line">						<span class="string">&quot;fi.w1.wpa_supplicant1.Interface&quot;</span>,  <span class="comment">// interface_name</span></span><br><span class="line">						<span class="string">&quot;ScanDone&quot;</span>,							<span class="comment">// member：method or signal</span></span><br><span class="line">						object_path, 								<span class="comment">// object path</span></span><br><span class="line">						<span class="literal">NULL</span>, 								<span class="comment">// arg0</span></span><br><span class="line">						G_DBUS_SIGNAL_FLAGS_NONE, 			<span class="comment">// flags</span></span><br><span class="line">						wpa_signal_scan_done_cb, 			<span class="comment">// callback</span></span><br><span class="line">						<span class="literal">NULL</span>, 								<span class="comment">// user_data</span></span><br><span class="line">						<span class="literal">NULL</span>);</span><br><span class="line">	<span class="comment">// 订阅 BSSAdded 信号</span></span><br><span class="line">	g_bss_added = g_dbus_connection_signal_subscribe(</span><br><span class="line">						g_gdbus_con,</span><br><span class="line">						<span class="string">&quot;fi.w1.wpa_supplicant1&quot;</span>,</span><br><span class="line">						<span class="string">&quot;fi.w1.wpa_supplicant1.Interface&quot;</span>,</span><br><span class="line">						<span class="string">&quot;BSSAdded&quot;</span>,</span><br><span class="line">						object_path,</span><br><span class="line">						<span class="literal">NULL</span>,</span><br><span class="line">						G_DBUS_SIGNAL_FLAGS_NONE,</span><br><span class="line">						wpa_signal_bss_added_cb,</span><br><span class="line">						<span class="literal">NULL</span>,</span><br><span class="line">						<span class="literal">NULL</span>);</span><br><span class="line">	<span class="comment">// 订阅 BSSRemoved 信号</span></span><br><span class="line">	g_bss_removed = g_dbus_connection_signal_subscribe(</span><br><span class="line">						g_gdbus_con,</span><br><span class="line">						<span class="string">&quot;fi.w1.wpa_supplicant1&quot;</span>,</span><br><span class="line">						<span class="string">&quot;fi.w1.wpa_supplicant1.Interface&quot;</span>,</span><br><span class="line">						<span class="string">&quot;BSSRemoved&quot;</span>,</span><br><span class="line">						object_path,</span><br><span class="line">						<span class="literal">NULL</span>,</span><br><span class="line">						G_DBUS_SIGNAL_FLAGS_NONE,</span><br><span class="line">						wpa_signal_bss_removed_cb,</span><br><span class="line">						<span class="literal">NULL</span>,</span><br><span class="line">						<span class="literal">NULL</span>);</span><br><span class="line">	<span class="comment">// 订阅 PropertiesChanged 信号</span></span><br><span class="line">	g_prop_changed = g_dbus_connection_signal_subscribe(</span><br><span class="line">						g_gdbus_con,</span><br><span class="line">						<span class="string">&quot;fi.w1.wpa_supplicant1&quot;</span>,</span><br><span class="line">						<span class="string">&quot;fi.w1.wpa_supplicant1.Interface&quot;</span>,</span><br><span class="line">						<span class="string">&quot;PropertiesChanged&quot;</span>,</span><br><span class="line">						object_path,</span><br><span class="line">						<span class="literal">NULL</span>,</span><br><span class="line">						G_DBUS_SIGNAL_FLAGS_NONE,</span><br><span class="line">						wpa_signal_properties_changed_cb,</span><br><span class="line">						<span class="literal">NULL</span>,</span><br><span class="line">						<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 扫描 */</span> </span><br><span class="line">	GVariantBuilder *builder = g_variant_builder_new(G_VARIANT_TYPE(<span class="string">&quot;a&#123;sv&#125;&quot;</span>));</span><br><span class="line">	g_variant_builder_add(builder, <span class="string">&quot;&#123;sv&#125;&quot;</span>, <span class="string">&quot;Type&quot;</span>, g_variant_new_string(<span class="string">&quot;active&quot;</span>));</span><br><span class="line">	GVariant *variant = g_variant_builder_end(builder);</span><br><span class="line">	g_variant_builder_unref(builder);</span><br><span class="line"></span><br><span class="line">	g_dbus_connection_call(g_gdbus_con,</span><br><span class="line">				<span class="string">&quot;fi.w1.wpa_supplicant1&quot;</span>,</span><br><span class="line">				object_path,</span><br><span class="line">				<span class="string">&quot;fi.w1.wpa_supplicant1.Interface&quot;</span>,</span><br><span class="line">				<span class="string">&quot;Scan&quot;</span>,</span><br><span class="line">				g_variant_new_tuple(&amp;variant, <span class="number">1</span>),</span><br><span class="line">				<span class="literal">NULL</span>,</span><br><span class="line">				G_DBUS_CALL_FLAGS_NONE,</span><br><span class="line">				<span class="number">-1</span>,</span><br><span class="line">				<span class="literal">NULL</span>,</span><br><span class="line">				<span class="literal">NULL</span>,</span><br><span class="line">				<span class="literal">NULL</span>);</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">fail:</span><br><span class="line">    g_main_loop_run(g_loop);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 释放gdbus连接</span></span><br><span class="line">	g_object_unref(g_gdbus_con);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;@@@@@@ App Stop @@@@@@&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><p><strong>难点1：</strong></p>
<p>这里实现过程的逻辑参考了<a href="https://android.googlesource.com/platform/external/wpa_supplicant_8/+/master/wpa_supplicant/examples/wpas-dbus-new.py">wpa_supplicant dbus api example using python</a> ，通过python编程实现。</p>
<p><strong>难点2：</strong></p>
<p>订阅各种信号的返回值类型以及如何对它进行解析也是一个问题。这需要参考官方文档：<a href="https://w1.fi/wpa_supplicant/devel/dbus.html">wpa_supplicant 官方dbus接口文档</a> ，为了方便查询，我把它转换成了表格形式，具体查看这篇文章 <code>&#123;% post_link wpa-supplicant application %&#125;</code></p>
<p>这里对各种信号原始数据进行记录：</p>
<p>主要涉及各种信号：ScanDone、BSSAdded、BssRemoved、PropertiesChanged</p>
<h3 id="ScanDone"><a href="#ScanDone" class="headerlink" title="ScanDone"></a>ScanDone</h3><p>data type: <code>(b)</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">(<span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>)</span><br></pre></td></tr></table></figure>

<h3 id="BSSAdded"><a href="#BSSAdded" class="headerlink" title="BSSAdded"></a>BSSAdded</h3><p>data type: <code>(oa&#123;sv&#125;)</code> </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line">    objectpath &#x27;/fi/w1/wpa_supplicant1/Interfaces/<span class="number">0</span>/BSSs/<span class="number">257</span>&#x27;<span class="punctuation">,</span> </span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        &#x27;SSID&#x27;<span class="punctuation">:</span> &lt;<span class="punctuation">[</span>byte <span class="number">0x43</span><span class="punctuation">,</span> <span class="number">0x6f</span><span class="punctuation">,</span> <span class="number">0x6f</span><span class="punctuation">,</span> <span class="number">0x6c</span><span class="punctuation">,</span> <span class="number">0x4b</span><span class="punctuation">,</span> <span class="number">0x69</span><span class="punctuation">,</span> <span class="number">0x74</span><span class="punctuation">,</span> <span class="number">0x5f</span><span class="punctuation">,</span> <span class="number">0x35</span><span class="punctuation">,</span> <span class="number">0x47</span><span class="punctuation">]</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">        &#x27;BSSID&#x27;<span class="punctuation">:</span> &lt;<span class="punctuation">[</span>byte <span class="number">0x60</span><span class="punctuation">,</span> <span class="number">0xdb</span><span class="punctuation">,</span> <span class="number">0x15</span><span class="punctuation">,</span> <span class="number">0xfa</span><span class="punctuation">,</span> <span class="number">0x8b</span><span class="punctuation">,</span> <span class="number">0x05</span><span class="punctuation">]</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">        &#x27;Privacy&#x27;<span class="punctuation">:</span> &lt;<span class="literal"><span class="keyword">true</span></span>&gt;<span class="punctuation">,</span> </span><br><span class="line">        &#x27;Mode&#x27;<span class="punctuation">:</span> &lt;&#x27;infrastructure&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">        &#x27;Signal&#x27;<span class="punctuation">:</span> &lt;int16 <span class="number">-70</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">        &#x27;Frequency&#x27;<span class="punctuation">:</span> &lt;uint16 <span class="number">5805</span>&gt;<span class="punctuation">,</span></span><br><span class="line">        &#x27;Rates&#x27;<span class="punctuation">:</span> &lt;<span class="punctuation">[</span>uint32 <span class="number">54000000</span><span class="punctuation">,</span> <span class="number">48000000</span><span class="punctuation">,</span> <span class="number">36000000</span><span class="punctuation">,</span> <span class="number">24000000</span><span class="punctuation">,</span> <span class="number">18000000</span><span class="punctuation">,</span> <span class="number">12000000</span><span class="punctuation">,</span> <span class="number">9000000</span><span class="punctuation">,</span> <span class="number">6000000</span><span class="punctuation">]</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">        &#x27;WPA&#x27;<span class="punctuation">:</span> &lt;<span class="punctuation">&#123;</span></span><br><span class="line">            &#x27;KeyMgmt&#x27;<span class="punctuation">:</span> &lt;<span class="punctuation">[</span>&#x27;wpa-psk&#x27;<span class="punctuation">]</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Group&#x27;<span class="punctuation">:</span> &lt;&#x27;tkip&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Pairwise&#x27;<span class="punctuation">:</span> &lt;<span class="punctuation">[</span>&#x27;tkip&#x27;<span class="punctuation">,</span> &#x27;ccmp&#x27;<span class="punctuation">]</span>&gt;</span><br><span class="line">         <span class="punctuation">&#125;</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">        &#x27;RSN&#x27;<span class="punctuation">:</span> &lt;<span class="punctuation">&#123;</span></span><br><span class="line">            &#x27;KeyMgmt&#x27;<span class="punctuation">:</span> &lt;<span class="punctuation">[</span>&#x27;wpa-psk&#x27;<span class="punctuation">]</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Group&#x27;<span class="punctuation">:</span> &lt;&#x27;tkip&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Pairwise&#x27;<span class="punctuation">:</span> &lt;<span class="punctuation">[</span>&#x27;tkip&#x27;<span class="punctuation">,</span> &#x27;ccmp&#x27;<span class="punctuation">]</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;MgmtGroup&#x27;<span class="punctuation">:</span> &lt;&#x27;aes128cmac&#x27;&gt;</span><br><span class="line">        <span class="punctuation">&#125;</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">        &#x27;WPS&#x27;<span class="punctuation">:</span> &lt;@a<span class="punctuation">&#123;</span>sv<span class="punctuation">&#125;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">        &#x27;IEs&#x27;<span class="punctuation">:</span> &lt;<span class="punctuation">[</span>byte <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x0a</span><span class="punctuation">,</span> <span class="number">0x43</span><span class="punctuation">,</span> <span class="number">0x6f</span><span class="punctuation">,</span> <span class="number">0x6f</span><span class="punctuation">,</span> <span class="number">0x6c</span><span class="punctuation">,</span> <span class="number">0x4b</span><span class="punctuation">,</span> <span class="number">0x69</span><span class="punctuation">,</span> <span class="number">0x74</span><span class="punctuation">,</span> <span class="number">0x5f</span><span class="punctuation">,</span> <span class="number">0x35</span><span class="punctuation">,</span> <span class="number">0x47</span><span class="punctuation">,</span> <span class="number">0x01</span><span class="punctuation">,</span> <span class="number">0x08</span><span class="punctuation">,</span> <span class="number">0x8c</span><span class="punctuation">,</span> <span class="number">0x12</span><span class="punctuation">,</span> <span class="number">0x98</span><span class="punctuation">,</span> <span class="number">0x24</span><span class="punctuation">,</span> <span class="number">0xb0</span><span class="punctuation">,</span> <span class="number">0x48</span><span class="punctuation">,</span> <span class="number">0x60</span><span class="punctuation">,</span> <span class="number">0x6c</span><span class="punctuation">,</span> <span class="number">0x03</span><span class="punctuation">,</span> <span class="number">0x01</span><span class="punctuation">,</span> <span class="number">0xa1</span><span class="punctuation">,</span> <span class="number">0xdd</span><span class="punctuation">,</span> <span class="number">0x1a</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x50</span><span class="punctuation">,</span> <span class="number">0xf2</span><span class="punctuation">,</span> <span class="number">0x01</span><span class="punctuation">,</span> <span class="number">0x01</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x50</span><span class="punctuation">,</span> <span class="number">0xf2</span><span class="punctuation">,</span> <span class="number">0x02</span><span class="punctuation">,</span> <span class="number">0x02</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x50</span><span class="punctuation">,</span> <span class="number">0xf2</span><span class="punctuation">,</span> <span class="number">0x02</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x50</span><span class="punctuation">,</span> <span class="number">0xf2</span><span class="punctuation">,</span> <span class="number">0x04</span><span class="punctuation">,</span> <span class="number">0x01</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x50</span><span class="punctuation">,</span> <span class="number">0xf2</span><span class="punctuation">,</span> <span class="number">0x02</span><span class="punctuation">,</span> <span class="number">0x30</span><span class="punctuation">,</span> <span class="number">0x18</span><span class="punctuation">,</span> <span class="number">0x01</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x0f</span><span class="punctuation">,</span> <span class="number">0xac</span><span class="punctuation">,</span> <span class="number">0x02</span><span class="punctuation">,</span> <span class="number">0x02</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x0f</span><span class="punctuation">,</span> <span class="number">0xac</span><span class="punctuation">,</span> <span class="number">0x02</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x0f</span><span class="punctuation">,</span> <span class="number">0xac</span><span class="punctuation">,</span> <span class="number">0x04</span><span class="punctuation">,</span> <span class="number">0x01</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x0f</span><span class="punctuation">,</span> <span class="number">0xac</span><span class="punctuation">,</span> <span class="number">0x02</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x2d</span><span class="punctuation">,</span> <span class="number">0x1a</span><span class="punctuation">,</span> <span class="number">0xef</span><span class="punctuation">,</span> <span class="number">0x09</span><span class="punctuation">,</span> <span class="number">0x17</span><span class="punctuation">,</span> <span class="number">0xff</span><span class="punctuation">,</span> <span class="number">0xff</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x01</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x18</span><span class="punctuation">,</span> <span class="number">0x04</span><span class="punctuation">,</span> <span class="number">0x87</span><span class="punctuation">,</span> <span class="number">0x09</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x3d</span><span class="punctuation">,</span> <span class="number">0x16</span><span class="punctuation">,</span> <span class="number">0xa1</span><span class="punctuation">,</span> <span class="number">0x07</span><span class="punctuation">,</span> <span class="number">0x06</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x7f</span><span class="punctuation">,</span> <span class="number">0x08</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x08</span><span class="punctuation">,</span> <span class="number">0x80</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x40</span><span class="punctuation">,</span> <span class="number">0x0b</span><span class="punctuation">,</span> <span class="number">0x05</span><span class="punctuation">,</span> <span class="number">0x0f</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0xca</span><span class="punctuation">,</span> <span class="number">0x12</span><span class="punctuation">,</span> <span class="number">0x7a</span><span class="punctuation">,</span> <span class="number">0xdd</span><span class="punctuation">,</span> <span class="number">0x18</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x50</span><span class="punctuation">,</span> <span class="number">0xf2</span><span class="punctuation">,</span> <span class="number">0x02</span><span class="punctuation">,</span> <span class="number">0x01</span><span class="punctuation">,</span> <span class="number">0x01</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x03</span><span class="punctuation">,</span> <span class="number">0xa4</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x27</span><span class="punctuation">,</span> <span class="number">0xa4</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x42</span><span class="punctuation">,</span> <span class="number">0x43</span><span class="punctuation">,</span> <span class="number">0x5e</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x62</span><span class="punctuation">,</span> <span class="number">0x32</span><span class="punctuation">,</span> <span class="number">0x2f</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x20</span><span class="punctuation">,</span> <span class="number">0x01</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x23</span><span class="punctuation">,</span> <span class="number">0x02</span><span class="punctuation">,</span> <span class="number">0x3f</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0xc3</span><span class="punctuation">,</span> <span class="number">0x04</span><span class="punctuation">,</span> <span class="number">0x02</span><span class="punctuation">,</span> <span class="number">0x2f</span><span class="punctuation">,</span> <span class="number">0x2f</span><span class="punctuation">,</span> <span class="number">0x2f</span><span class="punctuation">,</span> <span class="number">0x07</span><span class="punctuation">,</span> <span class="number">0x0a</span><span class="punctuation">,</span> <span class="number">0x43</span><span class="punctuation">,</span> <span class="number">0x4e</span><span class="punctuation">,</span> <span class="number">0x04</span><span class="punctuation">,</span> <span class="number">0x24</span><span class="punctuation">,</span> <span class="number">0x08</span><span class="punctuation">,</span> <span class="number">0x1e</span><span class="punctuation">,</span> <span class="number">0x95</span><span class="punctuation">,</span> <span class="number">0x05</span><span class="punctuation">,</span> <span class="number">0x1e</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0xbf</span><span class="punctuation">,</span> <span class="number">0x0c</span><span class="punctuation">,</span> <span class="number">0xb1</span><span class="punctuation">,</span> <span class="number">0x79</span><span class="punctuation">,</span> <span class="number">0xc9</span><span class="punctuation">,</span> <span class="number">0x33</span><span class="punctuation">,</span> <span class="number">0xfa</span><span class="punctuation">,</span> <span class="number">0xff</span><span class="punctuation">,</span> <span class="number">0x0c</span><span class="punctuation">,</span> <span class="number">0x03</span><span class="punctuation">,</span> <span class="number">0xfa</span><span class="punctuation">,</span> <span class="number">0xff</span><span class="punctuation">,</span> <span class="number">0x0c</span><span class="punctuation">,</span> <span class="number">0x03</span><span class="punctuation">,</span> <span class="number">0xc0</span><span class="punctuation">,</span> <span class="number">0x05</span><span class="punctuation">,</span> <span class="number">0x01</span><span class="punctuation">,</span> <span class="number">0x9b</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0xfc</span><span class="punctuation">,</span> <span class="number">0xff</span><span class="punctuation">,</span> <span class="number">0xff</span><span class="punctuation">,</span> <span class="number">0x1c</span><span class="punctuation">,</span> <span class="number">0x23</span><span class="punctuation">,</span> <span class="number">0x01</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x08</span><span class="punctuation">,</span> <span class="number">0x1a</span><span class="punctuation">,</span> <span class="number">0x44</span><span class="punctuation">,</span> <span class="number">0x10</span><span class="punctuation">,</span> <span class="number">0x04</span><span class="punctuation">,</span> <span class="number">0x20</span><span class="punctuation">,</span> <span class="number">0x0e</span><span class="punctuation">,</span> <span class="number">0x92</span><span class="punctuation">,</span> <span class="number">0x6f</span><span class="punctuation">,</span> <span class="number">0x09</span><span class="punctuation">,</span> <span class="number">0x8f</span><span class="punctuation">,</span> <span class="number">0x08</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0xfa</span><span class="punctuation">,</span> <span class="number">0xff</span><span class="punctuation">,</span> <span class="number">0xfa</span><span class="punctuation">,</span> <span class="number">0xff</span><span class="punctuation">,</span> <span class="number">0x39</span><span class="punctuation">,</span> <span class="number">0x1c</span><span class="punctuation">,</span> <span class="number">0xc7</span><span class="punctuation">,</span> <span class="number">0x71</span><span class="punctuation">,</span> <span class="number">0x1c</span><span class="punctuation">,</span> <span class="number">0x07</span><span class="punctuation">,</span> <span class="number">0xff</span><span class="punctuation">,</span> <span class="number">0x07</span><span class="punctuation">,</span> <span class="number">0x24</span><span class="punctuation">,</span> <span class="number">0xf4</span><span class="punctuation">,</span> <span class="number">0x3f</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x26</span><span class="punctuation">,</span> <span class="number">0xfc</span><span class="punctuation">,</span> <span class="number">0xff</span><span class="punctuation">,</span> <span class="number">0xff</span><span class="punctuation">,</span> <span class="number">0x02</span><span class="punctuation">,</span> <span class="number">0x27</span><span class="punctuation">,</span> <span class="number">0x03</span><span class="punctuation">,</span> <span class="number">0xff</span><span class="punctuation">,</span> <span class="number">0x0e</span><span class="punctuation">,</span> <span class="number">0x26</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0xff</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x20</span><span class="punctuation">,</span> <span class="number">0xff</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x40</span><span class="punctuation">,</span> <span class="number">0xff</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x60</span><span class="punctuation">,</span> <span class="number">0xff</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0xdd</span><span class="punctuation">,</span> <span class="number">0x07</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x0c</span><span class="punctuation">,</span> <span class="number">0x43</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0xdd</span><span class="punctuation">,</span> <span class="number">0x21</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x0c</span><span class="punctuation">,</span> <span class="number">0xe7</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0xbf</span><span class="punctuation">,</span> <span class="number">0x0c</span><span class="punctuation">,</span> <span class="number">0xb1</span><span class="punctuation">,</span> <span class="number">0x01</span><span class="punctuation">,</span> <span class="number">0xc0</span><span class="punctuation">,</span> <span class="number">0x33</span><span class="punctuation">,</span> <span class="number">0x2a</span><span class="punctuation">,</span> <span class="number">0xff</span><span class="punctuation">,</span> <span class="number">0x92</span><span class="punctuation">,</span> <span class="number">0x04</span><span class="punctuation">,</span> <span class="number">0x2a</span><span class="punctuation">,</span> <span class="number">0xff</span><span class="punctuation">,</span> <span class="number">0x92</span><span class="punctuation">,</span> <span class="number">0x04</span><span class="punctuation">,</span> <span class="number">0xc0</span><span class="punctuation">,</span> <span class="number">0x05</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x2a</span><span class="punctuation">,</span> <span class="number">0xff</span><span class="punctuation">,</span> <span class="number">0xc3</span><span class="punctuation">,</span> <span class="number">0x03</span><span class="punctuation">,</span> <span class="number">0x01</span><span class="punctuation">,</span> <span class="number">0x02</span><span class="punctuation">,</span> <span class="number">0x02</span><span class="punctuation">,</span> <span class="number">0xf0</span><span class="punctuation">,</span> <span class="number">0x02</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">,</span> <span class="number">0x00</span><span class="punctuation">]</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">        &#x27;Age&#x27;<span class="punctuation">:</span> &lt;uint32 <span class="number">0</span>&gt;</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="BSSRemoved"><a href="#BSSRemoved" class="headerlink" title="BSSRemoved"></a>BSSRemoved</h3><p>data type: <code>(o)</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">(objectpath &#x27;/fi/w1/wpa_supplicant1/Interfaces/<span class="number">0</span>/BSSs/<span class="number">519</span>&#x27;<span class="punctuation">,</span>)</span><br></pre></td></tr></table></figure>

<h3 id="PropertiesChanged"><a href="#PropertiesChanged" class="headerlink" title="PropertiesChanged"></a>PropertiesChanged</h3><p>data type: <code>(a&#123;sv&#125;)</code></p>
<p>数据1：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        &#x27;Scanning&#x27;<span class="punctuation">:</span> &lt;<span class="literal"><span class="keyword">false</span></span>&gt;<span class="punctuation">,</span> </span><br><span class="line">        &#x27;BSSs&#x27;<span class="punctuation">:</span> &lt;<span class="punctuation">[</span>objectpath </span><br><span class="line">            &#x27;/fi/w1/wpa_supplicant1/Interfaces/<span class="number">0</span>/BSSs/<span class="number">2</span>&#x27;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;/fi/w1/wpa_supplicant1/Interfaces/<span class="number">0</span>/BSSs/<span class="number">423</span>&#x27;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;/fi/w1/wpa_supplicant1/Interfaces/<span class="number">0</span>/BSSs/<span class="number">424</span>&#x27;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;/fi/w1/wpa_supplicant1/Interfaces/<span class="number">0</span>/BSSs/<span class="number">425</span>&#x27;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;/fi/w1/wpa_supplicant1/Interfaces/<span class="number">0</span>/BSSs/<span class="number">426</span>&#x27;<span class="punctuation">]</span>&gt;</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>数据2：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        &#x27;BSSs&#x27;<span class="punctuation">:</span> &lt;<span class="punctuation">[</span>objectpath </span><br><span class="line">            &#x27;/fi/w1/wpa_supplicant1/Interfaces/<span class="number">0</span>/BSSs/<span class="number">2</span>&#x27;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;/fi/w1/wpa_supplicant1/Interfaces/<span class="number">0</span>/BSSs/<span class="number">1363</span>&#x27;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;/fi/w1/wpa_supplicant1/Interfaces/<span class="number">0</span>/BSSs/<span class="number">1364</span>&#x27;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;/fi/w1/wpa_supplicant1/Interfaces/<span class="number">0</span>/BSSs/<span class="number">1365</span>&#x27;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;/fi/w1/wpa_supplicant1/Interfaces/<span class="number">0</span>/BSSs/<span class="number">1366</span>&#x27;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;/fi/w1/wpa_supplicant1/Interfaces/<span class="number">0</span>/BSSs/<span class="number">1367</span>&#x27;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;/fi/w1/wpa_supplicant1/Interfaces/<span class="number">0</span>/BSSs/<span class="number">1369</span>&#x27;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;/fi/w1/wpa_supplicant1/Interfaces/<span class="number">0</span>/BSSs/<span class="number">1372</span>&#x27;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;/fi/w1/wpa_supplicant1/Interfaces/<span class="number">0</span>/BSSs/<span class="number">1374</span>&#x27;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;/fi/w1/wpa_supplicant1/Interfaces/<span class="number">0</span>/BSSs/<span class="number">1375</span>&#x27;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;/fi/w1/wpa_supplicant1/Interfaces/<span class="number">0</span>/BSSs/<span class="number">1376</span>&#x27;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;/fi/w1/wpa_supplicant1/Interfaces/<span class="number">0</span>/BSSs/<span class="number">1377</span>&#x27;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;/fi/w1/wpa_supplicant1/Interfaces/<span class="number">0</span>/BSSs/<span class="number">1378</span>&#x27;<span class="punctuation">]</span>&gt;</span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Wi-Fi</category>
      </categories>
      <tags>
        <tag>Wi-Fi</tag>
        <tag>wpa_supplicant</tag>
      </tags>
  </entry>
  <entry>
    <title>Embedded Linux System Generate Tool: Buildroot</title>
    <url>/2024/10/29/2024/Embedded-Linux-System-Generate-Tool-Buildroot/</url>
    <content><![CDATA[<h2 id="Buildroot"><a href="#Buildroot" class="headerlink" title="Buildroot"></a>Buildroot</h2><blockquote>
<p>Buildroot是什么？</p>
<p>官方手册：Buildroot is a tool that simplifies and automates the process of building a complete Linux system for an embedded system, using cross-compilation</p>
</blockquote>
<p>Buildroot 是一个工具，它使用交叉编译来简化和自动化嵌入式Linux系统构建过程。为了达到上述目的，Buildroot 能够生成交叉编译工具链（a cross-compilation toolchain）、根文档系统（a root filesysystem）、Linux 内核映像（a Linux kernel image）和引导加载进程（a bootloader）。</p>
<p>Buildroot每3个月发布一次，2月、5月、8月、11月，发布号的格式为 YYYY.MM，例如 2013.02、2014.08。</p>
<p><a href="https://github.com/buildroot/buildroot">Buildroot的Github链接</a></p>
<p>Buildroot如何使用？</p>
<p>通过 <code>make menuconfig</code> 进入菜单，配置选项。全部配置完成后，配置工具将会生成一个<code>.config</code>文件，这个文件将被顶层Makefile读取。然后就可以进行构建：<code>make</code>，该命令一般会执行如下步骤：</p>
<ul>
<li>下载源文件</li>
<li>配置、构建、安装交叉编译链，或者简单地导入外部交叉编译链</li>
<li>配置、构建、安装已勾选的目标包</li>
<li>构建内核镜像（kernel image），如果已勾选</li>
<li>构建引导加载程序镜像（bootloader image），如果已勾选</li>
<li>创建选定格式的根文件系统（root filesystem）</li>
</ul>
<p>Buildroot输出保存在<code>output/.</code> 目录下，这个目录包含如下几个子目录：</p>
<ul>
<li><strong>images</strong>：存放所有的images（kernel image、bootloader、root filesystem image），这些都是需要放到目标系统上的文件。</li>
<li><strong>build</strong>：存放所有需要编译的应用，每个应用都以一个文件夹表示。</li>
<li><strong>host</strong>：包含为主机构建的工具（主要是主机上Buildroot需要的工具和交叉编译工具）和目标工具链的sysroot（主要是用户交叉编译的头文件和库文件）。</li>
<li><strong>staging</strong>：host目录内目标工具链sysroot的符号链接，其存在是为了向后兼容</li>
<li><strong>target</strong>：包含了目标几乎完整的根文件系统。最后导入目标主机的根文件系统就是这个</li>
</ul>
<p><code>make menuconfig</code> 中，可以输入<code>/</code> 进行目标搜索。当搜索到所有目标，可以通过按下<strong>目标的数字编号</strong>进行跳转。</p>
<p><code>buildroot/package</code> 目录下，可以为自己的应用创建文件夹，文件夹下至少有两个文件：<code>xxx.mk</code> 和 <code>Config.in</code> 。</p>
<ul>
<li><code>xxx.mk</code>：这是一个Makefile文件，包含了对应用package的下载、配置、编译和安装</li>
<li><code>Config.in</code>：这是一个配置工具描述文件的一部分，它描述了应用package的选项。</li>
</ul>
<p><a href="https://buildroot.org/downloads/manual/manual.html">Buildroot手册链接</a></p>
<h2 id="交叉编译工具链"><a href="#交叉编译工具链" class="headerlink" title="交叉编译工具链"></a>交叉编译工具链</h2><blockquote>
<p>交叉编译是什么？</p>
</blockquote>
<p>因为你的目标主机（arm架构）的cpu、ram、rom都是极其有限的，无法在目标主机编译应用程序。所以我们一般在源主机（x86架构）上为目标主机（arm架构）编译应用程序，如果我们选择系统默认的编译链工具，编译出来的可执行文件只能在x86架构主机运行。若想在目标主机（arm架构）上运行应用程序，需要在源主机（x86架构）上安装交叉编译工具链。</p>
<p><strong>编译工具链是什么？</strong></p>
<p>编译工具链是一组可用于编译系统代码的工具。它由<strong>编译器、汇编器和链接器</strong>等二进制实用程序以及 <strong>C 标准库</strong>组成。</p>
<p><strong>交叉编译工具链是什么？</strong></p>
<p>一个在主机系统上运行但为 <em>目标系统</em>（和目标处理器）生成代码的编译工具链。例如，如果您的主机系统使用 x86 而目标系统使用 ARM，则主机上的常规编译工具链在 x86 上运行并为 x86 生成代码，而交叉编译工具链在 x86 上运行并为 ARM 生成代码。</p>
<p><strong>Buildroot不提供编译工具链，需要用户自己安装。</strong></p>
<p>Buildroot为交叉编译工具链提供了两种解决方案：</p>
<ul>
<li>内部工具链后端，<code>Buildroot toolchain</code>在配置界面调用。</li>
<li>外部工具链后端，<code>External toolchain</code>在配置界面调用。</li>
</ul>
<h3 id="内部工具链后端"><a href="#内部工具链后端" class="headerlink" title="内部工具链后端"></a>内部工具链后端</h3><p><em>内部工具链后端</em>是Buildroot 在为目标嵌入式系统构建用户空间应用程序和库之前自行构建交叉编译工具链的后端。</p>
<h3 id="外部工具链后端"><a href="#外部工具链后端" class="headerlink" title="外部工具链后端"></a>外部工具链后端</h3><p><em>外部工具链后端</em>允许使用现有的预构建交叉编译工具链。Buildroot 了解许多著名的交叉编译工具链（来自 <a href="http://www.linaro.org/">Linaro</a> for ARM、 Sourcery CodeBench for ARM、x86-64、PowerPC 和 MIPS），并且能够自动下载它们，或者可以指向自定义工具链，可下载或本地安装。</p>
<p>有三种使用外部工具链的解决方案：</p>
<ul>
<li>使用预定义的外部工具链配置文件，让 Buildroot 下载、提取和安装工具链。</li>
<li>使用预定义的外部工具链配置文件，但不是让 Buildroot 下载并提取工具链，而是可以告诉 Buildroot 您的工具链已安装在系统上的位置。</li>
<li>使用完全自定义的外部工具链。</li>
</ul>
<h2 id="初始化系统"><a href="#初始化系统" class="headerlink" title="初始化系统"></a>初始化系统</h2><p><em>init</em>程序是内核启动的第一个用户空间程序（它的 PID 编号为 1），负责启动用户空间服务和程序（例如：Web 服务器、图形应用程序、其他网络服务器等）。</p>
<p>Buildroot 允许使用三种不同类型的 init 系统：</p>
<ul>
<li>第一个解决方案是<strong>BusyBox</strong>：在众多程序中，BusyBox 有一个基本<code>init</code>程序的实现，对于大多数嵌入式系统来说已经足够了。</li>
<li>第二种解决方案是<strong>systemV</strong>：此解决方案使用旧的传统<em>sysvinit</em>程序，该程序在 Buildroot 中打包 <code>package/sysvinit</code>。这是大多数桌面 Linux 发行版中使用的解决方案，直到他们转向 Upstart 或 Systemd 等较新的替代方案。</li>
<li>第三个解决方案是<strong>systemd</strong>：<code>systemd</code>它是新一代的 Linux 初始化系统。</li>
</ul>
<p>Buildroot 开发人员推荐的解决方案是使用 <strong>BusyBox init</strong>，因为它对于大多数嵌入式系统来说已经足够了。systemd可用于更复杂的情况。</p>
<h2 id="Kconfig"><a href="#Kconfig" class="headerlink" title="Kconfig"></a>Kconfig</h2><blockquote>
<p>Kconfig是什么？</p>
</blockquote>
<p>配置数据库是以树状结构组织的配置选项的集合。</p>
<p><em>注意：linux 在2.6版本以后将配置文件由原来的 Config.in 改为 Kconfig</em></p>
<p>Kconfig的功能？</p>
<p>Kconfig用来配置内核，它就是各种配置界面的源文件，内核的配置工具读取各个Kconfig文件，生成配置界面供开发人员配置内核，最后生成配置文件<code>.config</code>。通过配置界面进行勾选的项目将会以固定格式写入<code>.config</code> 文件。</p>
<p>执行命令：<code>make menuconfig</code> ，自动读取当前目录下的 <code>Config.in</code>，形成配置界面</p>
<p><strong>Kconfig 语法</strong></p>
<p>example：Config.in</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu &quot;Network device support&quot;</span><br><span class="line">config BR2_PACKAGE_NETDEVICES</span><br><span class="line">    bool &quot;Enable Net Devices&quot;</span><br><span class="line">    depends on NET</span><br><span class="line">    select BR2_PACKAGE_LIBDEVICES</span><br><span class="line">    default y</span><br><span class="line">    help</span><br><span class="line">        This is help desciption。</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">endmenu</span><br></pre></td></tr></table></figure>

<p><strong>Network device support</strong>：主菜单</p>
<p><strong>menu … endmenu</strong>：标签中间的成为子菜单，子菜单由关键字config定义。</p>
<p>其中config下面其他关键字是属性：bool、depends on、default、help，用于定义该菜单项的类型、依赖项、默认值、帮助信息等。</p>
<p>类型定义：</p>
<ul>
<li>bool：布尔类型。显示 <code>[]</code></li>
<li>tristate：三态（内建Y、模块M、移除N）。显示 <code>&lt;&gt;</code></li>
<li>string：字符串</li>
<li>hex：16进制。显示 <code>()</code></li>
<li>integer：整型</li>
</ul>
<p>目录嵌套：子目录下的Kconfig必须添加到父目录中的Kconfig中。在父目录中的Kconfig类似语句：<code>source &quot;package/app/Kconfig&quot;</code></p>
<p>用来包含（或嵌套）新的Kconfig文件，这样便可以使各个目录管理各自的配置内容，使不必把那些配置都写在同一个文件里，方便修改和管理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 条目</span><br><span class="line">config：生成可选项</span><br><span class="line">menu/endmenu：生成菜单</span><br><span class="line">choice/endchoice：将多个类似的配置选项组合在一起，供用户单选或多选。</span><br><span class="line">comment：在界面的第一行显示帮助信息</span><br><span class="line">if/endif:</span><br><span class="line">source：用于读取另外一个Kconfig文件，一般读取子目录的Kconfig文件</span><br></pre></td></tr></table></figure>

<h2 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h2><p>.mk是一种android编译环境下的一种特殊的“makefile”文件</p>
<ul>
<li>PKG_NAME：定义软件包的名称。通常与软件包源代码的目录名相同。</li>
<li>PKG_VERSION：定义软件包的版本号。</li>
<li>PKG_SOURCE：定义软件包源代码的下载链接或路径。可以是远程 URL 或本地路径。</li>
<li>PKG_SITE：定义软件包目录，它可以是一个url或者本地文件路径</li>
<li>PKG_HASH：定义软件包源代码的哈希值，用于验证下载文件的完整性。通常使用 MD5 或 SHA256 算法计算。</li>
<li>PKG_SITE_METHOD：定义拉取或者复制包源文件的方式</li>
<li>PKG_LICENSE：定义软件包的许可证类型。可以是单个许可证或多个许可证的组合。</li>
<li>PKG_BUILD_DIR：定义软件包构建过程中的临时目录。通常是 <code>$&#123;BUILD_DIR&#125;/$&#123;PKG_NAME&#125;-$&#123;PKG_VERSION&#125;</code>。</li>
<li>PKG_INSTALL_DIR：定义软件包安装到目标系统的目录。通常是 <code>$&#123;TARGET_DIR&#125;</code>。</li>
<li>PKG_CONFIG_DEPENDS：定义软件包构建过程中依赖的其他软件包。这些依赖将被自动解析和构建。</li>
<li>PKG_BUILD_CMDS结尾的变量会在 buildroot 框架编译的时候执行，用于给源码的 Makefile 传递编译选项和链接选项，调用源码的Makefile。</li>
<li>PKG_INSTALL_TARGET_CMDS结尾的变量是在编译完之后，自动安装执行，一般是让 buildroot 把编译出来的的 bin 或 lib 拷贝到指定目录。</li>
<li>$(eval $(autotools-package))：使用 Autotools 构建系统的软件包规则。适用于使用 configure 脚本的软件包。</li>
<li>$(eval $(cmake-package))：使用 CMake 构建系统的软件包规则。适用于使用 CMakeLists.txt 的软件包。</li>
<li>$(eval $(generic-package))：通用的软件包规则，适用于没有特定构建系统的软件包。需要手动定义构建和安装过程。</li>
<li>$(eval $(host-generic-package))：适用于主机（开发机）上构建的通用软件包规则。与目标系统无关。</li>
<li>$(eval $(python-package))：适用于 Python 软件包的规则。用于构建和安装 Python 模块。</li>
</ul>
<p><em>注意：PKG是你的应用名称</em></p>
<h2 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h2><ul>
<li>TOPDIR：<code>buildroot</code> 目录</li>
<li>TARGET_MAKE_ENV</li>
<li>TARGET_CC</li>
<li>TARGET_CXX</li>
</ul>
<h2 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h2><p>[1、Kconfig Language](<a href="https://www.kernel.org/doc/html/latest/kbuild/kconfig-language.html">Kconfig Language — The Linux Kernel documentation</a>)</p>
<p><a href="https://www.cnblogs.com/jiangzhaowei/p/7528099.html">2、Kconfig详解-文件的基本要素 - 江召伟 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>Buildroot</category>
      </categories>
      <tags>
        <tag>embedded linux</tag>
        <tag>Buildroot</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux C: Program Name and Program ID</title>
    <url>/2024/10/28/2024/Linux-C-Program-Name-and-Program-ID/</url>
    <content><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>在Linux上查询程序的pid，可以通过如下方式：</p>
<ul>
<li><p>ps命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pi@localhost:~/study$ ps -ef | grep bluealsa</span><br><span class="line">root        1017       1  0 19:01 ?        00:00:00 bluealsa --profile=a2dp-source</span><br><span class="line">pi          2852    2393 50 19:35 pts/0    00:00:00 grep --color=auto bluealsa</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>pidof命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pi@localhost:~/study$ pidof bluealsa</span><br><span class="line">1017</span><br></pre></td></tr></table></figure></li>
</ul>
<p>那么是否可以通过C代码封装成接口，方便直接在代码中调用呢？可以</p>
<p>首先，Linux所有进程状态信息都存储在这个目录下：<code>/proc</code> ，每一个数字文件夹代表一个进程。</p>
<p><img src="/2024/10/28/2024/Linux-C-Program-Name-and-Program-ID/image-20241028195503492.png" alt="image-20241028195503492"></p>
<p>进程文件夹下有status文件，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pi@localhost:~/study$ <span class="built_in">cat</span> /proc/1017/status </span><br><span class="line">Name:	bluealsa</span><br><span class="line">Umask:	0022</span><br><span class="line">State:	S (sleeping)</span><br><span class="line">Tgid:	1017</span><br><span class="line">Ngid:	0</span><br><span class="line">Pid:	1017</span><br><span class="line">PPid:	1</span><br><span class="line">TracerPid:	0</span><br><span class="line">Uid:	0	0	0	0</span><br><span class="line">Gid:	0	0	0	0</span><br><span class="line">FDSize:	128</span><br><span class="line">Groups:	 </span><br><span class="line">NStgid:	1017</span><br><span class="line">NSpid:	1017</span><br><span class="line">NSpgid:	1017</span><br><span class="line">NSsid:	1017</span><br><span class="line">Kthread:	0</span><br><span class="line">VmPeak:	  231224 kB</span><br><span class="line">VmSize:	  231224 kB</span><br><span class="line">VmLck:	       0 kB</span><br><span class="line">VmPin:	       0 kB</span><br><span class="line">VmHWM:	    5504 kB</span><br><span class="line">VmRSS:	    5504 kB</span><br><span class="line">RssAnon:	     384 kB</span><br><span class="line">RssFile:	    5120 kB</span><br><span class="line">RssShmem:	       0 kB</span><br><span class="line">VmData:	   25416 kB</span><br><span class="line">VmStk:	     132 kB</span><br><span class="line">VmExe:	     160 kB</span><br><span class="line">VmLib:	    7720 kB</span><br><span class="line">VmPTE:	      84 kB</span><br><span class="line">VmSwap:	       0 kB</span><br><span class="line">HugetlbPages:	       0 kB</span><br><span class="line">CoreDumping:	0</span><br><span class="line">THP_enabled:	1</span><br><span class="line">untag_mask:	0xffffffffffffff</span><br><span class="line">Threads:	4</span><br><span class="line">SigQ:	1/28918</span><br><span class="line">SigPnd:	0000000000000000</span><br><span class="line">ShdPnd:	0000000000000000</span><br><span class="line">SigBlk:	0000000000000000</span><br><span class="line">SigIgn:	0000000000001000</span><br><span class="line">SigCgt:	0000000100004002</span><br><span class="line">CapInh:	0000000000000000</span><br><span class="line">CapPrm:	000001ffffffffff</span><br><span class="line">CapEff:	000001ffffffffff</span><br><span class="line">CapBnd:	000001ffffffffff</span><br><span class="line">CapAmb:	0000000000000000</span><br><span class="line">NoNewPrivs:	0</span><br><span class="line">Seccomp:	0</span><br><span class="line">Seccomp_filters:	0</span><br><span class="line">Speculation_Store_Bypass:	vulnerable</span><br><span class="line">SpeculationIndirectBranch:	unknown</span><br><span class="line">Cpus_allowed:	f</span><br><span class="line">Cpus_allowed_list:	0-3</span><br><span class="line">Mems_allowed:	1</span><br><span class="line">Mems_allowed_list:	0</span><br><span class="line">voluntary_ctxt_switches:	26</span><br><span class="line">nonvoluntary_ctxt_switches:	8</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>通过 <code>/proc/&lt;pid_dir&gt;/status</code> 文件内的Name字段可以获取程序名，Pid字段可以获取程序ID。逐步遍历所有这样的目标文件，将输入的程序名和Name字段的值进行比较，最后就可以得出程序的pid。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* gcc pid_get.c -Wall -o pid_get */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">get_pid_by_name</span><span class="params">(<span class="type">char</span> *task_name)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid = <span class="number">0</span>;</span><br><span class="line">    DIR *dir = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">ptr</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span> filepath[<span class="number">512</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">char</span> cur_task_name[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == task_name)</span><br><span class="line">        <span class="keyword">return</span> pid;</span><br><span class="line">    dir = opendir(<span class="string">&quot;/proc&quot;</span>); </span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> != dir)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> ((ptr = readdir(dir)) != <span class="literal">NULL</span>) <span class="comment">//循环读取/proc下的每一个文件/文件夹</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果读取到的是&quot;.&quot;或者&quot;..&quot;则跳过，读取到的不是文件夹名字也跳过</span></span><br><span class="line">            <span class="keyword">if</span> ((<span class="built_in">strcmp</span>(ptr-&gt;d_name, <span class="string">&quot;.&quot;</span>) == <span class="number">0</span>) || (<span class="built_in">strcmp</span>(ptr-&gt;d_name, <span class="string">&quot;..&quot;</span>) == <span class="number">0</span>))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 如果目标不是目录，则跳过</span></span><br><span class="line">            <span class="keyword">if</span> (DT_DIR != ptr-&gt;d_type)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">sprintf</span>(filepath, <span class="string">&quot;/proc/%s/status&quot;</span>, ptr-&gt;d_name);<span class="comment">//生成要读取的文件的路径</span></span><br><span class="line">            fp = fopen(filepath, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">            <span class="comment">// 逐行读取，并进行比较</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">NULL</span> != fp)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">NULL</span> == fgets(buf, <span class="keyword">sizeof</span>(buf) - <span class="number">1</span>, fp))</span><br><span class="line">                &#123;</span><br><span class="line">                    fclose(fp);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">sscanf</span>(buf, <span class="string">&quot;%*s %s&quot;</span>, cur_task_name);</span><br><span class="line">                <span class="comment">//如果文件内容满足要求则打印路径的名字（即进程的PID）</span></span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(task_name, cur_task_name))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">sscanf</span>(ptr-&gt;d_name, <span class="string">&quot;%d&quot;</span>, &amp;pid);</span><br><span class="line">                    fclose(fp);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                fclose(fp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        closedir(dir);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> != argc)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;too small params\n&quot;</span></span><br><span class="line">               <span class="string">&quot;%s &lt;program_name&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> task_name[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">pid_t</span> pid = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sprintf</span>(task_name, <span class="string">&quot;%s&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">    pid = get_pid_by_name(task_name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Name: %s\n&quot;</span></span><br><span class="line">           <span class="string">&quot;Pid: %d\n&quot;</span>, task_name, pid);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译并运行程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pi@localhost:~/study$ gcc pid_get.c -Wall -o pid_get</span><br><span class="line">pi@localhost:~/study$ ./pid_get bluealsa</span><br><span class="line">Name: bluealsa</span><br><span class="line">Pid: 1017</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过ps命令、pidof命令查询出来的bluealsa进程的pid是1017，而通过上述程序得出的bluealsa的pid也是1017，所以一切正常。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux: Read-only file system</title>
    <url>/2024/10/25/2024/Linux-Read-only-file-system/</url>
    <content><![CDATA[<p>无论是通过touch创建文件，还是通过vi编辑文件都失败，出现报错提示：Read-only file system</p>
<p>可以通过lsblk命令查询可用块设备信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># touch aaa</span></span><br><span class="line"><span class="built_in">touch</span>: aaa: Read-only file system</span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">mosquitto.acl       mosquitto.conf      mosquitto.password</span><br><span class="line"><span class="comment"># lsblk </span></span><br><span class="line">NAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS</span><br><span class="line">mmcblk0     179:0    0 29.2G  0 disk </span><br><span class="line">|-mmcblk0p1 179:1    0  256M  0 part /bootloader</span><br><span class="line">|-mmcblk0p2 179:2    0  256M  0 part </span><br><span class="line">|-mmcblk0p3 179:3    0    1G  0 part /</span><br><span class="line">|-mmcblk0p4 179:4    0    1G  0 part </span><br><span class="line">|-mmcblk0p5 179:5    0  128M  0 part /var/lib/bluetooth</span><br><span class="line">|                                    /overlay</span><br><span class="line">`-mmcblk0p6 179:6    0 26.5G  0 part /data</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后通过blkid命令查询块设备详细信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># blkid </span></span><br><span class="line">/dev/mmcblk0p5: LABEL=<span class="string">&quot;overlay&quot;</span> UUID=<span class="string">&quot;539c8a51-988a-486c-a8b2-784fb3c01c68&quot;</span> BLOCK_SIZE=<span class="string">&quot;1024&quot;</span> TYPE=<span class="string">&quot;ext4&quot;</span> PARTLABEL=<span class="string">&quot;overlay&quot;</span> PARTUUID=<span class="string">&quot;87e24609-8c57-4272-bf30-a4d2f4ccf9a9&quot;</span></span><br><span class="line">/dev/mmcblk0p3: BLOCK_SIZE=<span class="string">&quot;131072&quot;</span> TYPE=<span class="string">&quot;squashfs&quot;</span> PARTLABEL=<span class="string">&quot;rootfs0&quot;</span> PARTUUID=<span class="string">&quot;a674b333-bab4-4478-b465-7e5d11caedc4&quot;</span></span><br><span class="line">/dev/mmcblk0p1: SEC_TYPE=<span class="string">&quot;msdos&quot;</span> LABEL_FATBOOT=<span class="string">&quot;bootloader&quot;</span> LABEL=<span class="string">&quot;bootloader&quot;</span> UUID=<span class="string">&quot;97B1-A458&quot;</span> BLOCK_SIZE=<span class="string">&quot;512&quot;</span> TYPE=<span class="string">&quot;vfat&quot;</span> PARTLABEL=<span class="string">&quot;boot0&quot;</span> PARTUUID=<span class="string">&quot;5d814d14-f6ed-435b-a41c-da4dd10befd8&quot;</span></span><br><span class="line">/dev/mmcblk0p6: LABEL=<span class="string">&quot;data&quot;</span> UUID=<span class="string">&quot;78f990db-9a78-4f44-95ea-9d04d36071d1&quot;</span> BLOCK_SIZE=<span class="string">&quot;1024&quot;</span> TYPE=<span class="string">&quot;ext4&quot;</span> PARTLABEL=<span class="string">&quot;data&quot;</span> PARTUUID=<span class="string">&quot;5e6f234c-fd9b-4a90-b75b-37fb26a39b27&quot;</span></span><br><span class="line">/dev/mmcblk0p4: BLOCK_SIZE=<span class="string">&quot;131072&quot;</span> TYPE=<span class="string">&quot;squashfs&quot;</span> PARTLABEL=<span class="string">&quot;rootfs1&quot;</span> PARTUUID=<span class="string">&quot;c538f7af-32d1-4ec0-9300-8df1da9fcabf&quot;</span></span><br><span class="line">/dev/mmcblk0p2: BLOCK_SIZE=<span class="string">&quot;131072&quot;</span> TYPE=<span class="string">&quot;squashfs&quot;</span> PARTLABEL=<span class="string">&quot;rescue&quot;</span> PARTUUID=<span class="string">&quot;3fe85d82-227d-454b-a3d6-bd589772098a&quot;</span></span><br></pre></td></tr></table></figure>

<p>对比两者，发现 <code>/</code> 目录对应的 mmcblk0p3 的类型是 squashfs（即只读）。</p>
<p><strong>一般解决方法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 / 目录重新挂载，且类型为可读写</span></span><br><span class="line">mount -o remount,rw /</span><br><span class="line"><span class="comment"># 重新加载，使上面配置生效</span></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Git: branch and tag</title>
    <url>/2024/10/24/2024/Git-branch-and-tag/</url>
    <content><![CDATA[<p>branch 和 tag 在Github的体现：</p>
<p><img src="/2024/10/24/2024/Git-branch-and-tag/image-20241024113806476.png" alt="image-20241024113806476"></p>
<p>标签（tag）代表特定分支在某一时刻的commit提交的记录，即通过tag可以快速定位到某一个commit提交的记录。Git 可以给仓库历史中的某一个提交（commit）打上标签，以示重要。 比较有代表性的是人们会使用这个功能来标记发布结点（ <code>v1.0</code> 、 <code>v2.0</code> 等等）。</p>
<p>分支（branch）代表一条单独的时间线，一个仓库可以有多个分支，即存在多条时间线，可以同时进行。初始化一个仓库时，第一次commit提交后，就会默认创建master分支（或main分支），之后可以针对不同的开发任务从master分支衍生（git checkout -b new_branch）新分支，当新分支任务完成后，切回master分支（git checkout master），然后可以将新分支合并（git merge new_branch）到master分支中。</p>
<p>参考来源：</p>
<p><a href="https://www.cnblogs.com/chentiao/p/17082654.html">1、git的分支个标签的大白话解释（branch and tag）</a></p>
<p><a href="https://blog.csdn.net/qq_39505245/article/details/124705850">2、Git基础 - git tag 一文真正的搞懂git标签的使用</a></p>
<p><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%AE%80%E4%BB%8B">3、Git 分支 - 分支简介</a></p>
<p><a href="https://git-scm.com/book/zh/v2/Git-%e5%9f%ba%e7%a1%80-%e6%89%93%e6%a0%87%e7%ad%be">4、Git 基础 - 打标签</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>version control</tag>
      </tags>
  </entry>
  <entry>
    <title>embedded linux application development</title>
    <url>/2024/10/19/2024/embedded-linux-application-development/</url>
    <content><![CDATA[<h2 id="Developing-applications-on-embeded-Linux"><a href="#Developing-applications-on-embeded-Linux" class="headerlink" title="Developing applications on embeded Linux"></a>Developing applications on embeded Linux</h2><ul>
<li>嵌入式 Linux 系统只是一个普通的 Linux 系统，通常组件选择较少</li>
<li>在应用程序开发方面，在嵌入式 Linux 上进行开发与在桌面 Linux 系统上进行开发完全相同</li>
<li>所有现有技能均可重复使用，无需进行任何特殊调整</li>
<li>所有现有的库（无论是第三方的还是内部的）都可以集成到嵌入式 Linux 系统中<ul>
<li>当然，考虑到嵌入式系统在性能、存储和内存方面的限制</li>
</ul>
</li>
<li>甚至在硬件可用之前，应用程序开发就可以在 x86 上开始</li>
</ul>
<h2 id="Leverage-existing-libraries-and-languages"><a href="#Leverage-existing-libraries-and-languages" class="headerlink" title="Leverage existing libraries and languages"></a>Leverage existing libraries and languages</h2><ul>
<li>许多刚开始使用嵌入式 Linux 的开发人员仅限于使用 C、有时是 C++ 和 C&#x2F;C++ 标准库</li>
<li>然而，有很多库和语言可以帮助你加速和简化你的应用程序开发<ul>
<li>Rust 和 Go 等编译语言越来越受欢迎</li>
<li>解释型语言，尤其是 Python</li>
<li>更高级别的库：Qt、Glib、Boost 等等</li>
</ul>
</li>
<li>确保评估什么是适合您项目的正确选择，但要注意如下事项：<ul>
<li>低端平台上的占用空间和性能</li>
<li>使用维护良好且知名的技术</li>
</ul>
</li>
</ul>
<h2 id="Building-your-applications-libraries"><a href="#Building-your-applications-libraries" class="headerlink" title="Building your applications&#x2F;libraries"></a>Building your applications&#x2F;libraries</h2><ul>
<li>即使对于简单的应用程序或库，也要使用构建系统<ul>
<li>CMake</li>
<li>Meson</li>
</ul>
</li>
<li>简化事项有如下：<ul>
<li>应用程序的构建过程</li>
<li>加入项目的开发人员的开发周期</li>
<li>将您的应用程序打包到嵌入式 Linux 构建系统中</li>
</ul>
</li>
</ul>
<p><strong>CMake</strong></p>
<p><strong>Meson</strong></p>
<h2 id="GDB-GNU-Project-Dubugger"><a href="#GDB-GNU-Project-Dubugger" class="headerlink" title="GDB: GNU Project Dubugger"></a>GDB: GNU Project Dubugger</h2><ul>
<li><p>GNU&#x2F;Linux 上的调试器，适用于大多数嵌入式架构。</p>
</li>
<li><p>支持的语言：C、C++、Pascal、Objective-C、Fortran、Ada…</p>
</li>
<li><p>命令行界面</p>
</li>
<li><p>许多图形集成开发环境都集成了gdb</p>
</li>
<li><p>也可用作：</p>
<ul>
<li>控制正在运行的程序的执行、设置断点或更改内部变量</li>
<li>查看程序崩溃时正在做什么：事后分析</li>
</ul>
</li>
<li><p>新的替代方案：LLVM 项目的 lldb</p>
</li>
</ul>
<p><strong>gdb</strong></p>
<h2 id="Remote-debugging"><a href="#Remote-debugging" class="headerlink" title="Remote debugging"></a>Remote debugging</h2><ul>
<li>在非嵌入式环境中，使用 gdb 或其前端之一进行调试。</li>
<li>gdb 可以直接访问使用调试符号编译的二进制文件和库</li>
<li>然而，在嵌入式环境中，目标平台环境通常太有限，无法使用 gdb 直接调试（x86 上为 2.4 MB）。</li>
<li>远程调试优势：<ul>
<li>ARCH-linux-gdb 用于开发工作站，提供其所有功能。</li>
<li>目标系统上使用 gdbserver（arm 上仅 400 KB）。</li>
</ul>
</li>
</ul>
<h2 id="Remote-debugging-architeture"><a href="#Remote-debugging-architeture" class="headerlink" title="Remote debugging: architeture"></a>Remote debugging: architeture</h2><p><img src="/2024/10/19/2024/embedded-linux-application-development/image-20241020183318748.png" alt="image-20241020183318748"></p>
<h2 id="Remote-debugging-target-setup"><a href="#Remote-debugging-target-setup" class="headerlink" title="Remote debugging: target setup"></a>Remote debugging: target setup</h2><ul>
<li><p>在目标上，通过 gdbserver 运行程序。</p>
<p>程序不会立即执行</p>
<p><code>gdbserver : &lt;port&gt; &lt;executable&gt; &lt;args&gt;</code></p>
<p><code>gdbserver /dev/ttyS0 &lt;executable&gt; &lt;args&gt;</code></p>
</li>
<li><p>否则，将 gdbserver 附加到已在运行的程序</p>
</li>
</ul>
<p>​	<code>gdbserver --attach :&lt;port&gt; &lt;pid&gt;</code></p>
<ul>
<li><p>您还可以启动 gdbserver，而无需传递任何要启动或附加的程序（并稍后在客户端设置目标程序）：</p>
<p><code>gdbserver --multi :&lt;port&gt;</code></p>
</li>
</ul>
<h2 id="Remote-debugging-host-setup"><a href="#Remote-debugging-host-setup" class="headerlink" title="Remote debugging: host setup"></a>Remote debugging: host setup</h2><ul>
<li>然后，在主机上启动 <code>ARCH-linux-gdb &lt;executable&gt;</code>，并使用下面的gdb命令<ul>
<li>告诉gdb共享库的位置：<code>gdb&gt; set sysroot &lt;library-path&gt;</code> ，（通常是没有 lib&#x2F; 的构建空间的路径）</li>
<li>连接目标，<code>gbd&gt; target remote &lt;ip-addr&gt;:&lt;port&gt;</code> ，<code>gdb&gt; target remote /dev/ttyUSB0</code> （如果存在多个远程目标，注意替换参数）</li>
<li>如果您没有在 gdbserver 命令行上将程序设置为调试，<code>gdb&gt; set remote exec-file &lt;path_to_program_on_target&gt;</code></li>
</ul>
</li>
</ul>
<h2 id="Coredumps-for-post-mortem-analysis"><a href="#Coredumps-for-post-mortem-analysis" class="headerlink" title="Coredumps for post mortem analysis"></a>Coredumps for post mortem analysis</h2><ul>
<li>当应用程序因分段错误而崩溃，且应用程序不在调试器的控制之下时，我们无法获得有关崩溃的信息</li>
<li>幸运的是，Linux 可以生成一个核心文件，其中包含崩溃时应用程序内存的 ELF 格式映像。gdb 可以使用这个核心文件让我们分析崩溃应用程序的状态</li>
<li>在目标上：<ul>
<li>在shell中执行：<code>ulimit -c unlimited</code> ，当程序崩溃发生时，创建core 文件</li>
<li>coredump文件的名字可以在该路径下修改：<code>/proc/sys/kernel/core_pattern</code></li>
<li>在使用systemd的系统上，core dump作为默认安全功能被取消，为了重新存储coredump缓存，运行：<code>echo core &gt; /proc/sys/kernel/core_pattern</code></li>
</ul>
</li>
<li>在主机上：<ul>
<li>程序崩溃发生后，将coredump文件从目标传输到主机上，然后运行：<code>ARCH-linux-gdb -c core-file application-binary</code></li>
</ul>
</li>
</ul>
<h2 id="minicoredumper"><a href="#minicoredumper" class="headerlink" title="minicoredumper"></a>minicoredumper</h2><ul>
<li>对于复杂的应用程序来说，core dump可能非常大</li>
<li>minicoredumper 是一个基于标准core dump功能的用户空间工具，基于通过管道将核心转储输出重定向到用户空间程序的可能性</li>
<li>基于JSON配置文件，它能做如下：<ul>
<li>仅保存相关部分（堆栈、堆、选定的 ELF 部分）</li>
<li>压缩输出文件</li>
<li>从 &#x2F;proc 保存附加信息</li>
</ul>
</li>
<li>“高效、实用的嵌入式系统碰撞数据采集“</li>
</ul>
]]></content>
      <categories>
        <category>bootlin</category>
      </categories>
      <tags>
        <tag>embeded linux</tag>
      </tags>
  </entry>
  <entry>
    <title>DBUS: data type or container type</title>
    <url>/2024/10/18/2024/DBUS-data-type-or-container-type/</url>
    <content><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>其实DBUS的数据类型在 <a href="/2024/08/16/2024/bluetoothctl-client-tool/" title="bluetoothctl client tool">bluetoothctl client tool</a>  中的dbus数据模型就有记录和说明过。通过基本类型数据进行嵌套可以组合成复杂数据类型，一般可以用简称表示，例如 <code>a&#123;sv&#125;</code> 。如何将数据进行构造和解析才是难点和重点。</p>
<h3 id="Numeric"><a href="#Numeric" class="headerlink" title="Numeric"></a>Numeric</h3><p>数字的数据类型涉及: <code>b</code>, <code>y</code>, <code>n</code>, <code>q</code>, <code>i</code>, <code>u</code>, <code>x</code>, <code>t</code>, <code>h</code>, <code>d</code></p>
<table>
<thead>
<tr>
<th align="left">Character</th>
<th align="left">Equivalent C type</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>b</code></td>
<td align="left"><code>gboolean</code></td>
</tr>
<tr>
<td align="left"><code>y</code></td>
<td align="left"><code>guchar</code></td>
</tr>
<tr>
<td align="left"><code>n</code></td>
<td align="left"><code>gint16</code></td>
</tr>
<tr>
<td align="left"><code>q</code></td>
<td align="left"><code>guint16</code></td>
</tr>
<tr>
<td align="left"><code>i</code></td>
<td align="left"><code>gint32</code></td>
</tr>
<tr>
<td align="left"><code>u</code></td>
<td align="left"><code>guint32</code></td>
</tr>
<tr>
<td align="left"><code>x</code></td>
<td align="left"><code>gint64</code></td>
</tr>
<tr>
<td align="left"><code>t</code></td>
<td align="left"><code>guint64</code></td>
</tr>
<tr>
<td align="left"><code>h</code></td>
<td align="left"><code>gint32</code> (handle)</td>
</tr>
<tr>
<td align="left"><code>d</code></td>
<td align="left"><code>gdouble</code></td>
</tr>
</tbody></table>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    gcc main.c -o main `pkg-config --libs --cflags dbus-1` `pkg-config --libs --cflags glib-2.0` `pkg-config --libs --cflags gio-2.0`</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gio/gio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glib/gprintf.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 构造</span></span><br><span class="line">    GVariant *value1, *value2, *value3, *value4;</span><br><span class="line">    value1 = g_variant_new (<span class="string">&quot;y&quot;</span>, <span class="number">200</span>);</span><br><span class="line">    value2 = g_variant_new (<span class="string">&quot;b&quot;</span>, TRUE);</span><br><span class="line">    value3 = g_variant_new (<span class="string">&quot;d&quot;</span>, <span class="number">37.5</span>);</span><br><span class="line">    value4 = g_variant_new (<span class="string">&quot;x&quot;</span>, G_GINT64_CONSTANT (<span class="number">998877665544332211</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析</span></span><br><span class="line">    guchar byte;</span><br><span class="line">    gdouble floating;</span><br><span class="line">    gboolean truth;</span><br><span class="line">    gint64 bignum;</span><br><span class="line">    g_variant_get (value1, <span class="string">&quot;y&quot;</span>, &amp;byte);      <span class="comment">/* ignore the value. */</span></span><br><span class="line">    g_variant_get (value2, <span class="string">&quot;b&quot;</span>, &amp;truth);</span><br><span class="line">    g_variant_get (value3, <span class="string">&quot;d&quot;</span>, &amp;floating);</span><br><span class="line">    g_variant_get (value4, <span class="string">&quot;x&quot;</span>, &amp;bignum);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印</span></span><br><span class="line">    g_printf(<span class="string">&quot;value1(y): %u\n&quot;</span>, byte);</span><br><span class="line">    g_printf(<span class="string">&quot;value2(b): %s\n&quot;</span>, truth ? <span class="string">&quot;ture&quot;</span>:<span class="string">&quot;false&quot;</span>);</span><br><span class="line">    g_printf(<span class="string">&quot;value3(d): %.1f\n&quot;</span>, floating);</span><br><span class="line">    g_printf(<span class="string">&quot;value4(x): %ld\n&quot;</span>, bignum);</span><br><span class="line">    </span><br><span class="line">    g_variant_unref(value1);</span><br><span class="line">    g_variant_unref(value2);</span><br><span class="line">    g_variant_unref(value3);</span><br><span class="line">    g_variant_unref(value4);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>字符串涉及：<code>s</code>, <code>o</code>, <code>g</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    gcc main.c -o main `pkg-config --libs --cflags dbus-1` `pkg-config --libs --cflags glib-2.0` `pkg-config --libs --cflags gio-2.0`</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gio/gio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glib/gprintf.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    GVariant *value1, *value2, *value3;</span><br><span class="line"></span><br><span class="line">    value1 = g_variant_new (<span class="string">&quot;s&quot;</span>, <span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    value2 = g_variant_new (<span class="string">&quot;o&quot;</span>, <span class="string">&quot;/must/be/a/valid/path&quot;</span>);</span><br><span class="line">    value3 = g_variant_new (<span class="string">&quot;g&quot;</span>, <span class="string">&quot;iias&quot;</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    gchar *str, *object_path, *signature;</span><br><span class="line"></span><br><span class="line">    g_variant_get (value1, <span class="string">&quot;s&quot;</span>, &amp;str);</span><br><span class="line">    g_variant_get (value2, <span class="string">&quot;o&quot;</span>, &amp;object_path);</span><br><span class="line">    g_variant_get (value3, <span class="string">&quot;g&quot;</span>, &amp;signature);</span><br><span class="line"></span><br><span class="line">    g_printf(<span class="string">&quot;value1(s): %s&#x27;\n&quot;</span>, str);</span><br><span class="line">    g_printf(<span class="string">&quot;value1(s): %s&#x27;\n&quot;</span>, object_path);</span><br><span class="line">    g_printf(<span class="string">&quot;value1(s): %s&#x27;\n&quot;</span>, signature);</span><br><span class="line">    g_free (str);</span><br><span class="line">    g_free (object_path);</span><br><span class="line">    g_free (signature);</span><br><span class="line">    </span><br><span class="line">    g_variant_unref(value1);</span><br><span class="line">    g_variant_unref(value2);</span><br><span class="line">    g_variant_unref(value3);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>注意：当g_variant_get() 遇到 ‘s’ ,’o’, ‘g’ 时，会创建一块新的内容，然后把要返回的字符串拷贝到这个内容中，这块内存返回给给一个指向<code>gchar *</code> 的指针，所以传入函数参数类型是 <code>gchar **</code> ，最后使用完后，需要用户使用g_free() 进行释放。</em> </p>
<h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>数组：<code>a</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    gcc main.c -o main `pkg-config --libs --cflags dbus-1` `pkg-config --libs --cflags glib-2.0` `pkg-config --libs --cflags gio-2.0`</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gio/gio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glib/gprintf.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 构造</span></span><br><span class="line">    GVariantBuilder *builder;</span><br><span class="line">    GVariant *value;</span><br><span class="line"></span><br><span class="line">    builder = g_variant_builder_new(G_VARIANT_TYPE(<span class="string">&quot;as&quot;</span>));</span><br><span class="line">    g_variant_builder_add(builder, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;when&quot;</span>);</span><br><span class="line">    g_variant_builder_add(builder, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;in&quot;</span>);</span><br><span class="line">    g_variant_builder_add(builder, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;the&quot;</span>);</span><br><span class="line">    g_variant_builder_add(builder, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;course&quot;</span>);</span><br><span class="line">    value = g_variant_new(<span class="string">&quot;as&quot;</span>, builder);</span><br><span class="line">    g_variant_builder_unref(builder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析</span></span><br><span class="line">    GVariantIter *iter;</span><br><span class="line">    gchar *str;</span><br><span class="line"></span><br><span class="line">    g_variant_get(value, <span class="string">&quot;as&quot;</span>, &amp;iter);</span><br><span class="line">    <span class="keyword">while</span> (g_variant_iter_loop(iter, <span class="string">&quot;s&quot;</span>, &amp;str))</span><br><span class="line">        g_print(<span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line">    g_variant_iter_free(iter);</span><br><span class="line"></span><br><span class="line">    g_variant_unref(value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h3><p>元组：<code>()</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    gcc main.c -o main `pkg-config --libs --cflags dbus-1` `pkg-config --libs --cflags glib-2.0` `pkg-config --libs --cflags gio-2.0`</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gio/gio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glib/gprintf.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    GVariant *value1, *value2;</span><br><span class="line"></span><br><span class="line">    value1 = g_variant_new(<span class="string">&quot;(s(ii))&quot;</span>, <span class="string">&quot;Hello&quot;</span>, <span class="number">55</span>, <span class="number">77</span>);</span><br><span class="line"></span><br><span class="line">    gchar *<span class="built_in">string</span>;</span><br><span class="line">    gint x, y;</span><br><span class="line"></span><br><span class="line">    g_variant_get(value1, <span class="string">&quot;(s(ii))&quot;</span>, &amp;<span class="built_in">string</span>, &amp;x, &amp;y);</span><br><span class="line">    g_printf(<span class="string">&quot;%s, %d, %d\n&quot;</span>, <span class="built_in">string</span>, x, y);</span><br><span class="line">    g_free(<span class="built_in">string</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h2><p>字典：<code>&#123;&#125;</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    gcc main.c -o main `pkg-config --libs --cflags dbus-1` `pkg-config --libs --cflags glib-2.0` `pkg-config --libs --cflags gio-2.0`</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gio/gio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glib/gprintf.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 构造</span></span><br><span class="line">    GVariantBuilder *b;</span><br><span class="line">    GVariant *dict;</span><br><span class="line"></span><br><span class="line">    b = g_variant_builder_new(G_VARIANT_TYPE(<span class="string">&quot;a&#123;sv&#125;&quot;</span>));</span><br><span class="line">    g_variant_builder_add(b, <span class="string">&quot;&#123;sv&#125;&quot;</span>, <span class="string">&quot;name&quot;</span>, g_variant_new_string(<span class="string">&quot;foo&quot;</span>));</span><br><span class="line">    g_variant_builder_add(b, <span class="string">&quot;&#123;sv&#125;&quot;</span>, <span class="string">&quot;timeout&quot;</span>, g_variant_new_int32(<span class="number">10</span>));</span><br><span class="line">    dict = g_variant_builder_end(b);</span><br><span class="line">    g_variant_builder_unref(b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析</span></span><br><span class="line">    GVariantIter iter;</span><br><span class="line">    GVariant *value;</span><br><span class="line">    gchar *key;</span><br><span class="line">    g_variant_iter_init(&amp;iter, dict);</span><br><span class="line">    <span class="keyword">while</span> (g_variant_iter_next (&amp;iter, <span class="string">&quot;&#123;sv&#125;&quot;</span>, &amp;key, &amp;value))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> gchar *type = g_variant_get_type_string(value);</span><br><span class="line">        <span class="keyword">switch</span> (*type)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">            g_printf(<span class="string">&quot;%s(%s): %s\n&quot;</span>, key, type, g_variant_get_string(value, <span class="literal">NULL</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">            g_printf(<span class="string">&quot;%s(%s): %d\n&quot;</span>, key, type, g_variant_get_int32(value));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// must free data for ourselves</span></span><br><span class="line">        g_variant_unref(value);</span><br><span class="line">        g_free(key);</span><br><span class="line">    &#125;</span><br><span class="line">    g_variant_unref(dict);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>注意：通过g_variant_iter_next() 获取的key和value，在while循环内部使用完后，需要用户进行释放。通过g_variant_iter_init() 获取的dict，在使用完后，也需要用户进行释放。但是有特殊的地方，若第二个参数是{&amp;sv}，那么对应的key就无需用户释放。</em></p>
<h3 id="Multiple"><a href="#Multiple" class="headerlink" title="Multiple"></a>Multiple</h3><p>复合类型，即不同类型的嵌套，例如：<code>(a&#123;sv&#125;)</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    gcc main.c -o main `pkg-config --libs --cflags dbus-1` `pkg-config --libs --cflags glib-2.0` `pkg-config --libs --cflags gio-2.0`</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gio/gio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glib/gprintf.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 构造</span></span><br><span class="line">    GVariantBuilder *b;</span><br><span class="line">    GVariant *dict, *tuple;</span><br><span class="line"></span><br><span class="line">    b = g_variant_builder_new(G_VARIANT_TYPE(<span class="string">&quot;a&#123;sv&#125;&quot;</span>));</span><br><span class="line">    g_variant_builder_add(b, <span class="string">&quot;&#123;sv&#125;&quot;</span>, <span class="string">&quot;name&quot;</span>, g_variant_new_string(<span class="string">&quot;foo&quot;</span>));</span><br><span class="line">    g_variant_builder_add(b, <span class="string">&quot;&#123;sv&#125;&quot;</span>, <span class="string">&quot;timeout&quot;</span>, g_variant_new_int32(<span class="number">10</span>));</span><br><span class="line">    dict = g_variant_builder_end(b);</span><br><span class="line">    g_variant_builder_unref(b);</span><br><span class="line">    tuple = g_variant_new_tuple(&amp;dict, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析</span></span><br><span class="line">    GVariantIter *iter;</span><br><span class="line">    GVariant *value;</span><br><span class="line">    gchar *key;</span><br><span class="line">    </span><br><span class="line">    g_variant_get(tuple, <span class="string">&quot;(a&#123;sv&#125;)&quot;</span>, &amp;iter);</span><br><span class="line">    <span class="keyword">while</span> (g_variant_iter_next (iter, <span class="string">&quot;&#123;sv&#125;&quot;</span>, &amp;key, &amp;value))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> gchar *type = g_variant_get_type_string(value);</span><br><span class="line">        <span class="keyword">switch</span> (*type)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">            g_printf(<span class="string">&quot;%s(%s): %s\n&quot;</span>, key, type, g_variant_get_string(value, <span class="literal">NULL</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">            g_printf(<span class="string">&quot;%s(%s): %d\n&quot;</span>, key, type, g_variant_get_int32(value));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// must free data for ourselves</span></span><br><span class="line">        g_variant_unref(value);</span><br><span class="line">        g_free(key);</span><br><span class="line">    &#125;</span><br><span class="line">    g_variant_unref(tuple);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="内存释放"><a href="#内存释放" class="headerlink" title="内存释放"></a>内存释放</h2><p><strong>g_variant_iter_free()</strong></p>
<p><a href="https://docs.gtk.org/glib/method.VariantIter.free.html">g_variant_iter_free()</a> 可以释放由这两个函数返回的变量的内存：<code>g_variant_iter_new()</code> or <code>g_variant_iter_copy()</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">g_variant_iter_free</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GVariantIter* iter</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>







<h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><p><a href="https://blog.linumiz.com/archives/16468">1、BlueZ Part 3: Understanding DBUS – Container type system – (2)</a></p>
<p><a href="https://blog.linumiz.com/archives/16427">2、BlueZ Part 2: Understanding DBUS – Basic type system – (1)</a></p>
<p><a href="https://docs.gtk.org/glib/gvariant-format-strings.html">3、GVariant 格式字符串</a></p>
<p><a href="https://eightplus.github.io/2019/08/27/2019-08-27-dbus-glib/">4、Dbus-glib</a></p>
<p><a href="https://www.cnblogs.com/cxt-janson/p/11428362.html">5、dbus介绍与例子</a></p>
]]></content>
      <categories>
        <category>IPC</category>
      </categories>
      <tags>
        <tag>IPC</tag>
        <tag>DBUS</tag>
      </tags>
  </entry>
  <entry>
    <title>callback and notify</title>
    <url>/2024/10/14/2024/callback-and-notify/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0">回调函数</a>是什么？</p>
</blockquote>
<p><strong>回调函数</strong>或简称<strong>回调</strong>（callback），是计算机编程中对某一段可执行代码的引用，它被作为参数传递给另一段代码；预期这段代码将回调（执行）这个回调函数作为自己工作的一部分。这种执行可以是即时的，如在同步回调之中；也可以在后来的时间点上发生，如在异步回调之中。</p>
<p>在C语言中通过函数指针实现回调函数，其中回调函数的典型例子就是信号处理 :</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> (*signal(<span class="type">int</span> sig, <span class="type">void</span> (*func)(<span class="type">int</span>)))(<span class="type">int</span>);</span><br></pre></td></tr></table></figure>

<p>示例1：基于回调函数的信号捕捉实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> g_main_loop = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">signal_handler</span><span class="params">(<span class="type">int</span> signum)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (signum)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> SIGINT: <span class="comment">// 接收到该信号后，退出程序</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;SIGINT: %d\n&quot;</span>, signum);</span><br><span class="line">        g_main_loop = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SIGUSR1:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;SIGUER1: %d\n&quot;</span>, signum);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SIGUSR2:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;SIGUER2: %d\n&quot;</span>, signum);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SIGTERM:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;SIGTERM: %d\n&quot;</span>, signum);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   signal(SIGINT, signal_handler);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span>(g_main_loop)</span><br><span class="line">   &#123;</span><br><span class="line">      sleep(<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例2：当A发布了任务给B，B执行任务，若任务有进度变化B立即告知A。当然A并不会一直顶着A的任务进度变化，A发布任务后，就去干其他活了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义回调函数类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*CallbackFunction)</span><span class="params">(<span class="type">int</span> new_value)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据处理器结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    CallbackFunction callback;</span><br><span class="line">&#125; DataHandler;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> g_main_loop = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据处理器改变x值的方法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">change_value</span><span class="params">(DataHandler *handler, <span class="type">int</span> new_value)</span> </span><br><span class="line">&#123;</span><br><span class="line">    handler-&gt;x = new_value;</span><br><span class="line">    <span class="comment">// 如果存在回调函数，则调用它</span></span><br><span class="line">    <span class="keyword">if</span> (handler-&gt;callback != <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        handler-&gt;callback(new_value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数定义</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">notify_callback</span><span class="params">(<span class="type">int</span> new_value)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Callback triggered: new value of x is %d\n&quot;</span>, new_value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程A的工作函数</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread_function</span><span class="params">(<span class="type">void</span> *arg)</span> </span><br><span class="line">&#123;</span><br><span class="line">    DataHandler *handler = (DataHandler *) arg;</span><br><span class="line">    <span class="type">int</span> value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        change_value(handler, value++);  <span class="comment">// 改变x的值并触发回调</span></span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据处理器的初始化函数</span></span><br><span class="line">DataHandler handler;</span><br><span class="line"><span class="type">int</span> <span class="title function_">data_handler_register</span><span class="params">(CallbackFunction cb)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span> tid;</span><br><span class="line">    handler.x = <span class="number">0</span>;</span><br><span class="line">    handler.callback = cb;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pthread_create(&amp;tid, <span class="literal">NULL</span>, thread_function, &amp;handler) != <span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to create thread.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_detach(tid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">signal_handler</span><span class="params">(<span class="type">int</span> signum)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (signum)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> SIGINT: <span class="comment">// 接收到该信号后，退出程序</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;SIGINT: %d\n&quot;</span>, signum);</span><br><span class="line">        g_main_loop = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SIGUSR1:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;SIGUER1: %d\n&quot;</span>, signum);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SIGUSR2:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;SIGUER2: %d\n&quot;</span>, signum);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SIGTERM:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;SIGTERM: %d\n&quot;</span>, signum);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    signal(SIGINT, signal_handler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化数据处理器并设置回调函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> != data_handler_register(notify_callback))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (g_main_loop)</span><br><span class="line">    &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;exit\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中main线程称之为A，设置和定义了回调函数notify_callback()，回调函数赋值给了handler的cb成员。在mian线程中创建了thread_function线程，称之为B，handler作为参数给到了B（即A发布了任务到B），B每隔2秒调用回调函数（即通知A任务进度变化）。</p>
<h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><p><a href="https://eightplus.github.io/2019/09/05/2019-09-05-callback/">1、回调函数</a></p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>bluetooth: proper terms and concepts</title>
    <url>/2024/10/11/2024/bluetooth-proper-terms-and-concepts/</url>
    <content><![CDATA[<p>来源：<a href="https://www.bluetooth.org/DocMan/handlers/DownloadDoc.ashx?doc_id=587177">Core Specification (amended) 5.4</a></p>
<table>
<thead>
<tr>
<th>专有名词</th>
<th>注解</th>
</tr>
</thead>
<tbody><tr>
<td>Active Peripheral Broadcast（主动外设广播）</td>
<td>用于通过 BR&#x2F;EDR 控制器将 L2CAP用户流量和某些类型的 LMP 流量传输到微微网（piconet）中的所有活动设备的逻辑传输。</td>
</tr>
<tr>
<td>Ad Hoc Network（自组织网络）</td>
<td>通常以自发方式创建的网络。临时网络不需要正式的基础设施并且时间和空间范围有限。</td>
</tr>
<tr>
<td><strong>Advertiser（广播者）</strong></td>
<td>在广播活动期间通过发布广播数据包的低功耗蓝牙设备</td>
</tr>
<tr>
<td><strong>Advertising event（广播事件）</strong></td>
<td>广播者在不同的广播物理信道上发送的一系列一到三个广播数据包。</td>
</tr>
<tr>
<td><strong>Advertising Packet（广播包）</strong></td>
<td>包含广播PDU的数据包</td>
</tr>
<tr>
<td>Angle of Arrival（到达角）</td>
<td>到达角是单个天线发射的射频波入射到天线阵列的相对方向</td>
</tr>
<tr>
<td>Angle of Departure（出发角）</td>
<td>出发角是使用天线阵列发射的射频波入射到另一根天线的相对方向</td>
</tr>
<tr>
<td>BD_ADDR</td>
<td>蓝牙设备的地址，被用来识别一个蓝牙设备</td>
</tr>
<tr>
<td><strong>Bluetooth（蓝牙）</strong></td>
<td>蓝牙是一种无线通信链路，使用跳频收发器在 2.4 GHz 的未授权 ISM 频段运行。它允许蓝牙主机之间进行实时 AV 和数据通信。链路协议基于时隙。</td>
</tr>
<tr>
<td><strong>Bluetooth Baseband（蓝牙基带）</strong></td>
<td>蓝牙系统的一部分，指定或实现介质访问和物理层程序，以支持蓝牙设备之间实时语音、数据信息流和临时网络的交换</td>
</tr>
<tr>
<td><strong>Bluetooth Clock（蓝牙时钟）</strong></td>
<td>BR&#x2F;EDR 控制器子系统内部的 28 位时钟，每 312.5 µs 滴答一次。此时钟的值定义了各个物理通道中的时隙编号和时序。</td>
</tr>
<tr>
<td>Bluetooth Controller（蓝牙控制器）</td>
<td>指控制器的通用术语</td>
</tr>
<tr>
<td>Bluetooth Device（蓝牙设备）</td>
<td>能够使用蓝牙系统进行短距离无线通信的设备。</td>
</tr>
<tr>
<td><strong>Bluetooth Device Address（蓝牙设备地址）</strong></td>
<td>用于识别每个蓝牙设备的 48 位地址</td>
</tr>
<tr>
<td><strong>BR&#x2F;EDR</strong></td>
<td>蓝牙基本速率 (BR) 和增强数据速率(EDR)。</td>
</tr>
<tr>
<td><strong>BR&#x2F;EDR Controller（BR&#x2F;EDR控制器）</strong></td>
<td>指蓝牙无线电、基带、链路管理器和 HCI 层的术语。</td>
</tr>
<tr>
<td>BR&#x2F;EDR Piconet Physical Channel（BR&#x2F;EDR 微微网物理通道）</td>
<td>信道被划分为多个时隙，每个时隙与一个 RF 跳频相关。连续的跳频通常对应于不同的 RF 跳频，标准跳频速率为每秒 1600 次。这些连续的跳频遵循伪随机跳频序列，通过 79 个 RF 信道集进行跳频，或者在使用自适应跳频 (AFH) 时，可选择通过更少的信道进行跳频。</td>
</tr>
<tr>
<td>BR&#x2F;EDR&#x2F;LE</td>
<td>蓝牙基本速率 (BR) ，增强数据速率(EDR)，低功耗。</td>
</tr>
<tr>
<td>C-plane</td>
<td>控制平面</td>
</tr>
<tr>
<td>Channel（通道）</td>
<td>物理通道或 L2CAP 通道，具体取决于上下文。</td>
</tr>
<tr>
<td>Connect（连接）</td>
<td>建立与服务的连接。如果尚未完成，这还包括建立物理链路、逻辑传输、逻辑链路和 L2CAP 通道。</td>
</tr>
<tr>
<td>Connectable device</td>
<td>范围内的 BR&#x2F;EDR 设备会定期侦听其寻呼扫描物理通道，并响应该通道上的寻呼。使用可连接广播事件进行广播的 LE 设备。</td>
</tr>
<tr>
<td>Connected devices</td>
<td>两个 BR&#x2F;EDR 设备，并且它们之间有物理链路</td>
</tr>
<tr>
<td>Connecting</td>
<td>设备之间通信的一个阶段，即建立设备之间的连接。（链接建立阶段完成后，进入连接阶段。）</td>
</tr>
<tr>
<td>Connection</td>
<td>映射到 L2CAP 通道上的两个对等应用程序或更高层协议之间的连接。</td>
</tr>
<tr>
<td>Connection establishment</td>
<td>创建映射到通道的连接的过程。</td>
</tr>
<tr>
<td>Connection event</td>
<td>在同一物理通道上，中央设备和外围设备之间发送的一系列一对或多对交错数据包。</td>
</tr>
<tr>
<td>Connectionless Peripheral Broadcast</td>
<td>允许中央设备向无限数量的外围设备广播信息的功能</td>
</tr>
<tr>
<td>Connectionless Peripheral Broadcast Receiver</td>
<td>从无连接外围广播发射器接收广播信息的蓝牙设备。该设备是微微网的外围设备。</td>
</tr>
<tr>
<td>Connectionless Peripheral Broadcast Transmitter</td>
<td>发送无连接外设广播消息以供一个或多个无连接外设广播接收器接收的蓝牙设备。该设备是微微网的中心。</td>
</tr>
<tr>
<td><strong>Controller</strong></td>
<td>指 HCI 以下所有层的统称。</td>
</tr>
<tr>
<td>Coverage area（覆盖范围）</td>
<td>两个蓝牙设备可以以可接受的质量和性能交换信息的区域</td>
</tr>
<tr>
<td>Creation of a secure connection</td>
<td>建立连接的过程，包括身份验证和加密</td>
</tr>
<tr>
<td>Creation of a trusted relationship</td>
<td>将远程设备标记为受信任设备的过程。这包括存储通用链接密钥，以便在链接密钥不可用时进行将来的身份验证或配对。</td>
</tr>
<tr>
<td><strong>Device discovery</strong></td>
<td>从可发现的设备中检索蓝牙设备地址、时钟和设备类别的过程</td>
</tr>
<tr>
<td>Discoverable device</td>
<td>范围内的 BR&#x2F;EDR 设备会定期侦听查询扫描物理通道，并响应该通道上的查询。范围内的 LE 设备正在通过可连接或可扫描的广告事件进行广告，并在广告数据中设置了可发现标志。此设备处于可发现模式</td>
</tr>
<tr>
<td><strong>Discoverable Mode</strong></td>
<td>在 BR&#x2F;EDR 中执行查询扫描或在 LE 中设置可发现标志并利用可发现或可连接广告事件进行广告的蓝牙设备</td>
</tr>
<tr>
<td>Discovery procedure</td>
<td>正在 BR&#x2F;EDR 中执行查询程序或使用可发现或可连接广告事件（在 LE 中设置了可发现标志）扫描广告商的蓝牙设备。</td>
</tr>
<tr>
<td><strong>HCI</strong></td>
<td>主机控制器接口 (HCI) 为基带控制器和链路管理器提供命令接口，并可访问硬件状态和控制寄存器。此接口提供访问蓝牙基带功能的<strong>统一方法</strong>。</td>
</tr>
<tr>
<td><strong>Host</strong></td>
<td>逻辑实体，定义为非核心配置文件以下和主机控制器接口 (HCI) 以上的所有层；即第 3 卷中指定的层。连接到蓝牙控制器的蓝牙主机也可以与连接到其控制器的其他蓝牙主机进行通信</td>
</tr>
<tr>
<td>Initiator（发起者）</td>
<td>一种低功耗蓝牙设备，用于监听广告物理信道上的可连接广告事件以建立连接</td>
</tr>
<tr>
<td><strong>Inquiring device</strong></td>
<td>正在执行查询过程的 BR&#x2F;EDR 设备。此设备正在执行发现过程。</td>
</tr>
<tr>
<td><strong>Inquiry（查询）</strong></td>
<td>蓝牙设备发送查询消息并监听响应以发现覆盖范围内的其他蓝牙设备的过程</td>
</tr>
<tr>
<td><strong>Inquiry scan</strong></td>
<td>蓝牙设备侦听在其查询扫描物理信道上收到的查询消息的过程。</td>
</tr>
<tr>
<td>Interoperability（互操作性）</td>
<td>两个或多个设备交换信息并使用已交换信息的能力</td>
</tr>
<tr>
<td>Isochronous data（等时数据）</td>
<td>流中的信息，其中流中的每个信息实体都与前一个和后续实体存在时间关系</td>
</tr>
<tr>
<td>Known device</td>
<td>至少存储了 BD_ADDR 的蓝牙设备</td>
</tr>
<tr>
<td><strong>L2CAP</strong></td>
<td>逻辑链路控制和适配协议</td>
</tr>
<tr>
<td>L2CAP Channel</td>
<td>使用单个应用程序或更高层协议的两个设备之间的L2CAP级别的逻辑连接。</td>
</tr>
<tr>
<td>L2CAP Channel establishment</td>
<td>在 L2CAP 层建立逻辑连接的过程。</td>
</tr>
<tr>
<td><strong>LE</strong></td>
<td>蓝牙低功耗</td>
</tr>
<tr>
<td>Link</td>
<td>逻辑链接的简写。</td>
</tr>
<tr>
<td>Link establishment</td>
<td>建立设备间默认 ACL 链接和链接及通道层次结构的程序</td>
</tr>
<tr>
<td>Link key</td>
<td>两个设备都知道的密钥，用于验证链接。</td>
</tr>
<tr>
<td>LMP authentication</td>
<td>用于验证远程设备身份的 LMP 级别程序。</td>
</tr>
<tr>
<td>LMP pairing</td>
<td>对两个设备进行身份验证并创建通用链接密钥的过程，该密钥可用作信任关系或（单一）安全连接的基础</td>
</tr>
<tr>
<td>Logical link</td>
<td>用于向蓝牙系统客户端提供独立数据传输服务的最低架构层</td>
</tr>
<tr>
<td>Logical transport</td>
<td>不同逻辑链路之间共享确认协议和链路标识符</td>
</tr>
<tr>
<td>Name discovery</td>
<td>检索可连接设备的用户友好名称（蓝牙设备名称）的过程。</td>
</tr>
<tr>
<td>Packet</td>
<td>在物理通道上传输的聚合位的格式。</td>
</tr>
<tr>
<td><strong>Page</strong></td>
<td>连接过程的初始阶段，设备传输一系列寻呼消息，直到收到目标设备的响应或发生超时。</td>
</tr>
<tr>
<td><strong>Page scan</strong></td>
<td>设备侦听在其寻呼扫描物理信道上收到的寻呼消息的过程。</td>
</tr>
<tr>
<td>Paging device</td>
<td>正在执行寻呼过程的蓝牙设备。</td>
</tr>
<tr>
<td>Paired device</td>
<td>已创建链接密钥的蓝牙设备（在请求建立连接之前或在连接阶段）。</td>
</tr>
<tr>
<td>Passkey</td>
<td>使用安全简单配对时用于验证连接的 6 位数字。</td>
</tr>
<tr>
<td>Periodic advertising synchronization information（定期广播同时信息）</td>
<td>描述定期广告的控制信息，低功耗蓝牙设备使用该控制信息同步其描述的广告</td>
</tr>
<tr>
<td>Physical Channel（物理通道）</td>
<td>其特点是一个或多个设备同步占用一系列射频载波。存在许多物理信道类型，其特征针对不同的用途进行了定义</td>
</tr>
<tr>
<td>Physical link（物理链路）</td>
<td>两个设备之间的基带或链路层连接。</td>
</tr>
<tr>
<td>Physical Transport（物理传输）</td>
<td>使用一种或多种调制方案在 RF 信道上进行 PHY 数据包传输和&#x2F;或接收。</td>
</tr>
<tr>
<td><strong>Piconet（微微网）</strong></td>
<td>一组设备（BR&#x2F;EDR 中最多 8 个设备，LE 中恰好 2 个设备）占用一个共享物理通道，其中一个设备是 Piconet Central，其余设备都与其相连。</td>
</tr>
<tr>
<td>Piconet Central</td>
<td>微微网中的 BR&#x2F;EDR 设备，其蓝牙时钟和蓝牙设备地址用于定义微微网物理信道特性。微微网中的 LE 设备启动微微网的创建，选择标识微微网的访问地址，并在每个连接事件中首先进行传输。</td>
</tr>
<tr>
<td>PIN</td>
<td>这是一个用户友好的号码，可用于在配对之前验证与设备的连接。</td>
</tr>
<tr>
<td>Profile Broadcast Data</td>
<td>将数据从无连接外围广播发送器传输到一个或多个无连接外围广播接收器的逻辑链路。</td>
</tr>
<tr>
<td>Resolving List</td>
<td>用于生成和解析可解析私有地址的记录列表。每条记录包含一个本地身份解析密钥、一个对等身份解析密钥和一个对等身份地址。</td>
</tr>
<tr>
<td><strong>Scanner</strong></td>
<td>监听广告物理信道上的广告事件的低功耗蓝牙设备。</td>
</tr>
<tr>
<td>Scatternet</td>
<td>两个或多个微微网，其中有一个或多个共同的设备</td>
</tr>
<tr>
<td>Service discovery</td>
<td>查询和浏览由其他蓝牙设备提供或通过其他蓝牙设备提供的服务的程序</td>
</tr>
<tr>
<td>Service Layer Protocol</td>
<td>使用 L2CAP 通道传输 PDU 的协议。</td>
</tr>
<tr>
<td>Silent device</td>
<td>如果蓝牙设备不响应远程设备的询问，则对于远程设备而言，它就是静默的。</td>
</tr>
<tr>
<td>Synchronization Scan Physical Channel（同步扫描物理通道）</td>
<td>使外围设备能够从中央设备接收同步系列数据包的物理通道</td>
</tr>
<tr>
<td>Synchronization Train</td>
<td>在一组固定频率上传输的一系列数据包，它们为接收设备提供足够的信息，使接收设备开始接收相应的无连接外围广播数据包，或在丢失粗略时钟调整后恢复当前微微网时钟。</td>
</tr>
<tr>
<td>Tick</td>
<td>（BR&#x2F;EDR）蓝牙时钟值变化之间的时间：312.5 µs。</td>
</tr>
<tr>
<td>U-plane</td>
<td>用户平面</td>
</tr>
<tr>
<td>Unknown device</td>
<td>未存储任何信息（蓝牙设备地址、链接密钥或其他）的蓝牙设备</td>
</tr>
</tbody></table>
<p><em>注意：表格中的广告和广播是同一个意思 Advertising</em></p>
<h2 id="BR-EDR"><a href="#BR-EDR" class="headerlink" title="BR&#x2F;EDR"></a>BR&#x2F;EDR</h2><blockquote>
<p>BR&#x2F;EDR是什么？</p>
</blockquote>
<p>基本速率&#x2F;增强数据速率 (The Basic Rate &#x2F; Enhanced Data Rate，BR&#x2F;EDR) 无线电（物理层或 PHY）在 2.4 GHz 的未授权 ISM 频段运行。</p>
<p>物理无线电信道由一组与公共时钟和跳频模式同步的设备共享。一个设备提供同步参考，称为中央设备。与中央设备的时钟和跳频模式同步的所有其他设备称为外围设备。以这种方式同步的一组设备形成微微网。这是蓝牙 BR&#x2F;EDR 无线技术中的基本通信形式。微微网中的设备使用特定的跳频模式，该模式由中央设备的蓝牙地址和时钟中的某些字段通过算法确定。基本跳频模式是 ISM 频段中 79 个频率的伪随机排序，间隔 1 MHz。</p>
<p>物理通道上方是链路和通道以及相关控制协议的分层。从物理通道向上的通道和链路层次是物理通道、物理链路、逻辑传输、逻辑链路和 L2CAP 通道。</p>
<h2 id="LE"><a href="#LE" class="headerlink" title="LE"></a>LE</h2><blockquote>
<p>LE是什么？</p>
</blockquote>
<p>与 BR&#x2F;EDR 无线电一样，LE 无线电在未经许可的 2.4 GHz ISM 频段运行。</p>
<p>LE 采用两种多址方案：频分多址 (FDMA) 和时分多址 (TDMA)。FDMA 方案中使用 40 个 个物理信道，间隔 2 MHz。其中3 个用作主要广告信道，37 个用作通用信道（包括辅助广告信道）。使用基于 TDMA 的轮询方案，其中一个设备在预定时间传输数据包，而相应的设备在预定间隔后用数据包响应。</p>
<p>在广告 PHY 通道上传输广播数据包的设备称为广播者。在广告物理通道上接收广播数据包而无意连接到广播设备的设备称为扫描者。</p>
<h2 id="Device-Mode"><a href="#Device-Mode" class="headerlink" title="Device Mode"></a>Device Mode</h2><p>在蓝牙技术中，单模和双模是代表设备支持核心能力。</p>
<p>若设备仅支持BR&#x2F;EDR 或 LE 中的一种能力，称之为单模蓝牙设备。若同时支持以上两种能力，称之为双模设备。</p>
<h2 id="Role"><a href="#Role" class="headerlink" title="Role"></a>Role</h2><p>Central</p>
<p>Peripheral</p>
]]></content>
      <categories>
        <category>bluetooth</category>
      </categories>
      <tags>
        <tag>Core Specification v5.4 with Amendment Notices</tag>
      </tags>
  </entry>
  <entry>
    <title>overview of major emabedded linux software stacks</title>
    <url>/2024/10/08/2024/overview-of-major-emabedded-linux-software-stacks/</url>
    <content><![CDATA[<p><a href="https://bootlin.com/doc/training/embedded-linux/embedded-linux-slides.pdf">overview of major emabedded linux software stacks</a></p>
<h2 id="D-Bus"><a href="#D-Bus" class="headerlink" title="D-Bus"></a>D-Bus</h2><blockquote>
<p><a href="https://www.freedesktop.org/wiki/Software/dbus/">D-Bus</a>是什么？</p>
</blockquote>
<p>D-Bus是一种应用程序之间进行通信的消息总线进程间通信（interprocess communication，即IPC）系统。</p>
<p>D-Bus架构图：</p>
<p><img src="/2024/10/08/2024/overview-of-major-emabedded-linux-software-stacks/diagram.svg" alt="diagram"></p>
<ul>
<li>面向消息的中间件机制，允许在同一台机器上同时运行的多个进程之间进行通信</li>
<li>依靠守护进程在应用程序之间传递消息</li>
<li>主要由系统守护进程使用，为客户端应用程序提供服务</li>
<li>示例：以 root 身份运行的网络配置守护程序提供 D-Bus API，CLI 和 GUI 客户端可以使用它来<br>配置网络</li>
<li>多条总线<ul>
<li>一条系统总线，所有用户均可以访问，用于系统服务</li>
<li>一条会话总线，供每个登录用户使用</li>
</ul>
</li>
<li>对象模型：interface、object、method、signal</li>
</ul>
<p>一个很典型的蓝牙应用：BlueZ，就是基于D-Bus实现多个客户端与bluetoothd通信。</p>
<p>以BlueZ项目，对D-Bus的一些概念进行简单的说明：</p>
<p>BlueZ项目提供关键的两个应用是：bluetoothd 和 bluetoothctl。</p>
<p>bluetoothd应用连接dbus-daemon，在dbus上注册bus name为 <code>org.bluez</code> 的服务， 紧接着注册object path name 为 <code>/org/bluez/hci0</code> 的对象路径，并在该对象路径下注册interface name 为 <code>org.bluez.Adapter1</code> 的接口，该接口下绑定了方法和属性。</p>
<p>bluetoothctl应用连接dbus-daemon，接着就可以向 <code>org.bluez</code> 下 <code>/org/bluez/hci0</code> 下 <code>org.bluez.Adapter1</code> 下的 <code>StartDiscovery</code> 方法发送请求。</p>
<p><img src="/2024/10/08/2024/overview-of-major-emabedded-linux-software-stacks/image-20241009193405276.png" alt="image-20241009193405276"></p>
<p><a href="https://dbus.freedesktop.org/doc/api/html/group__DBusMessage.html#ga98ddc82450d818138ef326a284201ee0">D-Bus API接口</a></p>
<h2 id="systemd"><a href="#systemd" class="headerlink" title="systemd"></a>systemd</h2><blockquote>
<p><a href="https://systemd.io/">systemd</a>是什么？</p>
</blockquote>
<p>在基于UNIX的计算机操作系统中，<a href="https://zh.wikipedia.org/wiki/Init">init</a> 是操作系统启动期间启动的第一个进程。init 是一个守护进程，它会持续运行直到系统关闭。它是所有其他进程的直接或间接祖先，并自动接收所有孤儿进程。在Linux系统中，进程的结构也是呈现树形，启动第一个进程就是 init （根），它的进程ID号是 1。</p>
<p>上一代关于初始化程序是SysV init 或 BSD init，而现在是Systemd。</p>
<ul>
<li><p>几乎所有 Linux 桌面&#x2F;服务器发行版都使用现代 init 系统，即systemd</p>
</li>
<li><p>systemd比 Busybox init 复杂得多，但也功能更强大</p>
</li>
<li><p>仅支持glibc，不支持 uClibc 和 Musl</p>
</li>
<li><p>提供如下功能：</p>
<ul>
<li>并行启动服务，同时考虑依赖关系</li>
<li>服务监控</li>
<li>通过套接字激活按需启动服务</li>
<li>服务的资源管理：CPU限制、内存限制</li>
</ul>
</li>
<li><p>基于单元的配置文件</p>
<ul>
<li>声明性语言，而不是其他 init 系统中使用的 shell 脚本</li>
</ul>
</li>
<li><p>其他</p>
<ul>
<li><p>journald：日志daemon，替换了syslogd</p>
</li>
<li><p>networkd：用于网络配置管理</p>
</li>
<li><p>udevd：热插拔和 &#x2F;dev 管理</p>
</li>
<li><p>logind：登录管理</p>
</li>
<li><p>systemctl：控制和监控 systemd 的工具</p>
</li>
<li><p>other</p>
</li>
</ul>
</li>
</ul>
<h3 id="基于单元的配置文件"><a href="#基于单元的配置文件" class="headerlink" title="基于单元的配置文件"></a>基于单元的配置文件</h3><p>示例1：&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;sshd.service</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=OpenBSD Secure Shell server</span><br><span class="line">Documentation=man:sshd(8) man:sshd_config(5)</span><br><span class="line">After=network.target auditd.service</span><br><span class="line">ConditionPathExists=!/etc/ssh/sshd_not_to_be_run</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/default/ssh</span><br><span class="line">ExecStartPre=/usr/sbin/sshd -t</span><br><span class="line">ExecStart=/usr/sbin/sshd -D <span class="variable">$SSHD_OPTS</span></span><br><span class="line">ExecReload=/usr/sbin/sshd -t</span><br><span class="line">ExecReload=/bin/kill -HUP <span class="variable">$MAINPID</span></span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartPreventExitStatus=255</span><br><span class="line">Type=notify</span><br><span class="line">RuntimeDirectory=sshd</span><br><span class="line">RuntimeDirectoryMode=0755</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Alias=sshd.service</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>示例2：&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;wpa_supplicant.service</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=WPA supplicant</span><br><span class="line">Before=network.target</span><br><span class="line">After=dbus.service</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=dbus</span><br><span class="line">BusName=fi.w1.wpa_supplicant1</span><br><span class="line">ExecStart=/usr/sbin/wpa_supplicant -u</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Alias=dbus-fi.w1.wpa_supplicant1.service</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h3><ul>
<li><code>systemctl status</code> 查询所有服务的状态</li>
<li><code>systemctl status &lt;service&gt;</code> 查询指定服务的状态</li>
<li><code>systemctl [start|stop|restart] &lt;service&gt;</code> 启动或停止或重启指定服务</li>
<li><code>systemctl [enable|disable] &lt;service&gt;</code> 启用或禁用指定服务开机自启动</li>
<li><code>systemctl is-enabled &lt;service&gt;</code> 查看指定服务是否开机启动</li>
<li><code>systemctl daemon-reload</code> 刷新service配置文件生效</li>
<li><code>systemctl list-units</code> 以表格形式打印所有可用的服务单元</li>
</ul>
<h3 id="journalctl"><a href="#journalctl" class="headerlink" title="journalctl"></a>journalctl</h3><p>journalctl 是用来查询<strong>systemd-journald</strong> 服务收集到的日志的工具。</p>
<ul>
<li><code>journalctl -a</code> 查询所有日志</li>
<li><code>journalctl -f</code> 显示最后一个日志，并且实时打印新增的日志</li>
<li><code>journalctl -u &lt;unit_name&gt;</code> 显示指定服务单元的日志</li>
</ul>
<p>示例1：查询wpa_supplicant.service的日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ journalctl -f -u wpa_supplicant.service</span><br><span class="line">Oct 31 05:43:27 homeassistant systemd[1]: Starting WPA supplicant...</span><br><span class="line">Oct 31 05:43:27 homeassistant wpa_supplicant[6665]: Successfully initialized wpa_supplicant</span><br><span class="line">Oct 31 05:43:27 homeassistant systemd[1]: Started WPA supplicant.</span><br><span class="line">Oct 31 05:43:48 homeassistant wpa_supplicant[6665]: p2p-dev-wlan0: CTRL-EVENT-DSCP-POLICY clear_all</span><br><span class="line">Oct 31 05:43:48 homeassistant wpa_supplicant[6665]: p2p-dev-wlan0: CTRL-EVENT-DSCP-POLICY clear_all</span><br><span class="line">Oct 31 05:43:48 homeassistant wpa_supplicant[6665]: nl80211: deinit ifname=p2p-dev-wlan0 disabled_11b_rates=0</span><br><span class="line">Oct 31 05:43:48 homeassistant wpa_supplicant[6665]: wlan0: CTRL-EVENT-DSCP-POLICY clear_all</span><br><span class="line">Oct 31 05:43:48 homeassistant wpa_supplicant[6665]: wlan0: CTRL-EVENT-DSCP-POLICY clear_all</span><br><span class="line">Oct 31 05:43:48 homeassistant wpa_supplicant[6665]: nl80211: deinit ifname=wlan0 disabled_11b_rates=0</span><br><span class="line">Oct 31 05:44:17 homeassistant systemd[1]: wpa_supplicant.service: Deactivated successfully.</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="linux-graphics-stack-overview"><a href="#linux-graphics-stack-overview" class="headerlink" title="linux graphics stack overview"></a>linux graphics stack overview</h2><p><img src="/2024/10/08/2024/overview-of-major-emabedded-linux-software-stacks/image-20241008192139617.png" alt="image-20241008192139617"></p>
<h2 id="display-controller-support"><a href="#display-controller-support" class="headerlink" title="display controller support"></a>display controller support</h2><p><strong>fddev</strong> 是一个 Linux 子系统，用于在计算机显示器上（通常在系统控制台上）显示图形。不过已经被弃用了，但仍有一些旧的图形驱动程序仅在此子系统中可用。</p>
<p><strong>DRM</strong> 是Linux 内核的一个子系统，负责与现代显卡的GPU进行交互。</p>
<p>支持 SoC 或显卡的显示控制器，以及所有类型的显示面板和桥接器：并行、LVDS、DSI、HDMI、DisplayPort 等。当然，也支持通过I2C或者SPI连接的小型显示面板。设备在linux系统中暴露出来的路径为：<code>/dev/fri/cardX</code>。</p>
<p>DRM对应的库：libdrm，提供了一个好用的测试工具：modetest。</p>
<h2 id="GPU-support-OpenGL"><a href="#GPU-support-OpenGL" class="headerlink" title="GPU support: OpenGL"></a>GPU support: OpenGL</h2><blockquote>
<p>OpenGL是什么？</p>
</blockquote>
<ul>
<li><p>开源</p>
<ul>
<li><p>OpenGL是DRM 子系统中的内核驱动程序，用于向 GPU 发送命令并管理内存。</p>
</li>
<li><p><a href="https://www.mesa3d.org/">mesa3d</a> 用户空间库实现了各种 OpenGL API，包含大量GPU 特定逻辑</p>
</li>
<li><p>支持越来越多的GPU</p>
</li>
</ul>
</li>
<li><p>所有权</p>
<ul>
<li>许多嵌入式 GPU 过去仅通过专有 blob 获得支持 –&gt; 长期维护问题</li>
<li>供应商提供的内核驱动程序 –&gt; 如果用户空间是闭源的，则上游不会接受它们</li>
<li>一个（巨大的）闭源用户空间二进制 blob，实现各种 OpenGL API</li>
</ul>
</li>
</ul>
<h2 id="Concept-of-display-serviers"><a href="#Concept-of-display-serviers" class="headerlink" title="Concept of display serviers"></a>Concept of display serviers</h2><ul>
<li><p>Linux 内核不处理应用程序之间的显示和输入设备的多路复用</p>
<ul>
<li>只有一个用户空间应用程序可以使用显示器和一组给定的输入设备</li>
</ul>
</li>
<li><p>显示服务是特殊的用户空间应用程序，它由如下显示&#x2F;输入复用构成</p>
<ul>
<li>允许多个客户端 GUI 应用程序提交其窗口内容</li>
<li>根据应用程序提交的内容、窗口可见性和分层，组成屏幕上可见的最终帧</li>
<li>根据焦点将输入事件传播到适当的客户端</li>
</ul>
</li>
</ul>
<h2 id="X11-and-X-org"><a href="#X11-and-X-org" class="headerlink" title="X11 and X.org"></a>X11 and X.org</h2><blockquote>
<p><a href="https://www.x.org/wiki/">X.org</a>是什么？</p>
</blockquote>
<ul>
<li><p>X.org是UNIX系统的历史显示服务，包括Linux系统</p>
</li>
<li><p>X11协议被用于客户端和服务器结构</p>
<ul>
<li>本地客户端使用UNIX套接字，远程客户端使用TCP</li>
</ul>
</li>
<li><p>在现代 Linux 上，在 DRM 或 fbdev 之上处理图形，输入子系统处理输入事件</p>
</li>
<li><p>仍保留，但已是遗留</p>
</li>
<li><p>X11许可</p>
</li>
</ul>
<h2 id="Wayland"><a href="#Wayland" class="headerlink" title="Wayland"></a>Wayland</h2><blockquote>
<p><a href="https://wayland.freedesktop.org/">Wayland</a>是什么？</p>
</blockquote>
<ul>
<li>指定显示服务器与其客户端之间通信的通信协议，以及该协议的 C 库实现</li>
<li>使用 Wayland 协议的显示服务称为 Wayland 合成器</li>
<li>X11 协议的现代替代品</li>
<li>更多地基于 OpenGL 技术</li>
</ul>
<p><strong>Wayland compositors</strong></p>
<ul>
<li><a href="https://gitlab.freedesktop.org/wayland/weston">Weston</a></li>
<li><a href="https://gitlab.gnome.org/GNOME/mutter">Mutter</a>：被 GNOME 桌面环境使用</li>
<li>wlroots：一个 Wayland 合成器库<ul>
<li>Cage</li>
<li>swayWM</li>
</ul>
</li>
</ul>
<h2 id="Concept-of-graphics-toolkits"><a href="#Concept-of-graphics-toolkits" class="headerlink" title="Concept of graphics toolkits"></a>Concept of graphics toolkits</h2><ul>
<li><p>X11 和 Wayland 协议是非常低级的协议</p>
</li>
<li><p>虽然可以使用X11和wayland，但直接使用这些协议或相应的客户端库开发应用程序会很麻烦</p>
</li>
<li><p>toolkits工具</p>
<ul>
<li>其中一些只能在显示服务上运行：X11 或 Wayland</li>
<li>其中一些可以直接在 DRM + 输入 之上工作，适用于单个全屏应用程序</li>
</ul>
</li>
<li><p>面向小部件的工具包，具有用于创建窗口、按钮、文本字段、下拉列表等的 API</p>
</li>
<li><p>面向游戏&#x2F;多媒体的工具包，没有预定义的小部件 API</p>
</li>
</ul>
<h2 id="Qt"><a href="#Qt" class="headerlink" title="Qt"></a>Qt</h2><blockquote>
<p>Qt是什么？</p>
</blockquote>
<ul>
<li>非常受欢迎且文档丰富的开发框架，提供如下：<ul>
<li>核心库：数据结构、事件处理、XML、数据库、网络等</li>
<li>图形库：小组件和其他</li>
</ul>
</li>
<li>标准 API 是 C++，但可以绑定到其他语言</li>
<li>可以作为：<ul>
<li>具有 DRM 和 OpenGL 的单个应用程序，或没有加速的 fbdev</li>
<li>X11 或 Wayland 上的多个应用程序</li>
</ul>
</li>
<li>多平台：Linux、MacOS、Windows</li>
<li>许可有点复杂，混合了 LGPLv3、GPLv2、GPLv3 和（昂贵的）商业许可</li>
</ul>
<h2 id="Gtk"><a href="#Gtk" class="headerlink" title="Gtk"></a>Gtk</h2><blockquote>
<p><a href="https://www.gtk.org/">Gtk</a>是什么？</p>
</blockquote>
<ul>
<li><p>作为 GNOME 桌面环境基础的工具包，GNOME 桌面环境是 Linux 桌面发行版中最流行的桌面环境，但在嵌入式项目中逐渐失去吸引力</p>
</li>
<li><p>由 glib（核心库）、pango（文本处理）、cairo（矢量图形）、gtk（小组件库） 组成</p>
</li>
<li><p>C 中的标准 API，但许多语言都存在绑定</p>
</li>
<li><p>需要显示服务支持：X11 或 Wayland</p>
</li>
<li><p>LGPLv2许可</p>
</li>
<li><p>当前最流行的开发版本是v 3.x，接下来的版本是v 4.x</p>
</li>
<li><p>多平台：Linux、MacOS、Windows</p>
</li>
</ul>
<h2 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h2><blockquote>
<p><a href="https://flutter.dev/">Flutter</a>是什么？</p>
</blockquote>
<ul>
<li>跨平台 UI 应用程序开发：Linux、Android、iOS、Windows、MacOS</li>
<li>由Google负责开发和维护</li>
<li>应用开发必须使用 Dart 编程语言</li>
<li>应用程序可以在 Dart 虚拟机中运行，也可以进行本地编译以获得更好的性能</li>
<li>BSD-3-Clause认证许可</li>
</ul>
<h2 id="SDL"><a href="#SDL" class="headerlink" title="SDL"></a>SDL</h2><ul>
<li>跨平台开发库，旨在提供对音频、键盘、鼠标、操纵杆和图形硬件的低级访问</li>
<li>使用C语言实现，轻量级</li>
<li>没有提供小组件库</li>
<li>游戏、媒体播放器、自定义 UI</li>
<li>zlib认证许可</li>
</ul>
<h2 id="Other-graphical-toolkits"><a href="#Other-graphical-toolkits" class="headerlink" title="Other graphical toolkits"></a>Other graphical toolkits</h2><ul>
<li>Enlightenment Foundation Libraries (EFL) &#x2F; Elementary<ul>
<li>轻量且强大，但不是那么流行</li>
<li>运行在X11 或 Wayland之上</li>
<li>LGPLv2.1认证</li>
</ul>
</li>
<li>LVGL<ul>
<li>非常轻量，主要用于微控制器，但也能运行在Linux上</li>
<li>MIT认证许可</li>
</ul>
</li>
</ul>
<h2 id="Linux-multimedia-stack-overview"><a href="#Linux-multimedia-stack-overview" class="headerlink" title="Linux multimedia stack overview"></a>Linux multimedia stack overview</h2><p><img src="/2024/10/08/2024/overview-of-major-emabedded-linux-software-stacks/image-20241009151839214.png" alt="image-20241009151839214"></p>
<h2 id="Audio-stack"><a href="#Audio-stack" class="headerlink" title="Audio stack"></a>Audio stack</h2><ul>
<li>内核侧：ALSA子系统，Advanced Linux Sound Architecture<ul>
<li>包括音频接口和音频编解码器的驱动程序</li>
<li>暴露的音频设备接口 &#x2F;dev&#x2F;snd&#x2F;</li>
</ul>
</li>
<li>用户空间库：alsa-lib</li>
<li>音频服务<ul>
<li>当多个应用程序共享音频设备时需要：混合音频流，将音频流从特定应用程序路由到特定设备</li>
<li>JACK：主要用于专业音响</li>
<li>pulseaudio：主要用于常规桌面 Linux 音频</li>
<li>pipewire：pulseaudio 和 JACK 的现代替代品，已被一些 Linux 发行版采用</li>
</ul>
</li>
</ul>
<h2 id="Video-stack"><a href="#Video-stack" class="headerlink" title="Video stack"></a>Video stack</h2><ul>
<li>内核侧：Video4Linux 子系统（简称V4L）<ul>
<li>支持摄像头设备：网络摄像头以及 SoC 和摄像头传感器的摄像头接口（并行、CSI 等）</li>
<li>还用于支持视频编码&#x2F;解码硬件加速器：H264、H265等</li>
<li>暴露的视频设备接口 &#x2F;dev&#x2F;videoX</li>
</ul>
</li>
<li>传统用户空间库：libv4l</li>
<li>新的用户空间库，更现代，具有更多功能，正在采用：libcamera</li>
<li>许多多媒体堆栈&#x2F;软件都支持：GStreamer、ffmpeg、VLC 等</li>
</ul>
<h2 id="GStreamer"><a href="#GStreamer" class="headerlink" title="GStreamer"></a>GStreamer</h2><blockquote>
<p>Gstreamer是什么？</p>
</blockquote>
<ul>
<li>用于构建媒体处理组件图表的库</li>
<li>允许创建管道来转换、转变、流式传输、显示、捕获多媒体流（包括音频和视频）</li>
<li>由大量插件组成：视频捕获&#x2F;显示、音频捕获&#x2F;播放、编码&#x2F;解码、缩放、过滤等</li>
<li>一个有趣的替代方案是 ffmpeg</li>
</ul>
<h2 id="Linux-networking-stack"><a href="#Linux-networking-stack" class="headerlink" title="Linux networking stack"></a>Linux networking stack</h2><p><img src="/2024/10/08/2024/overview-of-major-emabedded-linux-software-stacks/image-20241009153641765.png" alt="image-20241009153641765"></p>
<h2 id="Web-accessible-UI"><a href="#Web-accessible-UI" class="headerlink" title="Web accessible UI"></a>Web accessible UI</h2><ul>
<li>在嵌入式系统中，使用 Web 界面进行设备配置&#x2F;监控非常常见</li>
<li>需要 web 服务器：Busybox httpd可以满足简单的需求、lighttpd、nginx、apache可以满足复杂的需求</li>
<li>可以使用 PHP、NodeJS 或其他解释型语言，或者简单的 CGI shell 脚本</li>
</ul>
<h2 id="Web-browsers-rendering-engines"><a href="#Web-browsers-rendering-engines" class="headerlink" title="Web browsers: rendering engines"></a>Web browsers: rendering engines</h2><p>向你的设备添加 HTML 呈现功能：</p>
<ul>
<li>WebKit<ul>
<li>由Apple发起，在 iOS 和 Safari 中被使用</li>
<li>开源项目许可：LGPLv2.1 和 BSD-2-Clause</li>
<li>在Gtk中集成方式：WebKitGtk</li>
<li>在Qt中的集成方式：QtWebKit</li>
<li>针对嵌入式设备优化的端口：WPE WebKit</li>
</ul>
</li>
<li>Blink<ul>
<li>从WebKit中分支出来的</li>
<li>由Google开发，并被用在Chrome中</li>
<li>在Qt中的集成方式：QtWebEngine</li>
<li>被 Electron 使用</li>
</ul>
</li>
</ul>
<h2 id="Web-based-UIs"><a href="#Web-based-UIs" class="headerlink" title="Web-based UIs"></a>Web-based UIs</h2><ul>
<li><p>原生 GUI 应用程序的替代方案是创建基于 Web 技术的 GUI</p>
</li>
<li><p>全屏运行 Web 浏览器，并使用流行的 Web 技术开发应用程序</p>
</li>
<li><p>一些可用选项：</p>
<ul>
<li>Cog：适用于 WPE Webkit 端口的简单启动器</li>
<li>Electron：将 NodeJS 应用程序与 Web 渲染引擎打包成一个独立应用程序的方法</li>
</ul>
</li>
<li><p>注意占用空间和性能影响：Web 渲染引擎是一个庞大且耗费资源的软件</p>
</li>
</ul>
<h2 id="Programming-languages"><a href="#Programming-languages" class="headerlink" title="Programming languages"></a>Programming languages</h2><ul>
<li>可用的语言和框架种类繁多，不仅限于 C&#x2F;C++</li>
<li>注意空间和性能的影响</li>
<li>编译型语言<ul>
<li>C&#x2F;C++</li>
<li>Rust</li>
<li>Go</li>
<li>Ada</li>
<li>Fortran</li>
</ul>
</li>
<li>解释型语言<ul>
<li>Python</li>
<li>Javascripts，NodeJS</li>
<li>Lua</li>
<li>Shell scripts</li>
<li>Perl，Ruby，PHP</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>bootlin</category>
      </categories>
      <tags>
        <tag>embeded linux</tag>
      </tags>
  </entry>
  <entry>
    <title>bluetooth: le advertise scan</title>
    <url>/2024/09/29/2024/bluetooth-le-advertise-scan/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>bluetooth</category>
      </categories>
      <tags>
        <tag>le advertise scan</tag>
        <tag>hci</tag>
        <tag>le</tag>
      </tags>
  </entry>
  <entry>
    <title>bluetoothd: source file reading</title>
    <url>/2024/09/25/2024/bluetoothd-source-file-reading/</url>
    <content><![CDATA[<p><a href="https://github.com/bluez/bluez">bluez</a></p>
<h2 id="程序入口"><a href="#程序入口" class="headerlink" title="程序入口"></a>程序入口</h2><p>首先从 <code>/src/main.c</code> 的 main() 函数开始，对于本地定义的函数功能作出解读。</p>
<ul>
<li><p>第一部分</p>
<p><strong>init_defaults()</strong> 默认值的初始化操作，主要是给全局变量 <code>btd_opts</code> 设置默认值。其中有我们所关心的一些信息：BlueZ版本、临时设备（Temporary）被清理的定时时长、适配器配对属性（Pairable）和可发现属性（Discoverable）默认有效时长 等等。</p>
</li>
<li><p>第二部分</p>
<p>解析bluetoothd支持的输入参数，<code>options</code> 结构体变量预定义了一些参数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个上下文结构体指针变量context</span></span><br><span class="line">context = g_option_context_new(<span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// 将options的条目增加到context</span></span><br><span class="line">g_option_context_add_main_entries(context, options, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过用户输入的参数argv与预定义的命令行参数对比解析</span></span><br><span class="line"><span class="keyword">if</span> (g_option_context_parse(context, &amp;argc, &amp;argv, &amp;err) == FALSE) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        g_printerr(<span class="string">&quot;%s\n&quot;</span>, err-&gt;message);</span><br><span class="line">        g_error_free(err);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        g_printerr(<span class="string">&quot;An unknown error occurred\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g_option_context_free(context);</span><br><span class="line"><span class="comment">// 省略...</span></span><br></pre></td></tr></table></figure>

<p><em>注意：上述几个函数都是 <a href="https://docs.gtk.org/glib/struct.OptionContext.html">Glib库中的函数</a></em></p>
<p>1、g_option_context_new</p>
<p>2、g_option_context_add_main_entries</p>
<p>3、g_option_context_parse</p>
<p>4、g_option_context_free</p>
</li>
<li><p>第三部分</p>
<p>debug和log部分的初始化处理</p>
</li>
<li><p>第四部分</p>
<p>用户配置文件导入和解析，前提条件：用户运行bluetoothd时通过参数-f指定了配置文件，若用户没有指定配置文件，那么将使用main.conf。</p>
</li>
<li><p>第五部分</p>
<p>连接dbus daemon，然后向dbus上注册 <code>org.bluez</code> 服务。</p>
</li>
<li><p>第六部分</p>
<p>adapter_init() 函数用于适配器初始化操作，查找本地蓝牙适配器数量，在适配器上注册所有的事件（event）通知回调函数，这里需要重点关注几个：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">device_found_callback()</span><br><span class="line">discovering_callback()</span><br></pre></td></tr></table></figure>

<p>当底层的蓝牙适配器controller发现蓝牙设备通过 device_found_callback() 回调函数通知bluetoothd应用</p>
<p>当底层的蓝牙适配器controller启动&#x2F;停止扫描通过 discovering_callback() 回调函数通知bluetoothd应用</p>
<p>Host和Controller之间通过HCI通信，Host创建socket接口，接着注册 can_read_data() 回调函数，可以读取Controller的Event，当然也可以通过send_request() 发送Command给Controller。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">socket(PF_BLUETOOTH, SOCK_RAW | SOCK_CLOEXEC | SOCK_NONBLOCK, BTPROTO_HCI);</span><br></pre></td></tr></table></figure>
</li>
<li><p>第七部分</p>
<p>device、agent、profile、plugin的初始化</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">btd_device_init();</span><br><span class="line">btd_agent_init();</span><br><span class="line">btd_profile_init();</span><br></pre></td></tr></table></figure>
</li>
<li><p>第八部分</p>
<p>注册信号，然后进入glib事件循环</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mainloop_run_with_signal(signal_callback, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<p>bluetoothd就启动完毕了。</p>
<p>对于bluetoothd源码的解读还有非常的多的疑问，互联网上对于bluez中bluetoothd资料更是凤毛麟角，只能是暂时自己对于bluetoothd源码的一个简单的认识。</p>
<h2 id="MGMT"><a href="#MGMT" class="headerlink" title="MGMT"></a>MGMT</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MGMT_OP_START_DISCOVERY		0x0023</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mgmt_cp_start_discovery</span> &#123;</span></span><br><span class="line">	<span class="type">uint8_t</span> type;</span><br><span class="line">&#125; __packed;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MGMT_OP_STOP_DISCOVERY		0x0024</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mgmt_cp_stop_discovery</span> &#123;</span></span><br><span class="line">	<span class="type">uint8_t</span> type;</span><br><span class="line">&#125; __packed;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MGMT_EV_DEVICE_FOUND		0x0012</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mgmt_ev_device_found</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mgmt_addr_info</span> <span class="title">addr</span>;</span></span><br><span class="line">	<span class="type">int8_t</span> rssi;</span><br><span class="line">	<span class="type">uint32_t</span> flags;</span><br><span class="line">	<span class="type">uint16_t</span> eir_len;</span><br><span class="line">	<span class="type">uint8_t</span> eir[<span class="number">0</span>];</span><br><span class="line">&#125; __packed;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MGMT_EV_DISCOVERING		0x0013</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mgmt_ev_discovering</span> &#123;</span></span><br><span class="line">	<span class="type">uint8_t</span> type;</span><br><span class="line">	<span class="type">uint8_t</span> discovering;</span><br><span class="line">&#125; __packed;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="设备发现"><a href="#设备发现" class="headerlink" title="设备发现"></a>设备发现</h2><blockquote>
<p>当适配器开始扫描时，发现了附近的蓝牙设备，蓝牙设备被添加到适配器的过程是怎么样的？</p>
</blockquote>
<p>当适配器执行扫描时，发现的蓝牙设备通过回调函数传递（bluetoothd在main函数中执行adapter_init函数就注册所有的事件回调函数），以下就是关于设备发现的回调函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">device_found_callback</span><span class="params">(<span class="type">uint16_t</span> index, <span class="type">uint16_t</span> length,</span></span><br><span class="line"><span class="params">					<span class="type">const</span> <span class="type">void</span> *param, <span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">mgmt_ev_device_found</span> *<span class="title">ev</span> =</span> param;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">btd_adapter</span> *<span class="title">adapter</span> =</span> user_data;</span><br><span class="line">	<span class="type">const</span> <span class="type">uint8_t</span> *eir;</span><br><span class="line">	<span class="type">uint16_t</span> eir_len;</span><br><span class="line">	<span class="type">uint32_t</span> flags;</span><br><span class="line">	<span class="type">char</span> addr[<span class="number">18</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (length &lt; <span class="keyword">sizeof</span>(*ev)) &#123;</span><br><span class="line">		btd_error(adapter-&gt;dev_id,</span><br><span class="line">			<span class="string">&quot;Too short device found event (%u bytes)&quot;</span>, length);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	eir_len = btohs(ev-&gt;eir_len);</span><br><span class="line">	<span class="keyword">if</span> (length != <span class="keyword">sizeof</span>(*ev) + eir_len) &#123;</span><br><span class="line">		btd_error(adapter-&gt;dev_id,</span><br><span class="line">				<span class="string">&quot;Device found event size mismatch (%u != %zu)&quot;</span>,</span><br><span class="line">					length, <span class="keyword">sizeof</span>(*ev) + eir_len);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (eir_len == <span class="number">0</span>)</span><br><span class="line">		eir = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		eir = ev-&gt;eir;</span><br><span class="line"></span><br><span class="line">	flags = le32_to_cpu(ev-&gt;flags);</span><br><span class="line"></span><br><span class="line">	ba2str(&amp;ev-&gt;addr.bdaddr, addr);</span><br><span class="line">	DBG(<span class="string">&quot;hci%u addr %s, rssi %d flags 0x%04x eir_len %u&quot;</span>,</span><br><span class="line">			index, addr, ev-&gt;rssi, flags, eir_len);</span><br><span class="line"></span><br><span class="line">	btd_adapter_device_found(adapter, &amp;ev-&gt;addr.bdaddr,</span><br><span class="line">					ev-&gt;addr.type, ev-&gt;rssi, flags,</span><br><span class="line">					eir, eir_len, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着关注这个函数 btd_adapter_device_found，由于这个函数太长，仅放出部分代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">btd_adapter_device_found</span><span class="params">(<span class="keyword">struct</span> btd_adapter *adapter,</span></span><br><span class="line"><span class="params">					<span class="type">const</span> <span class="type">bdaddr_t</span> *bdaddr,</span></span><br><span class="line"><span class="params">					<span class="type">uint8_t</span> bdaddr_type, <span class="type">int8_t</span> rssi,</span></span><br><span class="line"><span class="params">					<span class="type">uint32_t</span> flags,</span></span><br><span class="line"><span class="params">					<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">uint8_t</span> data_len,</span></span><br><span class="line"><span class="params">					<span class="type">bool</span> monitoring)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 省略...</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 从适配器下面查找目标设备，若没有该设备，则执行花括号的内容</span></span><br><span class="line">	dev = btd_adapter_find_device(adapter, bdaddr, bdaddr_type);</span><br><span class="line">	<span class="keyword">if</span> (!dev) &#123;</span><br><span class="line">		<span class="comment">/* In case of being just a scan response don&#x27;t attempt to create</span></span><br><span class="line"><span class="comment">		 * the device.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">if</span> (scan_rsp) &#123;</span><br><span class="line">			eir_data_free(&amp;eir_data);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Monitor Devices advertising Broadcast Announcements if the</span></span><br><span class="line"><span class="comment">		 * adapter is capable of synchronizing to it.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">if</span> (eir_get_service_data(&amp;eir_data, BCAA_SERVICE_UUID) &amp;&amp;</span><br><span class="line">				btd_adapter_has_settings(adapter,</span><br><span class="line">				MGMT_SETTING_ISO_SYNC_RECEIVER))</span><br><span class="line">			monitoring = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!discoverable &amp;&amp; !monitoring &amp;&amp; not_connectable) &#123;</span><br><span class="line">			eir_data_free(&amp;eir_data);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		dev = adapter_create_device(adapter, bdaddr, bdaddr_type);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 更新定时器</span></span><br><span class="line">	device_update_last_seen(dev, bdaddr_type, !not_connectable);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (bdaddr_type != BDADDR_BREDR &amp;&amp; eir_data.flags &amp;&amp;</span><br><span class="line">					!(eir_data.flags &amp; EIR_BREDR_UNSUP)) &#123;</span><br><span class="line">		device_set_bredr_support(dev);</span><br><span class="line">		<span class="comment">/* Update last seen for BR/EDR in case its flag is set */</span></span><br><span class="line">		device_update_last_seen(dev, BDADDR_BREDR, !not_connectable);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (eir_data.name != <span class="literal">NULL</span> &amp;&amp; eir_data.name_complete)</span><br><span class="line">		device_store_cached_name(dev, eir_data.name);</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>device_store_cached_name函数用于在cache目录下创建设备的持久化存储，接下来关注这个函数 adapter_create_device</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> btd_device *<span class="title function_">adapter_create_device</span><span class="params">(<span class="keyword">struct</span> btd_adapter *adapter,</span></span><br><span class="line"><span class="params">						<span class="type">const</span> <span class="type">bdaddr_t</span> *bdaddr,</span></span><br><span class="line"><span class="params">						<span class="type">uint8_t</span> bdaddr_type)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">btd_device</span> *<span class="title">device</span>;</span></span><br><span class="line"></span><br><span class="line">	device = device_create(adapter, bdaddr, bdaddr_type);</span><br><span class="line">	<span class="keyword">if</span> (!device)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	adapter_add_device(adapter, device);</span><br><span class="line">	<span class="keyword">return</span> device;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重点来了，此时看到了函数 <code>device_create</code> 用于创建设备，具体看它的实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> btd_device *<span class="title function_">device_create</span><span class="params">(<span class="keyword">struct</span> btd_adapter *adapter,</span></span><br><span class="line"><span class="params">				<span class="type">const</span> <span class="type">bdaddr_t</span> *bdaddr, <span class="type">uint8_t</span> bdaddr_type)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">btd_device</span> *<span class="title">device</span>;</span></span><br><span class="line">	<span class="type">char</span> dst[<span class="number">18</span>];</span><br><span class="line">	<span class="type">char</span> *str;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *storage_dir;</span><br><span class="line"></span><br><span class="line">	ba2str(bdaddr, dst);</span><br><span class="line">	DBG(<span class="string">&quot;dst %s&quot;</span>, dst);</span><br><span class="line"></span><br><span class="line">	device = device_new(adapter, dst);</span><br><span class="line">	<span class="keyword">if</span> (device == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	device-&gt;bdaddr_type = bdaddr_type;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (bdaddr_type == BDADDR_BREDR)</span><br><span class="line">		device-&gt;bredr = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		device-&gt;le = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	storage_dir = btd_adapter_get_storage_dir(adapter);</span><br><span class="line">	str = load_cached_name(device, storage_dir, dst);</span><br><span class="line">	<span class="keyword">if</span> (str) &#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(device-&gt;name, str);</span><br><span class="line">		g_free(str);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	load_cached_name_resolve(device, storage_dir, dst);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> device;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们知道蓝牙设备被适配器添加后，会注册类似这种对象路径 <code>/org/bluez/hci0/dev_50_64_2B_BF_46_36</code>，这部分内容就在这个函数 device_new()</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> GDBusMethodTable device_methods[] = &#123;</span><br><span class="line">	&#123; GDBUS_ASYNC_METHOD(<span class="string">&quot;Disconnect&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, dev_disconnect) &#125;,</span><br><span class="line">	&#123; GDBUS_ASYNC_METHOD(<span class="string">&quot;Connect&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, dev_connect) &#125;,</span><br><span class="line">	&#123; GDBUS_ASYNC_METHOD(<span class="string">&quot;ConnectProfile&quot;</span>, GDBUS_ARGS(&#123; <span class="string">&quot;UUID&quot;</span>, <span class="string">&quot;s&quot;</span> &#125;),</span><br><span class="line">						<span class="literal">NULL</span>, connect_profile) &#125;,</span><br><span class="line">	&#123; GDBUS_ASYNC_METHOD(<span class="string">&quot;DisconnectProfile&quot;</span>, GDBUS_ARGS(&#123; <span class="string">&quot;UUID&quot;</span>, <span class="string">&quot;s&quot;</span> &#125;),</span><br><span class="line">						<span class="literal">NULL</span>, disconnect_profile) &#125;,</span><br><span class="line">	&#123; GDBUS_ASYNC_METHOD(<span class="string">&quot;Pair&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, pair_device) &#125;,</span><br><span class="line">	&#123; GDBUS_METHOD(<span class="string">&quot;CancelPairing&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, cancel_pairing) &#125;,</span><br><span class="line">	&#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> GDBusPropertyTable device_properties[] = &#123;</span><br><span class="line">	&#123; <span class="string">&quot;Address&quot;</span>, <span class="string">&quot;s&quot;</span>, dev_property_get_address &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;AddressType&quot;</span>, <span class="string">&quot;s&quot;</span>, property_get_address_type &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Name&quot;</span>, <span class="string">&quot;s&quot;</span>, dev_property_get_name, <span class="literal">NULL</span>, dev_property_exists_name &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Alias&quot;</span>, <span class="string">&quot;s&quot;</span>, dev_property_get_alias, dev_property_set_alias &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Class&quot;</span>, <span class="string">&quot;u&quot;</span>, dev_property_get_class, <span class="literal">NULL</span>,</span><br><span class="line">					dev_property_exists_class &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Appearance&quot;</span>, <span class="string">&quot;q&quot;</span>, dev_property_get_appearance, <span class="literal">NULL</span>,</span><br><span class="line">					dev_property_exists_appearance &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Icon&quot;</span>, <span class="string">&quot;s&quot;</span>, dev_property_get_icon, <span class="literal">NULL</span>,</span><br><span class="line">					dev_property_exists_icon &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Paired&quot;</span>, <span class="string">&quot;b&quot;</span>, dev_property_get_paired &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Bonded&quot;</span>, <span class="string">&quot;b&quot;</span>, dev_property_get_bonded &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Trusted&quot;</span>, <span class="string">&quot;b&quot;</span>, dev_property_get_trusted, dev_property_set_trusted &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Blocked&quot;</span>, <span class="string">&quot;b&quot;</span>, dev_property_get_blocked, dev_property_set_blocked &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;LegacyPairing&quot;</span>, <span class="string">&quot;b&quot;</span>, dev_property_get_legacy &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;RSSI&quot;</span>, <span class="string">&quot;n&quot;</span>, dev_property_get_rssi, <span class="literal">NULL</span>, dev_property_exists_rssi &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Connected&quot;</span>, <span class="string">&quot;b&quot;</span>, dev_property_get_connected &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;UUIDs&quot;</span>, <span class="string">&quot;as&quot;</span>, dev_property_get_uuids &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Modalias&quot;</span>, <span class="string">&quot;s&quot;</span>, dev_property_get_modalias, <span class="literal">NULL</span>,</span><br><span class="line">						dev_property_exists_modalias &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Adapter&quot;</span>, <span class="string">&quot;o&quot;</span>, dev_property_get_adapter &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;ManufacturerData&quot;</span>, <span class="string">&quot;a&#123;qv&#125;&quot;</span>, dev_property_get_manufacturer_data,</span><br><span class="line">				<span class="literal">NULL</span>, dev_property_manufacturer_data_exist &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;ServiceData&quot;</span>, <span class="string">&quot;a&#123;sv&#125;&quot;</span>, dev_property_get_service_data,</span><br><span class="line">				<span class="literal">NULL</span>, dev_property_service_data_exist &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;TxPower&quot;</span>, <span class="string">&quot;n&quot;</span>, dev_property_get_tx_power, <span class="literal">NULL</span>,</span><br><span class="line">					dev_property_exists_tx_power &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;ServicesResolved&quot;</span>, <span class="string">&quot;b&quot;</span>, dev_property_get_svc_resolved, <span class="literal">NULL</span>, <span class="literal">NULL</span> &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;AdvertisingFlags&quot;</span>, <span class="string">&quot;ay&quot;</span>, dev_property_get_flags, <span class="literal">NULL</span>,</span><br><span class="line">					dev_property_flags_exist &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;AdvertisingData&quot;</span>, <span class="string">&quot;a&#123;yv&#125;&quot;</span>, dev_property_get_advertising_data,</span><br><span class="line">				<span class="literal">NULL</span>, dev_property_advertising_data_exist &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;WakeAllowed&quot;</span>, <span class="string">&quot;b&quot;</span>, dev_property_get_wake_allowed,</span><br><span class="line">				dev_property_set_wake_allowed,</span><br><span class="line">				dev_property_wake_allowed_exist &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Sets&quot;</span>, <span class="string">&quot;a&#123;oa&#123;sv&#125;&#125;&quot;</span>, dev_property_get_set, <span class="literal">NULL</span>,</span><br><span class="line">				dev_property_set_exists &#125;,</span><br><span class="line">	&#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> btd_device *<span class="title function_">device_new</span><span class="params">(<span class="keyword">struct</span> btd_adapter *adapter,</span></span><br><span class="line"><span class="params">				<span class="type">const</span> <span class="type">char</span> *address)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> *address_up;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">btd_device</span> *<span class="title">device</span>;</span></span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *adapter_path = adapter_get_path(adapter);</span><br><span class="line"></span><br><span class="line">	DBG(<span class="string">&quot;address %s&quot;</span>, address);</span><br><span class="line"></span><br><span class="line">	device = g_try_malloc0(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> btd_device));</span><br><span class="line">	<span class="keyword">if</span> (device == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	device-&gt;tx_power = <span class="number">127</span>;</span><br><span class="line">	device-&gt;volume = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">	device-&gt;db = gatt_db_new();</span><br><span class="line">	<span class="keyword">if</span> (!device-&gt;db) &#123;</span><br><span class="line">		g_free(device);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(device-&gt;ad_flags, INVALID_FLAGS, <span class="keyword">sizeof</span>(device-&gt;ad_flags));</span><br><span class="line"></span><br><span class="line">	device-&gt;ad = bt_ad_new();</span><br><span class="line">	<span class="keyword">if</span> (!device-&gt;ad) &#123;</span><br><span class="line">		device_free(device);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	address_up = g_ascii_strup(address, <span class="number">-1</span>);</span><br><span class="line">	device-&gt;path = g_strdup_printf(<span class="string">&quot;%s/dev_%s&quot;</span>, adapter_path, address_up);</span><br><span class="line">	g_strdelimit(device-&gt;path, <span class="string">&quot;:&quot;</span>, <span class="string">&#x27;_&#x27;</span>);</span><br><span class="line">	g_free(address_up);</span><br><span class="line"></span><br><span class="line">	str2ba(address, &amp;device-&gt;bdaddr);</span><br><span class="line"></span><br><span class="line">	device-&gt;client_dbus = btd_gatt_client_new(device);</span><br><span class="line">	<span class="keyword">if</span> (!device-&gt;client_dbus) &#123;</span><br><span class="line">		error(<span class="string">&quot;Failed to create btd_gatt_client&quot;</span>);</span><br><span class="line">		device_free(device);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	DBG(<span class="string">&quot;Creating device %s&quot;</span>, device-&gt;path);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (g_dbus_register_interface(dbus_conn,</span><br><span class="line">					device-&gt;path, DEVICE_INTERFACE,</span><br><span class="line">					device_methods, <span class="literal">NULL</span>,</span><br><span class="line">					device_properties, device,</span><br><span class="line">					device_free) == FALSE) &#123;</span><br><span class="line">		error(<span class="string">&quot;Unable to register device interface for %s&quot;</span>, address);</span><br><span class="line">		device_free(device);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	device-&gt;adapter = adapter;</span><br><span class="line">	device-&gt;sirks = queue_new();</span><br><span class="line">	device-&gt;temporary = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	device-&gt;db_id = gatt_db_register(device-&gt;db, gatt_service_added,</span><br><span class="line">					gatt_service_removed, device, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	device-&gt;refresh_discovery = btd_opts.refresh_discovery;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> btd_device_ref(device);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数 <code>g_dbus_register_interface</code> 为蓝牙设备注册了 <code>org.bluez.Device1</code> 服务</p>
<p><strong>扫描注意事项：</strong></p>
<p>参考来源：<a href="https://www.bluetooth.com/specifications/specs/core-specification-amended-5-4/">Core_amended_2024_06_11_v5.4.pdf</a></p>
<ul>
<li><p>查询扫描类型（inquiry scan type）</p>
<p>Inquiry_Scan_Type 配置参数指示查询扫描是否使用非隔行扫描或隔行扫描进行。目前，定义了一种强制查询扫描类型和一种可选查询扫描类型。</p>
<p><img src="/2024/09/25/2024/bluetoothd-source-file-reading/image-20241023191822349.png" alt="image-20241023191822349"></p>
</li>
<li><p>查询扫描窗口（inquiry scan window）：持续扫描查询的时间，必须小于或等于扫描间隔。取值范围：0x0011 ~ 0x1000，转化为时间单位范围：10.625 ms ~ 2560 ms，默认值：0x0012（11.25ms）</p>
<p><img src="/2024/09/25/2024/bluetoothd-source-file-reading/image-20241008212348333.png" alt="image-20241008212348333"></p>
<p><em>注意：一个扫描窗口并不会扫描所有的40个射频通道，完全取决于硬件底层实现。</em></p>
</li>
<li><p>查询扫描间隔（inquiry scan interval）：从上一次扫描查询开始扫下一次扫描查询开始的时间间隔。取值范围：0x0012 ~ 0x1000，转化为时间单位范围：11.25 ms ~ 2560 ms，默认值：0x1000（2560ms） </p>
<p>Inquiry_Scan_Interval 配置参数定义连续查询扫描之间的时间量。这定义为从 BR&#x2F;EDR 控制器开始其上一次查询扫描到开始下一次查询扫描的时间间隔</p>
<p><img src="/2024/09/25/2024/bluetoothd-source-file-reading/image-20241008212407775.png" alt="image-20241008212407775"></p>
</li>
<li><p>页扫描间隔（page scan interval）：Page_Scan_Interval 配置参数定义连续页面扫描之间的时间量。此时间间隔定义为从控制器开始其上一次页面扫描到开始下一次页面扫描的时间。</p>
<p><img src="/2024/09/25/2024/bluetoothd-source-file-reading/image-20241023193938906.png" alt="image-20241023193938906"></p>
</li>
<li><p>页扫描窗口（page scan window）：Page_Scan_Window 配置参数定义页面扫描的持续时间。Page_Scan_Window 只能小于或等于 Page_Scan_Interval。</p>
<p><img src="/2024/09/25/2024/bluetoothd-source-file-reading/image-20241023194040460.png" alt="image-20241023194040460"></p>
</li>
</ul>
<p>扫描窗口和扫描间隔的关系：</p>
<p><img src="/2024/09/25/2024/bluetoothd-source-file-reading/1bb9cc19d90e21a6df65dd230d9a0020.png"></p>
<p>其他学习参考<a href="https://www.ebyte.com/news/1369.html#:~:text=%E6%89%AB%E6%8F%8F%E5%8F%82%E6%95%B0%E6%98%AF%E8%93%9D%E7%89%99%E4%B8%BB%E6%9C%BA%E8%AE%BE">BLE设备功耗太高？弄懂这几个参数，功耗想不降都难</a></p>
<p><strong>扫描参数</strong></p>
<p>在 main.conf 配置文件中涉及到bredr 和 le 的扫描参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[BT]</span><br><span class="line"># BR/EDR Inquiry scan activity configuration</span><br><span class="line">#InquiryScanType=</span><br><span class="line">#InquiryScanInterval=</span><br><span class="line">#InquiryScanWindow=</span><br><span class="line"></span><br><span class="line">[LE]</span><br><span class="line"># LE scanning parameters used for active scanning supporting discovery</span><br><span class="line"># proceedure</span><br><span class="line">#ScanIntervalDiscovery=</span><br><span class="line">#ScanWindowDiscovery=</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在src&#x2F;main.c 中若用户没有指定配置文件（例如main.conf），那么就会给定一个默认值。</p>
<p>通过读取配置文件，覆盖默认扫描参数：</p>
<ul>
<li>LE扫描参数范围</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123; <span class="string">&quot;ScanIntervalDiscovery&quot;</span>,</span><br><span class="line">		  &amp;btd_opts.defaults.le.scan_interval_discovery,</span><br><span class="line">		  <span class="keyword">sizeof</span>(btd_opts.defaults.le.scan_interval_discovery),</span><br><span class="line">		  <span class="number">0x0004</span>,</span><br><span class="line">		  <span class="number">0x4000</span>&#125;,</span><br><span class="line">&#123; <span class="string">&quot;ScanWindowDiscovery&quot;</span>,</span><br><span class="line">		  &amp;btd_opts.defaults.le.scan_win_discovery,</span><br><span class="line">		  <span class="keyword">sizeof</span>(btd_opts.defaults.le.scan_win_discovery),</span><br><span class="line">		  <span class="number">0x0004</span>,</span><br><span class="line">		  <span class="number">0x4000</span>&#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>BREDR扫描参数范围</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123; <span class="string">&quot;InquiryScanType&quot;</span>,</span><br><span class="line">		  &amp;btd_opts.defaults.br.scan_type,</span><br><span class="line">		  <span class="keyword">sizeof</span>(btd_opts.defaults.br.scan_type),</span><br><span class="line">		  <span class="number">0</span>,</span><br><span class="line">		  <span class="number">1</span>&#125;,</span><br><span class="line">&#123; <span class="string">&quot;InquiryScanInterval&quot;</span>,</span><br><span class="line">		  &amp;btd_opts.defaults.br.scan_interval,</span><br><span class="line">		  <span class="keyword">sizeof</span>(btd_opts.defaults.br.scan_interval),</span><br><span class="line">		  <span class="number">0x0012</span>,</span><br><span class="line">		  <span class="number">0x1000</span>&#125;,</span><br><span class="line">&#123; <span class="string">&quot;InquiryScanWindow&quot;</span>,</span><br><span class="line">		  &amp;btd_opts.defaults.br.scan_win,</span><br><span class="line">		  <span class="keyword">sizeof</span>(btd_opts.defaults.br.scan_win),</span><br><span class="line">		  <span class="number">0x0011</span>,</span><br><span class="line">		  <span class="number">0x1000</span>&#125;,</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>bluetooth</category>
      </categories>
      <tags>
        <tag>bluez</tag>
        <tag>bluetoothd</tag>
      </tags>
  </entry>
  <entry>
    <title>bluetoothd: device cache</title>
    <url>/2024/09/23/2024/bluetoothd-device-cache/</url>
    <content><![CDATA[<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>关于蓝牙数据的存储，在bluez的doc目录下有一个文件（<a href="https://git.kernel.org/pub/scm/bluetooth/bluez.git/tree/doc/settings-storage.txt">settings-storage.txt</a>）作出了说明。</p>
<blockquote>
<p>Adapter and remote device info are read form the storage during object initialization. Write to storage is performed immediately on every value<br>change.</p>
<p>Default storage directory is &#x2F;var&#x2F;lib&#x2F;bluetooth. This can be adjusted by the –localstatedir configure switch. Default is –localstatedir&#x3D;&#x2F;var.</p>
</blockquote>
<p>翻译：在对象初始化期间，从存储中读取适配器和远程设备信息。每次值更改时都会立即写入存储。默认存储目录为 <code>/var/lib/bluetooth</code>。可以通过 –localstatedir 配置开关进行调整。默认值为 <code>--localstatedir=/var</code>。</p>
<p><strong>首次运行bluetoothd的存储目录结构：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tree bluetooth</span><br><span class="line">bluetooth/</span><br><span class="line">└── 40:80:E1:50:1D:47</span><br><span class="line">    ├── attributes</span><br><span class="line">    └── settings</span><br></pre></td></tr></table></figure>

<p><em>注意：<code>40:80:E1:50:1D:47</code>是本地蓝牙适配器的MAC地址作为目录名称。若本地存在多个蓝牙适配器，那么就有多个这样的目录。</em></p>
<p><strong>执行扫描、配对、连接后的存储目录结构：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bluetooth/</span><br><span class="line">└── 40:80:E1:50:1D:47</span><br><span class="line">    ├── attributes</span><br><span class="line">    ├── cache</span><br><span class="line">    │   ├── 08:F0:B6:58:2E:90</span><br><span class="line">    │   ├── 18:C2:3C:31:3C:3A</span><br><span class="line">    │   ├── 23:07:04:00:03:C0</span><br><span class="line">    │   ├── 3A:29:EC:03:27:D0</span><br><span class="line">    │   ├── 44:17:93:CD:E4:36</span><br><span class="line">    │   ├── 60:F4:3A:A6:4D:E1</span><br><span class="line">    │   ├── 64:68:76:FC:B5:E3</span><br><span class="line">    │   ├── 88:4A:18:88:9F:F5</span><br><span class="line">    │   ├── 8C:F6:81:FC:9D:F1</span><br><span class="line">    │   ├── 90:F0:52:BE:DC:6E</span><br><span class="line">    │   ├── 98:8D:46:1A:60:20</span><br><span class="line">    │   ├── AC:D8:29:09:18:B6</span><br><span class="line">    │   ├── B4:8C:9D:06:D4:83</span><br><span class="line">    │   ├── B8:14:4D:73:52:99</span><br><span class="line">    │   ├── C8:94:02:E1:6D:C4</span><br><span class="line">    │   ├── D0:62:2C:13:2E:8F</span><br><span class="line">    │   ├── E4:19:C1:E4:35:21</span><br><span class="line">    │   └── F4:4E:FD:7A:71:09</span><br><span class="line">    ├── F4:4E:FD:7A:71:09</span><br><span class="line">    │   ├── attributes</span><br><span class="line">    │   └── info</span><br><span class="line">    └── settings</span><br></pre></td></tr></table></figure>

<p><em>注意：执行扫描操作后，<code>cache</code> 目录就被创建，同时扫描到的蓝牙设备也会以其MAC地址名称作为文件名。若配对、连接指定蓝牙设备成功后，则会创建以其MAC地址名称作为目录名，而且该目录下也会创建 attribute 和 info两个文件。</em></p>
<p>cache目录下蓝牙设备文件被创建的位置，通过device_store_cached_name()函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">device_store_cached_name</span><span class="params">(<span class="keyword">struct</span> btd_device *dev, <span class="type">const</span> <span class="type">char</span> *name)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> filename[PATH_MAX];</span><br><span class="line">	<span class="type">char</span> d_addr[<span class="number">18</span>];</span><br><span class="line">	GKeyFile *key_file;</span><br><span class="line">	GError *gerr = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="type">char</span> *data;</span><br><span class="line">	<span class="type">char</span> *data_old;</span><br><span class="line">	gsize length = <span class="number">0</span>;</span><br><span class="line">	gsize length_old = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (device_address_is_private(dev)) &#123;</span><br><span class="line">		DBG(<span class="string">&quot;Can&#x27;t store name for private addressed device %s&quot;</span>,</span><br><span class="line">								dev-&gt;path);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ba2str(&amp;dev-&gt;bdaddr, d_addr);</span><br><span class="line">	create_filename(filename, PATH_MAX, <span class="string">&quot;/%s/cache/%s&quot;</span>,</span><br><span class="line">			btd_adapter_get_storage_dir(dev-&gt;adapter), d_addr);</span><br><span class="line">	create_file(filename, <span class="number">0600</span>);</span><br><span class="line"></span><br><span class="line">	key_file = g_key_file_new();</span><br><span class="line">	<span class="keyword">if</span> (!g_key_file_load_from_file(key_file, filename, <span class="number">0</span>, &amp;gerr)) &#123;</span><br><span class="line">		error(<span class="string">&quot;Unable to load key file from %s: (%s)&quot;</span>, filename,</span><br><span class="line">								gerr-&gt;message);</span><br><span class="line">		g_clear_error(&amp;gerr);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	data_old = g_key_file_to_data(key_file, &amp;length_old, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	g_key_file_set_string(key_file, <span class="string">&quot;General&quot;</span>, <span class="string">&quot;Name&quot;</span>, name);</span><br><span class="line"></span><br><span class="line">	data = g_key_file_to_data(key_file, &amp;length, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ((length != length_old) || (<span class="built_in">memcmp</span>(data, data_old, length))) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!g_file_set_contents(filename, data, length, &amp;gerr)) &#123;</span><br><span class="line">			error(<span class="string">&quot;Unable set contents for %s: (%s)&quot;</span>, filename,</span><br><span class="line">								gerr-&gt;message);</span><br><span class="line">			g_clear_error(&amp;gerr);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	g_free(data);</span><br><span class="line">	g_free(data_old);</span><br><span class="line"></span><br><span class="line">	g_key_file_free(key_file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="settings文件"><a href="#settings文件" class="headerlink" title="settings文件"></a>settings文件</h3><p>settings文件包含了适配器的一个组的信息，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[General]</span><br><span class="line">Discoverable=<span class="literal">false</span></span><br><span class="line">Alias=SCO_AUDIO1</span><br></pre></td></tr></table></figure>

<ul>
<li>Alias：适配器的别名，默认值是主机名</li>
<li>Discoverable：适配器的可被发现的属性</li>
</ul>
<p>settings文件以及内容被创建位置，通过 <code>src/adapter.c</code> 中的store_adapter_info()函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">store_adapter_info</span><span class="params">(<span class="keyword">struct</span> btd_adapter *adapter)</span></span><br><span class="line">&#123;</span><br><span class="line">	GKeyFile *key_file;</span><br><span class="line">	GError *gerr = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="type">char</span> filename[PATH_MAX];</span><br><span class="line">	<span class="type">char</span> *str;</span><br><span class="line">	gsize length = <span class="number">0</span>;</span><br><span class="line">	gboolean discoverable;</span><br><span class="line"></span><br><span class="line">	key_file = g_key_file_new();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (adapter-&gt;pairable_timeout != btd_opts.pairto)</span><br><span class="line">		g_key_file_set_integer(key_file, <span class="string">&quot;General&quot;</span>, <span class="string">&quot;PairableTimeout&quot;</span>,</span><br><span class="line">					adapter-&gt;pairable_timeout);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ((adapter-&gt;current_settings &amp; MGMT_SETTING_DISCOVERABLE) &amp;&amp;</span><br><span class="line">						!adapter-&gt;discoverable_timeout)</span><br><span class="line">		discoverable = TRUE;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		discoverable = FALSE;</span><br><span class="line"></span><br><span class="line">	g_key_file_set_boolean(key_file, <span class="string">&quot;General&quot;</span>, <span class="string">&quot;Discoverable&quot;</span>,</span><br><span class="line">							discoverable);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (adapter-&gt;discoverable_timeout != btd_opts.discovto)</span><br><span class="line">		g_key_file_set_integer(key_file, <span class="string">&quot;General&quot;</span>,</span><br><span class="line">					<span class="string">&quot;DiscoverableTimeout&quot;</span>,</span><br><span class="line">					adapter-&gt;discoverable_timeout);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (adapter-&gt;stored_alias)</span><br><span class="line">		g_key_file_set_string(key_file, <span class="string">&quot;General&quot;</span>, <span class="string">&quot;Alias&quot;</span>,</span><br><span class="line">							adapter-&gt;stored_alias);</span><br><span class="line"></span><br><span class="line">	create_filename(filename, PATH_MAX, <span class="string">&quot;/%s/settings&quot;</span>,</span><br><span class="line">					btd_adapter_get_storage_dir(adapter));</span><br><span class="line">	create_file(filename, <span class="number">0600</span>);</span><br><span class="line"></span><br><span class="line">	str = g_key_file_to_data(key_file, &amp;length, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (!g_file_set_contents(filename, str, length, &amp;gerr)) &#123;</span><br><span class="line">		error(<span class="string">&quot;Unable set contents for %s: (%s)&quot;</span>, filename,</span><br><span class="line">								gerr-&gt;message);</span><br><span class="line">		g_error_free(gerr);</span><br><span class="line">	&#125;</span><br><span class="line">	g_free(str);</span><br><span class="line"></span><br><span class="line">	g_key_file_free(key_file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="info文件"><a href="#info文件" class="headerlink" title="info文件"></a>info文件</h3><p>info文件包含了与蓝牙设备关联的多组信息，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[General]</span><br><span class="line">Name=JBL ROCK</span><br><span class="line">Class=0x240404</span><br><span class="line">SupportedTechnologies=BR/EDR;</span><br><span class="line">Trusted=<span class="literal">false</span></span><br><span class="line">Blocked=<span class="literal">false</span></span><br><span class="line">Services=0000110b-0000-1000-8000-00805f9b34fb;0000110c-0000-1000-8000-00805f9b34fb;0000110e-0000-1000-8000-00805f9b34fb;0000111e-0000-1000-8000-00805f9b34fb;</span><br><span class="line"></span><br><span class="line">[LinkKey]</span><br><span class="line">Key=2BB06C500CC2926271D2B31687931BFF</span><br><span class="line">Type=4</span><br><span class="line">PINLength=0</span><br></pre></td></tr></table></figure>

<p>info文件的创建位置：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">store_link_key</span><span class="params">(<span class="keyword">struct</span> btd_adapter *adapter,</span></span><br><span class="line"><span class="params">				<span class="keyword">struct</span> btd_device *device, <span class="type">const</span> <span class="type">uint8_t</span> *key,</span></span><br><span class="line"><span class="params">				<span class="type">uint8_t</span> type, <span class="type">uint8_t</span> pin_length)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> device_addr[<span class="number">18</span>];</span><br><span class="line">	<span class="type">char</span> filename[PATH_MAX];</span><br><span class="line">	GKeyFile *key_file;</span><br><span class="line">	GError *gerr = <span class="literal">NULL</span>;</span><br><span class="line">	gsize length = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> key_str[<span class="number">33</span>];</span><br><span class="line">	<span class="type">char</span> *str;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">	ba2str(device_get_address(device), device_addr);</span><br><span class="line"></span><br><span class="line">	create_filename(filename, PATH_MAX, <span class="string">&quot;/%s/%s/info&quot;</span>,</span><br><span class="line">			btd_adapter_get_storage_dir(adapter), device_addr);</span><br><span class="line">	create_file(filename, <span class="number">0600</span>);</span><br><span class="line"></span><br><span class="line">	key_file = g_key_file_new();</span><br><span class="line">	<span class="keyword">if</span> (!g_key_file_load_from_file(key_file, filename, <span class="number">0</span>, &amp;gerr)) &#123;</span><br><span class="line">		error(<span class="string">&quot;Unable to load key file from %s: (%s)&quot;</span>, filename,</span><br><span class="line">								gerr-&gt;message);</span><br><span class="line">		g_error_free(gerr);</span><br><span class="line">		g_key_file_free(key_file);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">		<span class="built_in">sprintf</span>(key_str + (i * <span class="number">2</span>), <span class="string">&quot;%2.2X&quot;</span>, key[i]);</span><br><span class="line"></span><br><span class="line">	g_key_file_set_string(key_file, <span class="string">&quot;LinkKey&quot;</span>, <span class="string">&quot;Key&quot;</span>, key_str);</span><br><span class="line"></span><br><span class="line">	g_key_file_set_integer(key_file, <span class="string">&quot;LinkKey&quot;</span>, <span class="string">&quot;Type&quot;</span>, type);</span><br><span class="line">	g_key_file_set_integer(key_file, <span class="string">&quot;LinkKey&quot;</span>, <span class="string">&quot;PINLength&quot;</span>, pin_length);</span><br><span class="line"></span><br><span class="line">	str = g_key_file_to_data(key_file, &amp;length, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (!g_file_set_contents(filename, str, length, &amp;gerr)) &#123;</span><br><span class="line">		error(<span class="string">&quot;Unable set contents for %s: (%s)&quot;</span>, filename,</span><br><span class="line">								gerr-&gt;message);</span><br><span class="line">		g_error_free(gerr);</span><br><span class="line">	&#125;</span><br><span class="line">	g_free(str);</span><br><span class="line"></span><br><span class="line">	g_key_file_free(key_file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="方法实现"><a href="#方法实现" class="headerlink" title="方法实现"></a>方法实现</h2><p>在 <code>org.bluez.Adapter1</code> 接口文档中提供了三个接口函数：</p>
<ul>
<li>StartDiscovery()</li>
<li>StopDiscovery()</li>
<li>RemoveDevice()</li>
</ul>
<p>当 <code>StartDiscovery()</code> 函数被执行时，cache目录下就会有新的蓝牙设备文件被创建，而当 <code>StopDiscovery()</code> 函数被执行时，cache目录下就会有蓝牙设备文件被删除，<code>RemoveDevice()</code> 函数被执行时，<code>&lt;controller address&gt;</code> 目录下有已配对或已连接过的蓝牙设备文件夹会被删除。</p>
<p><em>注意：当蓝牙设备被自动移除时，cache目录的蓝牙设备文件部分还是保留，为什么会保留呢？</em></p>
<p><code>src/adapter.c</code> 关于适配器相关的方法实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 适配器注册的方法</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> GDBusMethodTable adapter_methods[] = &#123;</span><br><span class="line">	&#123; GDBUS_ASYNC_METHOD(<span class="string">&quot;StartDiscovery&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, start_discovery) &#125;,</span><br><span class="line">	&#123; GDBUS_METHOD(<span class="string">&quot;SetDiscoveryFilter&quot;</span>,</span><br><span class="line">				GDBUS_ARGS(&#123; <span class="string">&quot;properties&quot;</span>, <span class="string">&quot;a&#123;sv&#125;&quot;</span> &#125;), <span class="literal">NULL</span>,</span><br><span class="line">				set_discovery_filter) &#125;,</span><br><span class="line">	&#123; GDBUS_ASYNC_METHOD(<span class="string">&quot;StopDiscovery&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, stop_discovery) &#125;,</span><br><span class="line">	&#123; GDBUS_ASYNC_METHOD(<span class="string">&quot;RemoveDevice&quot;</span>,</span><br><span class="line">			GDBUS_ARGS(&#123; <span class="string">&quot;device&quot;</span>, <span class="string">&quot;o&quot;</span> &#125;), <span class="literal">NULL</span>, remove_device) &#125;,</span><br><span class="line">	&#123; GDBUS_METHOD(<span class="string">&quot;GetDiscoveryFilters&quot;</span>, <span class="literal">NULL</span>,</span><br><span class="line">			GDBUS_ARGS(&#123; <span class="string">&quot;filters&quot;</span>, <span class="string">&quot;as&quot;</span> &#125;),</span><br><span class="line">			get_discovery_filters) &#125;,</span><br><span class="line">	&#123; GDBUS_EXPERIMENTAL_ASYNC_METHOD(<span class="string">&quot;ConnectDevice&quot;</span>,</span><br><span class="line">				GDBUS_ARGS(&#123; <span class="string">&quot;properties&quot;</span>, <span class="string">&quot;a&#123;sv&#125;&quot;</span> &#125;), <span class="literal">NULL</span>,</span><br><span class="line">				connect_device) &#125;,</span><br><span class="line">	&#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配器注册的属性</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> GDBusPropertyTable adapter_properties[] = &#123;</span><br><span class="line">	&#123; <span class="string">&quot;Address&quot;</span>, <span class="string">&quot;s&quot;</span>, property_get_address &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;AddressType&quot;</span>, <span class="string">&quot;s&quot;</span>, property_get_address_type &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Name&quot;</span>, <span class="string">&quot;s&quot;</span>, property_get_name &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Alias&quot;</span>, <span class="string">&quot;s&quot;</span>, property_get_alias, property_set_alias &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Class&quot;</span>, <span class="string">&quot;u&quot;</span>, property_get_class &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Powered&quot;</span>, <span class="string">&quot;b&quot;</span>, property_get_powered, property_set_powered &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;PowerState&quot;</span>, <span class="string">&quot;s&quot;</span>, property_get_power_state &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Discoverable&quot;</span>, <span class="string">&quot;b&quot;</span>, property_get_discoverable,</span><br><span class="line">					property_set_discoverable &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;DiscoverableTimeout&quot;</span>, <span class="string">&quot;u&quot;</span>, property_get_discoverable_timeout,</span><br><span class="line">					property_set_discoverable_timeout &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Pairable&quot;</span>, <span class="string">&quot;b&quot;</span>, property_get_pairable, property_set_pairable &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;PairableTimeout&quot;</span>, <span class="string">&quot;u&quot;</span>, property_get_pairable_timeout,</span><br><span class="line">					property_set_pairable_timeout &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Discovering&quot;</span>, <span class="string">&quot;b&quot;</span>, property_get_discovering &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;UUIDs&quot;</span>, <span class="string">&quot;as&quot;</span>, property_get_uuids &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Modalias&quot;</span>, <span class="string">&quot;s&quot;</span>, property_get_modalias, <span class="literal">NULL</span>,</span><br><span class="line">					property_exists_modalias &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Roles&quot;</span>, <span class="string">&quot;as&quot;</span>, property_get_roles &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;ExperimentalFeatures&quot;</span>, <span class="string">&quot;as&quot;</span>, property_get_experimental, <span class="literal">NULL</span>,</span><br><span class="line">					property_experimental_exists &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Manufacturer&quot;</span>, <span class="string">&quot;q&quot;</span>, property_get_manufacturer &#125;,</span><br><span class="line">	&#123; <span class="string">&quot;Version&quot;</span>, <span class="string">&quot;y&quot;</span>, property_get_version &#125;,</span><br><span class="line">	&#123; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="StartDiscovery方法的实现"><a href="#StartDiscovery方法的实现" class="headerlink" title="StartDiscovery方法的实现"></a>StartDiscovery方法的实现</h3><p>在src&#x2F;adapter.c给出了StartDiscovery方法的实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> DBusMessage *<span class="title function_">start_discovery</span><span class="params">(DBusConnection *conn,</span></span><br><span class="line"><span class="params">					DBusMessage *msg, <span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">btd_adapter</span> *<span class="title">adapter</span> =</span> user_data;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *sender = dbus_message_get_sender(msg);</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">discovery_client</span> *<span class="title">client</span>;</span></span><br><span class="line">	<span class="type">bool</span> is_discovering;</span><br><span class="line">	<span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">	DBG(<span class="string">&quot;sender %s&quot;</span>, sender);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!btd_adapter_get_powered(adapter))</span><br><span class="line">		<span class="keyword">return</span> btd_error_not_ready(msg);</span><br><span class="line"></span><br><span class="line">	is_discovering = get_discovery_client(adapter, sender, &amp;client);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Every client can only start one discovery, if the client</span></span><br><span class="line"><span class="comment">	 * already started a discovery then return an error.</span></span><br><span class="line"><span class="comment">	 * 每一个客户端仅能启动一次扫描，如果客户端早已启动了扫描，那么此时返回一个错误</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (is_discovering)</span><br><span class="line">		<span class="keyword">return</span> btd_error_busy(msg);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * If there was pre-set filter, just reconnect it to discovery_list,</span></span><br><span class="line"><span class="comment">	 * and trigger scan.</span></span><br><span class="line"><span class="comment">	 * 如果有预设置的过滤器，那么只是到扫描列表去重连它并触发扫描</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (client) &#123;</span><br><span class="line">		<span class="keyword">if</span> (client-&gt;msg)</span><br><span class="line">			<span class="keyword">return</span> btd_error_busy(msg);</span><br><span class="line"></span><br><span class="line">		adapter-&gt;set_filter_list = g_slist_remove(</span><br><span class="line">					     adapter-&gt;set_filter_list, client);</span><br><span class="line">		adapter-&gt;discovery_list = g_slist_prepend(</span><br><span class="line">					      adapter-&gt;discovery_list, client);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">goto</span> done;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	client = g_new0(<span class="keyword">struct</span> discovery_client, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	client-&gt;adapter = adapter;</span><br><span class="line">	client-&gt;owner = g_strdup(sender);</span><br><span class="line">	client-&gt;discovery_filter = <span class="literal">NULL</span>;</span><br><span class="line">	client-&gt;watch = g_dbus_add_disconnect_watch(dbus_conn, sender,</span><br><span class="line">						discovery_disconnect, client,</span><br><span class="line">						<span class="literal">NULL</span>);</span><br><span class="line">	adapter-&gt;discovery_list = g_slist_prepend(adapter-&gt;discovery_list,</span><br><span class="line">								client);</span><br><span class="line"></span><br><span class="line">done:</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Just trigger the discovery here. In case an already running</span></span><br><span class="line"><span class="comment">	 * discovery in idle phase exists, it will be restarted right</span></span><br><span class="line"><span class="comment">	 * away.</span></span><br><span class="line"><span class="comment">	 * 只需在此处触发扫描。如果存在在空闲段运行的发现，它将立即重新启动扫描。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	err = update_discovery_filter(adapter);</span><br><span class="line">	<span class="keyword">if</span> (!err)</span><br><span class="line">		<span class="keyword">return</span> dbus_message_new_method_return(msg);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* If the discovery has to be started wait it complete to reply */</span></span><br><span class="line">	<span class="keyword">if</span> (err == -EINPROGRESS) &#123;</span><br><span class="line">		client-&gt;msg = dbus_message_ref(msg);</span><br><span class="line">		adapter-&gt;client = client;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> btd_error_failed(msg, strerror(-err));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="RemoveDevice方法的实现"><a href="#RemoveDevice方法的实现" class="headerlink" title="RemoveDevice方法的实现"></a>RemoveDevice方法的实现</h3><p>在src&#x2F;adapter.c给出了RemoveDevice方法的实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RemoveDevice方法的回调函数</span></span><br><span class="line"><span class="type">static</span> DBusMessage *<span class="title function_">remove_device</span><span class="params">(DBusConnection *conn,</span></span><br><span class="line"><span class="params">					DBusMessage *msg, <span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">btd_adapter</span> *<span class="title">adapter</span> =</span> user_data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">btd_device</span> *<span class="title">device</span>;</span></span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *path;</span><br><span class="line">	GSList *<span class="built_in">list</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// RemoveDevice方法传递的参数类型是一个路径对象</span></span><br><span class="line">	<span class="keyword">if</span> (dbus_message_get_args(msg, <span class="literal">NULL</span>, DBUS_TYPE_OBJECT_PATH, &amp;path,</span><br><span class="line">						DBUS_TYPE_INVALID) == FALSE)</span><br><span class="line">		<span class="keyword">return</span> btd_error_invalid_args(msg);</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 在链表中查找是否存在目标蓝牙设备</span></span><br><span class="line">	<span class="built_in">list</span> = g_slist_find_custom(adapter-&gt;devices, path, device_path_cmp);</span><br><span class="line">	<span class="keyword">if</span> (!<span class="built_in">list</span>)</span><br><span class="line">		<span class="keyword">return</span> btd_error_does_not_exist(msg);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 判断适配器Powered是否为TRUE，若为FALSE，则执行花括号里面的内容。</span></span><br><span class="line">	<span class="keyword">if</span> (!btd_adapter_get_powered(adapter))</span><br><span class="line">		<span class="keyword">return</span> btd_error_not_ready(msg);</span><br><span class="line"></span><br><span class="line">	device = <span class="built_in">list</span>-&gt;data;</span><br><span class="line"></span><br><span class="line">	btd_device_set_temporary(device, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 判断Device是否connected为TRUE，若为FALSE，则执行花括号里面的内容。</span></span><br><span class="line">	<span class="keyword">if</span> (!btd_device_is_connected(device)) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 适配器移除蓝牙设备，然后构造一条消息作为方法调用的应答</span></span><br><span class="line">		btd_adapter_remove_device(adapter, device);</span><br><span class="line">		<span class="keyword">return</span> dbus_message_new_method_return(msg);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 请求断开目标蓝牙设备的连接</span></span><br><span class="line">	device_request_disconnect(device, msg);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="StopDiscovery方法的实现"><a href="#StopDiscovery方法的实现" class="headerlink" title="StopDiscovery方法的实现"></a>StopDiscovery方法的实现</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// StopDiscovery方法的回调函数</span></span><br><span class="line"><span class="type">static</span> DBusMessage *<span class="title function_">stop_discovery</span><span class="params">(DBusConnection *conn,</span></span><br><span class="line"><span class="params">					DBusMessage *msg, <span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">btd_adapter</span> *<span class="title">adapter</span> =</span> user_data;</span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *sender = dbus_message_get_sender(msg);</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">discovery_client</span> *<span class="title">client</span>;</span></span><br><span class="line">	GSList *<span class="built_in">list</span>;</span><br><span class="line">	<span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">	DBG(<span class="string">&quot;sender %s&quot;</span>, sender);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 检查适配器的Powered是否为TRUE</span></span><br><span class="line">	<span class="keyword">if</span> (!btd_adapter_get_powered(adapter))</span><br><span class="line">		<span class="keyword">return</span> btd_error_not_ready(msg);</span><br><span class="line">	<span class="comment">// 检查发送者是否在发现列表中，即该发送者之前是否发送过StartDiscovery方法</span></span><br><span class="line">	<span class="built_in">list</span> = g_slist_find_custom(adapter-&gt;discovery_list, sender,</span><br><span class="line">						compare_sender);</span><br><span class="line">	<span class="keyword">if</span> (!<span class="built_in">list</span>)</span><br><span class="line">		<span class="keyword">return</span> btd_error_failed(msg, <span class="string">&quot;No discovery started&quot;</span>);</span><br><span class="line"></span><br><span class="line">	client = <span class="built_in">list</span>-&gt;data;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 检查客户端是否有了待处理的消息</span></span><br><span class="line">	<span class="keyword">if</span> (client-&gt;msg)</span><br><span class="line">		<span class="keyword">return</span> btd_error_busy(msg);</span><br><span class="line">	<span class="comment">// 调用扫描停止函数</span></span><br><span class="line">	err = discovery_stop(client);</span><br><span class="line">	<span class="keyword">switch</span> (err) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">		<span class="keyword">return</span> dbus_message_new_method_return(msg);</span><br><span class="line">	<span class="keyword">case</span> -EINPROGRESS:</span><br><span class="line">		client-&gt;msg = dbus_message_ref(msg);</span><br><span class="line">		adapter-&gt;client = client;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">return</span> btd_error_failed(msg, strerror(-err));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="临时定时器"><a href="#临时定时器" class="headerlink" title="临时定时器"></a>临时定时器</h3><p>在&#x2F;src&#x2F;main.conf文件中，有关于扫描到的设备临时（temporary）时间定义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[General]</span><br><span class="line"></span><br><span class="line"># How long to keep temporary devices around</span><br><span class="line"># The value is in seconds. Default is 30.</span><br><span class="line"># 0 = disable timer, i.e. never keep temporary devices</span><br><span class="line">#TemporaryTimeout = 30</span><br></pre></td></tr></table></figure>

<p>在&#x2F;src&#x2F;main.c文件中，关于临时（temporary）时间也有宏定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_PAIRABLE_TIMEOUT           0 <span class="comment">/* disabled */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_DISCOVERABLE_TIMEOUT     180 <span class="comment">/* 3 minutes */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_TEMPORARY_TIMEOUT         30 <span class="comment">/* 30 seconds */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_NAME_REQUEST_RETRY_DELAY 300 <span class="comment">/* 5 minutes */</span></span></span><br></pre></td></tr></table></figure>



<p>&#x2F;src&#x2F;device.c源文件关于临时（temporary）定时器的记录</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">device_disappeared</span><span class="params">(gpointer user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">btd_device</span> *<span class="title">dev</span> =</span> user_data;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* If there are services connected restart the timer to give more time</span></span><br><span class="line"><span class="comment">	 * for the service to either complete the connection or disconnect.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (device_service_connected(dev))</span><br><span class="line">		<span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">	dev-&gt;temporary_timer = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">// here adapter remove device</span></span><br><span class="line">	btd_adapter_remove_device(dev-&gt;adapter, dev);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">set_temporary_timer</span><span class="params">(<span class="keyword">struct</span> btd_device *dev, <span class="type">unsigned</span> <span class="type">int</span> timeout)</span></span><br><span class="line">&#123;</span><br><span class="line">	clear_temporary_timer(dev);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!timeout)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	dev-&gt;temporary_timer = timeout_add_seconds(timeout, device_disappeared,</span><br><span class="line">								dev, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">btd_device_set_temporary</span><span class="params">(<span class="keyword">struct</span> btd_device *device, <span class="type">bool</span> temporary)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (!device)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (device-&gt;temporary == temporary)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (device_address_is_private(device))</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	DBG(<span class="string">&quot;temporary %d&quot;</span>, temporary);</span><br><span class="line"></span><br><span class="line">	device-&gt;temporary = temporary;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (temporary) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (device-&gt;bredr)</span><br><span class="line">			adapter_accept_list_remove(device-&gt;adapter, device);</span><br><span class="line">		adapter_connect_list_remove(device-&gt;adapter, device);</span><br><span class="line">		<span class="keyword">if</span> (device-&gt;auto_connect) &#123;</span><br><span class="line">			device-&gt;disable_auto_connect = TRUE;</span><br><span class="line">			device_set_auto_connect(device, FALSE);</span><br><span class="line">		&#125;</span><br><span class="line">		set_temporary_timer(device, btd_opts.tmpto);<span class="comment">// here</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		clear_temporary_timer(device);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (device-&gt;bredr)</span><br><span class="line">		adapter_accept_list_add(device-&gt;adapter, device);</span><br><span class="line"></span><br><span class="line">	store_device_info(device);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* attributes were not stored when resolved if device was temporary */</span></span><br><span class="line">	<span class="keyword">if</span> (device-&gt;bdaddr_type != BDADDR_BREDR &amp;&amp;</span><br><span class="line">			device-&gt;le_state.svc_resolved &amp;&amp;</span><br><span class="line">			g_slist_length(device-&gt;primaries) != <span class="number">0</span>)</span><br><span class="line">		store_services(device);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>btd_device_set_temporary()函数的参数temporary的值为 true时，device将被标记为临时设备，并通过 <code>set_temporary_timer(device, btd_opts.tmpto)</code> 启动了一个临时的定时器。</p>
<p>&#x2F;src&#x2F;adapter.c关于临时（temporary）定时器的使用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">btd_adapter_remove_device</span><span class="params">(<span class="keyword">struct</span> btd_adapter *adapter,</span></span><br><span class="line"><span class="params">				<span class="keyword">struct</span> btd_device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">	GList *l;</span><br><span class="line"></span><br><span class="line">	adapter-&gt;connect_list = g_slist_remove(adapter-&gt;connect_list, dev);</span><br><span class="line"></span><br><span class="line">	adapter_remove_device(adapter, dev);</span><br><span class="line">	btd_adv_monitor_device_remove(adapter-&gt;adv_monitor_manager, dev);</span><br><span class="line"></span><br><span class="line">	adapter-&gt;discovery_found = g_slist_remove(adapter-&gt;discovery_found,</span><br><span class="line">									dev);</span><br><span class="line"></span><br><span class="line">	adapter-&gt;connections = g_slist_remove(adapter-&gt;connections, dev);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (adapter-&gt;connect_le == dev)</span><br><span class="line">		adapter-&gt;connect_le = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	l = adapter-&gt;auths-&gt;head;</span><br><span class="line">	<span class="keyword">while</span> (l != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">service_auth</span> *<span class="title">auth</span> =</span> l-&gt;data;</span><br><span class="line">		GList *next = g_list_next(l);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (auth-&gt;device != dev) &#123;</span><br><span class="line">			l = next;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		g_queue_delete_link(adapter-&gt;auths, l);</span><br><span class="line">		l = next;</span><br><span class="line"></span><br><span class="line">		service_auth_cancel(auth);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	device_remove(dev, TRUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">discovery_cleanup</span><span class="params">(<span class="keyword">struct</span> btd_adapter *adapter, <span class="type">int</span> timeout)</span></span><br><span class="line">&#123;</span><br><span class="line">	GSList *l, *next;</span><br><span class="line"></span><br><span class="line">	adapter-&gt;discovery_type = <span class="number">0x00</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (adapter-&gt;discovery_idle_timeout &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		timeout_remove(adapter-&gt;discovery_idle_timeout);</span><br><span class="line">		adapter-&gt;discovery_idle_timeout = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	g_slist_free_full(adapter-&gt;discovery_found,</span><br><span class="line">						invalidate_rssi_and_tx_power);</span><br><span class="line">	adapter-&gt;discovery_found = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!adapter-&gt;devices)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (l = adapter-&gt;devices; l != <span class="literal">NULL</span>; l = next) &#123;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">btd_device</span> *<span class="title">dev</span> =</span> l-&gt;data;</span><br><span class="line"></span><br><span class="line">		next = g_slist_next(l);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (device_is_temporary(dev) &amp;&amp; !device_is_connectable(dev)</span><br><span class="line">			&amp;&amp; !btd_device_is_connected(dev))</span><br><span class="line">			btd_adapter_remove_device(adapter, dev); <span class="comment">// here</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">remove_temporary_devices</span><span class="params">(<span class="keyword">struct</span> btd_adapter *adapter)</span></span><br><span class="line">&#123;</span><br><span class="line">	GSList *l, *next;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (l = adapter-&gt;devices; l; l = next) &#123;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">btd_device</span> *<span class="title">dev</span> =</span> l-&gt;data;</span><br><span class="line"></span><br><span class="line">		next = g_slist_next(l);</span><br><span class="line">		<span class="keyword">if</span> (device_is_temporary(dev))</span><br><span class="line">			btd_adapter_remove_device(adapter, dev); <span class="comment">// here</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> DBusMessage *<span class="title function_">remove_device</span><span class="params">(DBusConnection *conn,</span></span><br><span class="line"><span class="params">					DBusMessage *msg, <span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">btd_adapter</span> *<span class="title">adapter</span> =</span> user_data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">btd_device</span> *<span class="title">device</span>;</span></span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *path;</span><br><span class="line">	GSList *<span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (dbus_message_get_args(msg, <span class="literal">NULL</span>, DBUS_TYPE_OBJECT_PATH, &amp;path,</span><br><span class="line">						DBUS_TYPE_INVALID) == FALSE)</span><br><span class="line">		<span class="keyword">return</span> btd_error_invalid_args(msg);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">list</span> = g_slist_find_custom(adapter-&gt;devices, path, device_path_cmp);</span><br><span class="line">	<span class="keyword">if</span> (!<span class="built_in">list</span>)</span><br><span class="line">		<span class="keyword">return</span> btd_error_does_not_exist(msg);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!btd_adapter_get_powered(adapter))</span><br><span class="line">		<span class="keyword">return</span> btd_error_not_ready(msg);</span><br><span class="line"></span><br><span class="line">	device = <span class="built_in">list</span>-&gt;data;</span><br><span class="line"></span><br><span class="line">	btd_device_set_temporary(device, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!btd_device_is_connected(device)) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// here adapter remove device</span></span><br><span class="line">		btd_adapter_remove_device(adapter, device);</span><br><span class="line">		<span class="keyword">return</span> dbus_message_new_method_return(msg);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	device_request_disconnect(device, msg);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是最终的问题还是没有得到解决：bluetoothd程序接收到客户端（例如：bluetoothctl）的请求： <code>StartDiscovery</code> 方法时，蓝牙设备被发现后，通过什么样的方式通知了客户端呢？同样的，客户端发送 <code>RemoveDevice</code> 方法时，bluetoothd又是通过什么方式告知客户端？最后一点，当附近设备被扫描到后，会作为一个临时设备，当临时时间最大时间到达后，在哪里执行删除临时设备操作，以及删除临时设备后，以什么方式通知客户端？</p>
<h2 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h2><p>通过使用bluez提供的gdbus接口编写了一个客户端（从这边文章可以得知：<code>&#123;% post_link 'bluetoothctl-client-tool' %&#125;</code> ），并且为了测试连接的稳定性编译了一个自动化测试函数：</p>
<ul>
<li>第一步：<code>bt_open()</code> 打开蓝牙并进行初始化操作</li>
<li>第二步：<code>bt_start_discovery()</code> 开始执行扫描操作</li>
<li>第三步：进入while() 循环体，完成指定的连接次数<ul>
<li>等待目标蓝牙设备被扫描到</li>
<li>连接目标蓝牙设备</li>
<li>移除目标蓝牙设备，并进入下一轮循环体</li>
</ul>
</li>
<li>第四步：退出while() 循环体，<code>bt_cancel_discovery()</code> 停止扫描操作</li>
<li>第五步：<code>bt_close()</code> 关闭蓝牙并释放相关的资源</li>
</ul>
<p>执行测试次数为100次，总会出现那么几次以上的连接超时失败：<code>Timeout was reached</code>。查看日志，发现执行connect操作后，立即出现了删除临时设备的操作（包括目标蓝牙设备），接下来就是连接超时报错了。</p>
<p>如果没有扫描到目标蓝牙设备，直接去连接，则会报这个错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GDBus.Error:org.freedesktop.DBus.Error.UnknownObject: Method <span class="string">&quot;Connect&quot;</span> with signature <span class="string">&quot;&quot;</span> on interface <span class="string">&quot;org.bluez.Device1&quot;</span> doesn<span class="string">&#x27;t exist</span></span><br></pre></td></tr></table></figure>

<p><strong>所以关键的问题是找到执行connect操作会不会导致bluetoothd进程执行清理临时设备操作！</strong></p>
<p>查询 <code>org.bluez.Device1</code> 的 Connect 方法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> GDBusMethodTable device_methods[] = &#123;</span><br><span class="line">	&#123; GDBUS_ASYNC_METHOD(<span class="string">&quot;Disconnect&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, dev_disconnect) &#125;,</span><br><span class="line">	&#123; GDBUS_ASYNC_METHOD(<span class="string">&quot;Connect&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, dev_connect) &#125;,</span><br><span class="line">	&#123; GDBUS_ASYNC_METHOD(<span class="string">&quot;ConnectProfile&quot;</span>, GDBUS_ARGS(&#123; <span class="string">&quot;UUID&quot;</span>, <span class="string">&quot;s&quot;</span> &#125;),</span><br><span class="line">						<span class="literal">NULL</span>, connect_profile) &#125;,</span><br><span class="line">	&#123; GDBUS_ASYNC_METHOD(<span class="string">&quot;DisconnectProfile&quot;</span>, GDBUS_ARGS(&#123; <span class="string">&quot;UUID&quot;</span>, <span class="string">&quot;s&quot;</span> &#125;),</span><br><span class="line">						<span class="literal">NULL</span>, disconnect_profile) &#125;,</span><br><span class="line">	&#123; GDBUS_ASYNC_METHOD(<span class="string">&quot;Pair&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, pair_device) &#125;,</span><br><span class="line">	&#123; GDBUS_METHOD(<span class="string">&quot;CancelPairing&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, cancel_pairing) &#125;,</span><br><span class="line">	&#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Connect方法的回调函数</span></span><br><span class="line"><span class="type">static</span> DBusMessage *<span class="title function_">dev_connect</span><span class="params">(DBusConnection *conn, DBusMessage *msg,</span></span><br><span class="line"><span class="params">							<span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">btd_device</span> *<span class="title">dev</span> =</span> user_data;</span><br><span class="line">	<span class="type">uint8_t</span> bdaddr_type;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (dev-&gt;bredr_state.connected) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * Check if services have been resolved and there is at least</span></span><br><span class="line"><span class="comment">		 * one connected before switching to connect LE.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">if</span> (dev-&gt;bredr_state.svc_resolved &amp;&amp;</span><br><span class="line">			find_service_with_state(dev-&gt;services,</span><br><span class="line">						BTD_SERVICE_STATE_CONNECTED))</span><br><span class="line">			bdaddr_type = dev-&gt;bdaddr_type;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			bdaddr_type = BDADDR_BREDR;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (dev-&gt;le_state.connected &amp;&amp; dev-&gt;bredr)</span><br><span class="line">		bdaddr_type = BDADDR_BREDR;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		bdaddr_type = select_conn_bearer(dev);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (bdaddr_type != BDADDR_BREDR) &#123;</span><br><span class="line">		<span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (dev-&gt;le_state.connected)</span><br><span class="line">			<span class="keyword">return</span> dbus_message_new_method_return(msg);</span><br><span class="line"></span><br><span class="line">		btd_device_set_temporary(dev, <span class="literal">false</span>);<span class="comment">// 与临时设备相关的函数，移除缓存定时器</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (dev-&gt;disable_auto_connect) &#123;</span><br><span class="line">			dev-&gt;disable_auto_connect = FALSE;</span><br><span class="line">			device_set_auto_connect(dev, TRUE);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		err = device_connect_le(dev);</span><br><span class="line">		<span class="keyword">if</span> (err &lt; <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> btd_error_failed(msg, strerror(-err));</span><br><span class="line"></span><br><span class="line">		dev-&gt;connect = dbus_message_ref(msg);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> connect_profiles(dev, bdaddr_type, msg, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然不能100%确认设备删除的时间点，但是我查到了相关调用关系，最终设备被移除时一定会调用函数 <code>g_dbus_unregister_interface()</code> ，那么我需要向上找出关于这个函数被调用的位置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># src/adapter.c</span><br><span class="line"># 第一个调用方向</span><br><span class="line">g_dbus_unregister_interface() --&gt; btd_device_unref() --&gt; device_remove()  </span><br><span class="line">--&gt; btd_adapter_remove_device() --&gt; remove_temporary_devices()</span><br><span class="line"></span><br><span class="line"># 第二个调用方向 </span><br><span class="line">g_dbus_unregister_interface() --&gt; btd_device_unref() --&gt; device_remove()  </span><br><span class="line">--&gt; btd_adapter_remove_device() --&gt;  discovery_cleanup() --&gt; discovery_remove() </span><br><span class="line">--&gt; start_discovery_complete() --&gt; start_discovery_timeout() </span><br><span class="line">--&gt; trigger_start_discovery() --&gt; discovering_callback()</span><br><span class="line"></span><br><span class="line"># 第三个调用方向</span><br><span class="line">g_dbus_unregister_interface() --&gt; btd_device_unref() --&gt; device_remove() </span><br><span class="line">--&gt; btd_adapter_remove_device() --&gt; remove_device()</span><br><span class="line"></span><br><span class="line"># src/device.c中btd_adapter_remove_device()的调用关系</span><br><span class="line">btd_adapter_remove_device() --&gt; device_disappeared() --&gt; set_temporary_timer() </span><br><span class="line">--&gt; btd_device_set_temporary() --&gt; dev_connect()</span><br></pre></td></tr></table></figure>



<p>当然，最好将bluetoothd的日志保存到文件，但是也有一个烦恼的问题，就是日志文件太大了，动不动就是10M以上的大小，排查很困难。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/libexec/bluetooth/bluetoothd -d -n &gt; bluetoothd.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>bluetooth</category>
      </categories>
      <tags>
        <tag>bluez</tag>
        <tag>bluetoothd</tag>
      </tags>
  </entry>
  <entry>
    <title>Matter: Level Control Cluster</title>
    <url>/2024/09/10/2024/Matter-Level-Control-Cluster/</url>
    <content><![CDATA[<blockquote>
<p>LevelControl Cluster的作用？</p>
</blockquote>
<p>该集群提供了一个接口，用于控制可设置为某个级别的设备特性，例如灯光的亮度、门的关闭程度或加热器的功率输出。</p>
<h2 id="Cluster-ID"><a href="#Cluster-ID" class="headerlink" title="Cluster ID"></a>Cluster ID</h2><table>
<thead>
<tr>
<th>Hierarchy</th>
<th>Role</th>
<th>Scope</th>
<th>PICS Code</th>
</tr>
</thead>
<tbody><tr>
<td>Base</td>
<td>Application</td>
<td>Endpoint</td>
<td>LVL</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>ID</th>
<th>Hierachy</th>
<th>Name</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0008</td>
<td>Base</td>
<td>Level Control</td>
<td></td>
</tr>
<tr>
<td>0x001c</td>
<td>Derived</td>
<td>Pulse Width Modulation</td>
<td>P</td>
</tr>
</tbody></table>
<p><em>注意：Pulse Width Modulation cluster是临时性的</em></p>
<h2 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h2><table>
<thead>
<tr>
<th>ID</th>
<th>Name</th>
<th>Type</th>
<th>Contraint</th>
<th>Quality</th>
<th>Default</th>
<th>Access</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0000</td>
<td>CurrentLevel</td>
<td>uint8</td>
<td>MinLevel to MaxLevel</td>
<td>SNX</td>
<td>null</td>
<td>R V</td>
<td>M</td>
</tr>
<tr>
<td>0x0001</td>
<td>RemainingTime</td>
<td>uint16</td>
<td>all</td>
<td></td>
<td>0</td>
<td>R V</td>
<td>LT</td>
</tr>
<tr>
<td>0x0002</td>
<td>MinLevel</td>
<td>uint8</td>
<td>1 to MaxLevel</td>
<td></td>
<td>1</td>
<td>R V</td>
<td>[LT]</td>
</tr>
<tr>
<td>0x0002</td>
<td>MinLevel</td>
<td>uint8</td>
<td>0 to MaxLevel</td>
<td></td>
<td>0</td>
<td>R V</td>
<td>[!LT]</td>
</tr>
<tr>
<td>0x0003</td>
<td>MaxLevel</td>
<td>uint8</td>
<td>MinLevel to 254</td>
<td></td>
<td>254</td>
<td>R V</td>
<td>O</td>
</tr>
<tr>
<td>0x0004</td>
<td>CurrentFrequency</td>
<td>uint16</td>
<td>MinFrequency to MaxFrequency</td>
<td>PS</td>
<td>0</td>
<td>R V</td>
<td>FQ</td>
</tr>
<tr>
<td>0x0005</td>
<td>MinFrequency</td>
<td>uint16</td>
<td>0 to MaxFrequency</td>
<td></td>
<td>0</td>
<td>R V</td>
<td>FQ</td>
</tr>
<tr>
<td>0x0006</td>
<td>MaxFrequency</td>
<td>uint16</td>
<td>min Minfrequency</td>
<td></td>
<td>0</td>
<td>R V</td>
<td>FQ</td>
</tr>
<tr>
<td>0x0010</td>
<td>OnOffTransitionTime</td>
<td>uint16</td>
<td>all</td>
<td></td>
<td>0</td>
<td>RW VO</td>
<td>O</td>
</tr>
<tr>
<td>0x0011</td>
<td>OnLevel</td>
<td>uint8</td>
<td>MinLevel to MaxLevel</td>
<td>X</td>
<td>null</td>
<td>RW VO</td>
<td>M</td>
</tr>
<tr>
<td>0x0012</td>
<td>OnTransitionTime</td>
<td>uint16</td>
<td>all</td>
<td>X</td>
<td>null</td>
<td>RW VO</td>
<td>O</td>
</tr>
<tr>
<td>0x0013</td>
<td>OffTransitionTime</td>
<td>uint16</td>
<td>all</td>
<td>X</td>
<td>null</td>
<td>RW VO</td>
<td>O</td>
</tr>
<tr>
<td>0x0014</td>
<td>DefaultMoveRate</td>
<td>uint8</td>
<td>all</td>
<td>X</td>
<td>MS</td>
<td>RW VO</td>
<td>O</td>
</tr>
<tr>
<td>0x000f</td>
<td>Options</td>
<td>OptionsBitmap</td>
<td>desc</td>
<td></td>
<td>0</td>
<td>RW VO</td>
<td>M</td>
</tr>
<tr>
<td>0x4000</td>
<td>StartUpCurrentLevel</td>
<td>uint8</td>
<td>desc</td>
<td>XN</td>
<td>MS</td>
<td>RW VM</td>
<td>LT</td>
</tr>
</tbody></table>
<p><strong>CurrentLevel Attribute</strong></p>
<p>该属性暗示着设备当前级别。级别的含义取决于设备。</p>
<p><strong>RemainingTime Attribute</strong></p>
<p>该属性暗示着持续时间直到current命令执行完毕，它以十分之秒为单位。</p>
<p><strong>MinLevel Attribute</strong></p>
<p>该属性暗示着当前级别可以设置的最小值</p>
<p><strong>MaxLevel Attribute</strong></p>
<p>该属性暗示着当前级别可以设置的最大值</p>
<p><strong>CurrentFrequency Attribute</strong></p>
<p>该属性暗示着设备处于当前级别时的频率。当前频率的值为0，表示是未知的。</p>
<p><strong>MinFrequency Attribute</strong></p>
<p>该属性暗示着当前频率可以设置的最小值。最小频率属性的值应该小于或等于最大频率属性的值。</p>
<p><strong>MaxFrequency Attribute</strong></p>
<p>该属性暗示着当前频率可以设置的最小值。最大频率属性的值应该大于或等于最小属性的值。</p>
<p><strong>Options Attribute</strong></p>
<p>此属性应指示设备的选定选项。<br>选项属性是一个位图，它决定了某些集群命令的默认行为。每个依赖于选项属性的命令都应首先构造一个临时的选项位图，该位图在命令处理期间有效。临时选项位图具有与选项属性相同的格式和含义，但包括可能被命令字段覆盖的任何位。</p>
<p><strong>OnOffTransitionTime Attribute</strong></p>
<p>此属性应指示当同一个Endpoint上的 OnOff 集群收到On或 Off命令时，移动到目标级别或从目标级别移出所需的时间。以十分之一秒为单位。</p>
<p><strong>OnLevel Attribute</strong></p>
<p>此属性应指示当同一Endpoint上的 OnOff 集群的 OnOff 属性设置为 TRUE 时， CurrentLevel 属性被设置的值，这是处理 OnOff 集群命令的结果。如果未实现 OnLevel 属性，或将其设置为空值，则它不起作用。有关更多详细信息，请参阅开&#x2F;关命令对 CurrentLevel 属性的影响。</p>
<p><strong>OnTrasitionTime Attribute</strong></p>
<p>此属性应指示当同一 Endpoint 上的 OnOff 集群收到 On 命令时，将当前级别从最低级别移至最高级别所需的时间。它以 1&#x2F;10 秒为单位指定。如果未实现此属性，或包含空值，则应使用 OnOffTransitionTime。</p>
<p><strong>OffTransitionTime Attribute</strong></p>
<p>此属性应指示当同一 Endpoint上 的 OnOff 集群收到 Off 命令时，将当前级别从最高级别移至最低级别所需的时间。它以 1&#x2F;10 秒为单位指定。如果未实现此属性，或包含空值，则应使用 OnOffTransitionTime。</p>
<p><strong>DefaultMoveRate Attribute</strong></p>
<p>当收到带有空值速率参数的移动命令时，此属性应指示移动速率（以单位&#x2F;秒为单位）。</p>
<p><strong>StartUpCurrentLevel Attribute</strong></p>
<p>此属性应指示设备通电时所需的启动级别，并且此级别应反映在 CurrentLevel 属性中。StartUpCurrentLevel 属性的值如下所列：</p>
<table>
<thead>
<tr>
<th>Value</th>
<th>Action on power up</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>将 CurrentLevel 属性设置为设备允许的最小值</td>
</tr>
<tr>
<td>null</td>
<td>将 CurrentLevel 属性设置为它之前的值</td>
</tr>
<tr>
<td>other values</td>
<td>将CurrentLevel 属性设置为输入的值</td>
</tr>
</tbody></table>
<p>此行为不适用于与 OTA 相关的重启。OTA 重启后，CurrentLevel 属性应返回到重启前的值。</p>
<h2 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h2><table>
<thead>
<tr>
<th>ID</th>
<th>Name</th>
<th>Direction</th>
<th>Respone</th>
<th>Access</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x00</td>
<td>MoveToLevel</td>
<td>client –&gt; server</td>
<td>Y</td>
<td>O</td>
<td>M</td>
</tr>
<tr>
<td>0x01</td>
<td>Move</td>
<td>client –&gt; server</td>
<td>Y</td>
<td>O</td>
<td>M</td>
</tr>
<tr>
<td>0x02</td>
<td>Step</td>
<td>client –&gt; server</td>
<td>Y</td>
<td>O</td>
<td>M</td>
</tr>
<tr>
<td>0x03</td>
<td>Stop</td>
<td>client –&gt; server</td>
<td>Y</td>
<td>O</td>
<td>M</td>
</tr>
<tr>
<td>0x04</td>
<td>MoveToLevelWithOnOff</td>
<td>client –&gt; server</td>
<td>Y</td>
<td>O</td>
<td>M</td>
</tr>
<tr>
<td>0x05</td>
<td>MoveWithOnOff</td>
<td>client –&gt; server</td>
<td>Y</td>
<td>O</td>
<td>M</td>
</tr>
<tr>
<td>0x06</td>
<td>StepWithOnOff</td>
<td>client –&gt; server</td>
<td>Y</td>
<td>O</td>
<td>M</td>
</tr>
<tr>
<td>0x07</td>
<td>StopWithOnOff</td>
<td>client –&gt; server</td>
<td>Y</td>
<td>O</td>
<td>M</td>
</tr>
<tr>
<td>0x08</td>
<td>MoveToClosestFrequecny</td>
<td>client –&gt; server</td>
<td>Y</td>
<td>O</td>
<td>M</td>
</tr>
</tbody></table>
<p><strong>MoveToLevel Command</strong></p>
<p>收到此命令后，设备应从其当前级别移至级别字段中指定的值。“级别”的含义取决于设备 - 例如，对于灯来说，它可能表示亮度级别。</p>
<p>移动应尽可能在技术上可行，即不是阶跃函数，并且移动到新级别所需的时间应等于 TransitionTime 字段的值（以十分之一秒为单位），或尽可能接近该值。</p>
<p>如果 TransitionTime 字段的值为 null，则移动到新级别所需的时间应由 OnOffTransitionTime 属性决定。如果不存在 OnOffTransitionTime（可选属性），则设备应尽快移动到新级别。</p>
<p><strong>Move Command</strong></p>
<p>收到此命令后，设备应首先创建并处理临时选项位图，如 MoveToLevel 命令中所述。</p>
<p>收到此命令后，设备应从其当前级别开始以连续的方式向上或向下移动，如下所述：</p>
<table>
<thead>
<tr>
<th>MoveMode</th>
<th>Action on Receipt</th>
</tr>
</thead>
<tbody><tr>
<td>Up</td>
<td>按照速率字段中给出的速率增加设备的级别。如果级别达到设备允许的最大值，则停止。</td>
</tr>
<tr>
<td>Down</td>
<td>按照“速率”字段中指定的速率降低设备的级别。如果级别达到设备允许的最低水平，则停止。</td>
</tr>
</tbody></table>
<p><strong>Step Command</strong></p>
<p>收到此命令后，设备应首先创建并处理临时选项位图，如 MoveToLevel 命令中所述。</p>
<p>收到此命令后，设备应从其当前级别向上或向下移动，如下所述：</p>
<table>
<thead>
<tr>
<th>StepMode</th>
<th>Action on Receipt</th>
</tr>
</thead>
<tbody><tr>
<td>Up</td>
<td>按 StepSize 单位增加 CurrentLevel，或直到达到设备允许的最大级别（如果在此过程中已达到）。在后一种情况下，过渡时间应按比例减少。</td>
</tr>
<tr>
<td>Down</td>
<td>将 CurrentLevel 降低 StepSize 单位，或直到达到设备允许的最低级别（如果在此过程中已达到）。在后一种情况下，过渡时间应按比例减少。</td>
</tr>
</tbody></table>
<p><strong>Stop Command</strong></p>
<p>收到此命令后，设备应首先创建并处理临时选项位图，如 MoveToLevel 命令中所述。</p>
<p>收到此命令后，当前正在执行的任何 MoveToLevel、Move 或 Step 命令（及其“带开&#x2F;关”变体）都应终止。收到 Stop 命令后，CurrentLevel 的值应保留为原值，RemainingTime 应设置为零。</p>
<p>此命令在命令列表中有两个条目，一个用于 MoveToLevel、Move 和 Step 命令，另一个用于它们的“带 On&#x2F;Off”对应项。这只是为了对称，以便轻松选择一组或另一组命令 - Stop 命令是相同的，因为 On&#x2F;Off 的依赖性由要停止的原始命令决定。</p>
<p><strong>MoveToClosestFrequecny Command</strong></p>
<p>收到此命令后，设备应将其当前频率更改为请求的频率，或更改为其可以生成的最接近的频率。如果设备无法接近该频率，则应返回默认响应，错误代码为 CONSTRAINT_ERROR。确定请求的频率是否可以近似为支持的频率是制造商特定的决定。</p>
<p><strong>With On&#x2F;Off Commands</strong></p>
<p>MoveToLevelWithOnOff、MoveWithOnOff 和 StepWithOnOff 命令分别与 MoveToLevel、Move 和 Step 命令具有相同的数据字段。</p>
]]></content>
      <categories>
        <category>Matter</category>
      </categories>
      <tags>
        <tag>LevelControl Cluster</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-asset-image problem</title>
    <url>/2024/09/07/2024/hexo-assert-image-problem/</url>
    <content><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>在之前使用hexo搭建博客后，认为在内容中插入图片还是不可缺少了。所以找到了一个博主发布的一遍文章：<a href="https://blog.csdn.net/m0_43401436/article/details/107191688">hexo博客中插入图片失败——解决思路及个人最终解决办法</a>，专门解决我这个需求的。</p>
<p>先介绍一下我的hexo环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cj@52e0bd6293ac:/workspace/blog$ hexo --version</span><br><span class="line">INFO  Validating config</span><br><span class="line">hexo: 7.3.0</span><br><span class="line">hexo-cli: 4.3.2</span><br><span class="line">os: linux 6.8.0-40-generic Ubuntu 22.04.4 LTS 22.04.4 LTS (Jammy Jellyfish)</span><br><span class="line">node: 12.22.9</span><br><span class="line">v8: 7.8.279.23-node.56</span><br><span class="line">uv: 1.43.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">ares: 1.18.1</span><br><span class="line">modules: 72</span><br><span class="line">nghttp2: 1.43.0</span><br><span class="line">napi: 8</span><br><span class="line">llhttp: 2.1.6</span><br><span class="line">http_parser: 2.9.4</span><br><span class="line">openssl: 1.1.1m</span><br><span class="line">cldr: 40.0</span><br><span class="line">icu: 70.1</span><br><span class="line">tz: 2021a3</span><br><span class="line">unicode: 14.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>hexo-next-theme：8.20.0</em></p>
<p>下面就是我按照分享的文章的操作过程：</p>
<ul>
<li><p>下载hexo-asset-image插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cj@52e0bd6293ac:/workspace/blog$ npm install hexo-asset-image --save</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改hexo的配置文件_config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仅修改一处：将false修改为true</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Typora修改图片偏好设置</p>
<p><img src="/2024/09/07/2024/hexo-assert-image-problem/image-20240907142349989.png" alt="image-20240907142349989"></p>
</li>
<li><p>在Typora编译md文件，并复制图片到内容中</p>
</li>
<li><p>hexo清理缓存并重新构建：hexo clean &amp;&amp; hexo g</p>
</li>
</ul>
<p>以上就是按照分享文章的步骤，但是图片还是无法显示（go die）。</p>
<p>但是我在hexo构建时，发现了一些奇怪的东西：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cj@52e0bd6293ac:/workspace/blog$ hexo s</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  ==================================</span><br><span class="line">  ███╗   ██╗███████╗██╗  ██╗████████╗</span><br><span class="line">  ████╗  ██║██╔════╝╚██╗██╔╝╚══██╔══╝</span><br><span class="line">  ██╔██╗ ██║█████╗   ╚███╔╝    ██║</span><br><span class="line">  ██║╚██╗██║██╔══╝   ██╔██╗    ██║</span><br><span class="line">  ██║ ╚████║███████╗██╔╝ ██╗   ██║</span><br><span class="line">  ╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝   ╚═╝</span><br><span class="line">========================================</span><br><span class="line">NexT version 8.20.0</span><br><span class="line">Documentation: https://theme-next.js.org</span><br><span class="line">========================================</span><br><span class="line">INFO  Start processing</span><br><span class="line">update <span class="built_in">link</span> as:--&gt;/.io//Snipaste_esp32c3_2024-09-07_11-47-30.png</span><br><span class="line">update <span class="built_in">link</span> as:--&gt;/.io//Snipaste_esp32c3_2024-09-07_12-01-02.png</span><br><span class="line">update <span class="built_in">link</span> as:--&gt;/.io//Snipaste_esp32c3_2024-09-07_11-47-30.png</span><br><span class="line">update <span class="built_in">link</span> as:--&gt;/.io//Snipaste_esp32c3_2024-09-07_12-01-02.png</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里的图片路径很不正常，我猜测这是图片无法正常显示的原因。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>通过把文件的异常路径放在浏览器搜索，发现了一个博主发布了解决方法：<a href="https://blog.iz4.cc/tutorial/2022/08/%E8%A7%A3%E5%86%B3hexo-asset-image%E5%9B%BE%E7%89%87%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E6%9B%BF%E6%8D%A2%E9%97%AE%E9%A2%98/">解决hexo-asset-image图片相对路径替换问题</a> ，原来是hexo-assert-image插件转换图片路径出问题了。</p>
<p>按照分享的文章修改步骤：</p>
<ul>
<li><p>编辑 blog&#x2F;node_modules&#x2F;hexo-asset-image&#x2F;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 仅新增 else if 代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line"><span class="comment">// if not with index.html endpos = link.lastIndexOf(&#x27;.&#x27;) + 1 support hexo-abbrlink</span></span><br><span class="line"><span class="keyword">if</span>(<span class="regexp">/.*\/index\.html$/</span>.<span class="title function_">test</span>(link)) &#123;</span><br><span class="line">  <span class="comment">// when permalink is end with index.html, for example 2019/02/20/xxtitle/index.html</span></span><br><span class="line">  <span class="comment">// image in xxtitle/ will go to xxtitle/index/</span></span><br><span class="line">  appendLink = <span class="string">&#x27;index/&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> endPos = link.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/.*\/$/</span>.<span class="title function_">test</span>(link))&#123;</span><br><span class="line">  <span class="keyword">var</span> endPos = link.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> endPos = link.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>hexo清理缓存并重新构建：hexo clean &amp;&amp; hexo g</p>
<p>这里要注意一点：每次插入图片，都要重新构建，否则图片无法正常显示。</p>
</li>
</ul>
<p>最终本地访问图片显示正常，部署到github.io也显示正常。</p>
<p><strong>补充说明：</strong></p>
<p>第一篇分享文章的博主表示：Typora引入图片时，不能加入图片的文件夹前缀，只能直接给出图片的文件名称，否则图片无法正常显示。并且该博主也通过hexo-asset-image插件的README.md说明用来论证。</p>
<p>我也查看了该插件的README.md，确实如同该博主说的。但是我还是使用相对路径（即加上了图片所在的文件夹作为前缀），并没有出现图片无法显示的情况。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo-asset-image图片显示异常</tag>
      </tags>
  </entry>
  <entry>
    <title>ESP32-C3-DevKitM-1 Schematic</title>
    <url>/2024/09/07/2024/ESP32-C3-DevKitM-1-Schematic/</url>
    <content><![CDATA[<p><a href="https://docs.espressif.com/projects/esp-dev-kits/zh_CN/latest/esp32c3/esp32-c3-devkitm-1/user_guide.html">ESP32-C3-DevKit-M1 官网文档介绍</a></p>
<h2 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h2><p>先看一下开发板的缩略图：</p>
<p><img src="/2024/09/07/2024/ESP32-C3-DevKitM-1-Schematic/Snipaste_esp32c3_2024-09-07_11-47-30.png" alt="开发板的缩略图"></p>
<p>缩略图只列举了功能模块部分，并没有体现电路部分。但是还是可以通过上图知道该开发板提供的功能：</p>
<ul>
<li>Micro MiNi-USB：支持供电（3.3V）和传输数据（通过USB-UART Bridge实现）</li>
<li>Boot：按键</li>
<li>RST：按键</li>
<li>Pin Header Connector：提供两列排针，将芯片的GPIO口外接出来</li>
<li>RGB LED：提供一个LED灯</li>
<li>WiFi：支持WiFi功能</li>
<li>BT：支持蓝牙功能</li>
</ul>
<h2 id="按键电路图"><a href="#按键电路图" class="headerlink" title="按键电路图"></a>按键电路图</h2><p>接下来看一下Boot和RST按键的电路图：</p>
<p><img src="/2024/09/07/2024/ESP32-C3-DevKitM-1-Schematic/Snipaste_esp32c3_2024-09-07_12-01-02.png"></p>
<p>SW1按键（即Boot按键），当SW1被按下时，电路被导通，GPIO9从高电平到低电平变化；反之，当SW1被松开时，电路被断开，GPIO9从低电平到高电平变化；</p>
<p>SW2按键（即RST按键），当SW2被按下时，电路被导通，CHIP_PU（即芯片的EN接口）从高电平到低电平变化，直接将开发板复位。接着查看一下CHIP_PU连接的复位电路：</p>
<p><img src="/2024/09/07/2024/ESP32-C3-DevKitM-1-Schematic/image-20240907140310317.png" alt="image-20240907140310317"></p>
<h2 id="LED电路图"><a href="#LED电路图" class="headerlink" title="LED电路图"></a>LED电路图</h2><p>接下来看一下LED的电路图：</p>
<p><img src="/2024/09/07/2024/ESP32-C3-DevKitM-1-Schematic/image-20240907152038685.png" alt="image-20240907152038685"></p>
<p>通过GPIO8来控制LED灯，开发板提供的LED支持的功能包括：开&#x2F;关、调节亮度、调节RGB</p>
<h2 id="GPIO汇总"><a href="#GPIO汇总" class="headerlink" title="GPIO汇总"></a>GPIO汇总</h2><p>ESP32-C3 芯片具有 22 个物理 GPIO 管脚（GPIO0 ~ GPIO21）。每个管脚都可用作一个通用 IO，或连接一个内部的外设信号。通过 GPIO 交换矩阵和 IO MUX，可配置外设模块的输入信号来源于任何的 IO 管脚，并且外设模块的输出信号也可连接到任意 IO 管脚。这些模块共同组成了芯片的 IO 控制。</p>
<p>参考来源：<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/v5.2.2/esp32c3/api-reference/peripherals/gpio.html">ESP32-C3 GPIO描述</a></p>
<table>
<thead>
<tr>
<th>GPIO</th>
<th>模拟功能</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>GPIO0</td>
<td>ADC1_CH0</td>
<td>RTC</td>
</tr>
<tr>
<td>GPIO1</td>
<td>ADC1_CH1</td>
<td>RTC</td>
</tr>
<tr>
<td>GPIO2</td>
<td>ADC1_CH2</td>
<td>Strapping管教；RTC</td>
</tr>
<tr>
<td>GPIO3</td>
<td>ADC1_CH3</td>
<td>RTC</td>
</tr>
<tr>
<td>GPIO4</td>
<td>ADC1_CH4</td>
<td>RTC</td>
</tr>
<tr>
<td>GPIO5</td>
<td>ADC2_CH0</td>
<td>RTC</td>
</tr>
<tr>
<td>GPIO6</td>
<td></td>
<td></td>
</tr>
<tr>
<td>GPIO7</td>
<td></td>
<td></td>
</tr>
<tr>
<td>GPIO8</td>
<td></td>
<td>Strapping管脚</td>
</tr>
<tr>
<td>GPIO9</td>
<td></td>
<td>Strapping管脚</td>
</tr>
<tr>
<td>GPIO10</td>
<td></td>
<td></td>
</tr>
<tr>
<td>GPIO11</td>
<td></td>
<td></td>
</tr>
<tr>
<td>GPIO12</td>
<td></td>
<td>SPI0&#x2F;1</td>
</tr>
<tr>
<td>GPIO13</td>
<td></td>
<td>SPI0&#x2F;1</td>
</tr>
<tr>
<td>GPIO14</td>
<td></td>
<td>SPI0&#x2F;1</td>
</tr>
<tr>
<td>GPIO15</td>
<td></td>
<td>SPI0&#x2F;1</td>
</tr>
<tr>
<td>GPIO16</td>
<td></td>
<td>SPI0&#x2F;1</td>
</tr>
<tr>
<td>GPIO17</td>
<td></td>
<td>SPI0&#x2F;1</td>
</tr>
<tr>
<td>GPIO18</td>
<td></td>
<td>USB-JTAG</td>
</tr>
<tr>
<td>GPIO19</td>
<td></td>
<td>USB-JTAG</td>
</tr>
<tr>
<td>GPIO20</td>
<td></td>
<td></td>
</tr>
<tr>
<td>GPIO21</td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>esp</category>
      </categories>
      <tags>
        <tag>ESP32-C3-DevKit-M1 原理图</tag>
      </tags>
  </entry>
  <entry>
    <title>esp: blink project</title>
    <url>/2024/09/06/2024/esp-blink-project/</url>
    <content><![CDATA[<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>blink示例的目录结构：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">--blink</span><br><span class="line">  |--main（必有的main目录）</span><br><span class="line">     |--blink_example.c</span><br><span class="line">     |--CMakeLists.txt（底层编译配置文件）</span><br><span class="line">     |--idf_componect.yml</span><br><span class="line">     |--Kconfig.projbuild（Kconfig配置文件）</span><br><span class="line">  |--CMakeLists.txt（顶层编译配置文件）</span><br><span class="line">  |--pytest_blink.py</span><br><span class="line">  |--README.md</span><br><span class="line">  |--sdkconfig.ci.led_strip_spi</span><br></pre></td></tr></table></figure>

<h2 id="源文件代码"><a href="#源文件代码" class="headerlink" title="源文件代码"></a>源文件代码</h2><p>该项目就只有一个源文件：blink_example_main.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;freertos/FreeRTOS.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;freertos/task.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;driver/gpio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;esp_log.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led_strip.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sdkconfig.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *TAG = <span class="string">&quot;example&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Use project configuration menu (idf.py menuconfig) to choose the GPIO to blink,</span></span><br><span class="line"><span class="comment">   or you can edit the following line and set a number here.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// CONFIG_BLINK_GPIO的默认值是8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLINK_GPIO CONFIG_BLINK_GPIO</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> s_led_state = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_BLINK_LED_STRIP</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">led_strip_handle_t</span> led_strip;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">blink_led</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* If the addressable LED is enabled */</span></span><br><span class="line">    <span class="keyword">if</span> (s_led_state) &#123;</span><br><span class="line">        <span class="comment">/* Set the LED pixel using RGB from 0 (0%) to 255 (100%) for each color */</span></span><br><span class="line">        led_strip_set_pixel(led_strip, <span class="number">0</span>, <span class="number">16</span>, <span class="number">16</span>, <span class="number">16</span>);</span><br><span class="line">        <span class="comment">/* Refresh the strip to send data */</span></span><br><span class="line">        led_strip_refresh(led_strip);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* Set all LED off to clear all pixels */</span></span><br><span class="line">        led_strip_clear(led_strip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">configure_led</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ESP_LOGI(TAG, <span class="string">&quot;Example configured to blink addressable LED!&quot;</span>);</span><br><span class="line">    <span class="comment">/* LED strip initialization with the GPIO and pixels number*/</span></span><br><span class="line">    <span class="type">led_strip_config_t</span> strip_config = &#123;</span><br><span class="line">        .strip_gpio_num = BLINK_GPIO,</span><br><span class="line">        .max_leds = <span class="number">1</span>, <span class="comment">// at least one LED on board</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_BLINK_LED_STRIP_BACKEND_RMT</span></span><br><span class="line">    <span class="type">led_strip_rmt_config_t</span> rmt_config = &#123;</span><br><span class="line">        .resolution_hz = <span class="number">10</span> * <span class="number">1000</span> * <span class="number">1000</span>, <span class="comment">// 10MHz</span></span><br><span class="line">        .flags.with_dma = <span class="literal">false</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    ESP_ERROR_CHECK(led_strip_new_rmt_device(&amp;strip_config, &amp;rmt_config, &amp;led_strip));</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> CONFIG_BLINK_LED_STRIP_BACKEND_SPI</span></span><br><span class="line">    <span class="type">led_strip_spi_config_t</span> spi_config = &#123;</span><br><span class="line">        .spi_bus = SPI2_HOST,</span><br><span class="line">        .flags.with_dma = <span class="literal">true</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    ESP_ERROR_CHECK(led_strip_new_spi_device(&amp;strip_config, &amp;spi_config, &amp;led_strip));</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span> <span class="string">&quot;unsupported LED strip backend&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">/* Set all LED off to clear all pixels */</span></span><br><span class="line">    led_strip_clear(led_strip);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> CONFIG_BLINK_LED_GPIO</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">blink_led</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Set the GPIO level according to the state (LOW or HIGH)*/</span></span><br><span class="line">    gpio_set_level(BLINK_GPIO, s_led_state);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">configure_led</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ESP_LOGI(TAG, <span class="string">&quot;Example configured to blink GPIO LED!&quot;</span>);</span><br><span class="line">    gpio_reset_pin(BLINK_GPIO);</span><br><span class="line">    <span class="comment">/* Set the GPIO as a push/pull output */</span></span><br><span class="line">    gpio_set_direction(BLINK_GPIO, GPIO_MODE_OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span> <span class="string">&quot;unsupported LED type&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">app_main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Configure the peripheral according to the LED type */</span></span><br><span class="line">    configure_led();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        ESP_LOGI(TAG, <span class="string">&quot;Turning the LED %s!&quot;</span>, s_led_state == <span class="literal">true</span> ? <span class="string">&quot;ON&quot;</span> : <span class="string">&quot;OFF&quot;</span>);</span><br><span class="line">        blink_led();</span><br><span class="line">        <span class="comment">/* Toggle the LED state */</span></span><br><span class="line">        s_led_state = !s_led_state;</span><br><span class="line">        vTaskDelay(CONFIG_BLINK_PERIOD / portTICK_PERIOD_MS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从源文件中需要主要的几个点：</p>
<ul>
<li><code>CONFIG_BLINK_GPIO</code>：这个宏是在哪里定义的，定义的值是什么？</li>
<li><code>CONFIG_BLINK_LED_STRIP</code>、<code>CONFIG_BLINK_LED_GPIO</code>：这两个宏在哪里定义的，作用又是什么？</li>
<li><code>CONFIG_BLINK_LED_STRIP_BACKEND_RMT</code>、<code>CONFIG_BLINK_LED_STRIP_BACKEND_SPI</code>：这两个宏是在哪里定义的，作用是什么？</li>
<li><code>CONFIG_BLINK_PERIOD</code>：这个宏在哪里定义，作用是什么？</li>
<li><code>portTICK_PERIOD_MS</code>：这个宏在哪里定义？</li>
</ul>
<p>blink工程目录下有这么一个文件：Kconfig.projbuild</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu &quot;Example Configuration&quot;</span><br><span class="line"></span><br><span class="line">    orsource &quot;$IDF_PATH/examples/common_components/env_caps/$IDF_TARGET/Kconfig.env_caps&quot;</span><br><span class="line"></span><br><span class="line">    choice BLINK_LED</span><br><span class="line">        prompt &quot;Blink LED type&quot;</span><br><span class="line">        default BLINK_LED_GPIO if IDF_TARGET_ESP32 || IDF_TARGET_ESP32C2</span><br><span class="line">        default BLINK_LED_STRIP</span><br><span class="line">        help</span><br><span class="line">            Select the LED type. A normal level controlled LED or an addressable LED strip.</span><br><span class="line">            The default selection is based on the Espressif DevKit boards.</span><br><span class="line">            You can change the default selection according to your board.</span><br><span class="line"></span><br><span class="line">        config BLINK_LED_GPIO</span><br><span class="line">            bool &quot;GPIO&quot;</span><br><span class="line">        config BLINK_LED_STRIP</span><br><span class="line">            bool &quot;LED strip&quot;</span><br><span class="line">    endchoice</span><br><span class="line"></span><br><span class="line">    choice BLINK_LED_STRIP_BACKEND</span><br><span class="line">        depends on BLINK_LED_STRIP</span><br><span class="line">        prompt &quot;LED strip backend peripheral&quot;</span><br><span class="line">        default BLINK_LED_STRIP_BACKEND_RMT if SOC_RMT_SUPPORTED</span><br><span class="line">        default BLINK_LED_STRIP_BACKEND_SPI</span><br><span class="line">        help</span><br><span class="line">            Select the backend peripheral to drive the LED strip.</span><br><span class="line"></span><br><span class="line">        config BLINK_LED_STRIP_BACKEND_RMT</span><br><span class="line">            depends on SOC_RMT_SUPPORTED</span><br><span class="line">            bool &quot;RMT&quot;</span><br><span class="line">        config BLINK_LED_STRIP_BACKEND_SPI</span><br><span class="line">            bool &quot;SPI&quot;</span><br><span class="line">    endchoice</span><br><span class="line"></span><br><span class="line">    config BLINK_GPIO</span><br><span class="line">        int &quot;Blink GPIO number&quot;</span><br><span class="line">        range ENV_GPIO_RANGE_MIN ENV_GPIO_OUT_RANGE_MAX</span><br><span class="line">        default 5 if IDF_TARGET_ESP32</span><br><span class="line">        default 18 if IDF_TARGET_ESP32S2</span><br><span class="line">        default 48 if IDF_TARGET_ESP32S3</span><br><span class="line">        default 8</span><br><span class="line">        help</span><br><span class="line">            GPIO number (IOxx) to blink on and off the LED.</span><br><span class="line">            Some GPIOs are used for other purposes (flash connections, etc.) and cannot be used to blink.</span><br><span class="line"></span><br><span class="line">    config BLINK_PERIOD</span><br><span class="line">        int &quot;Blink period in ms&quot;</span><br><span class="line">        range 10 3600000</span><br><span class="line">        default 1000</span><br><span class="line">        help</span><br><span class="line">            Define the blinking period in milliseconds.</span><br><span class="line"></span><br><span class="line">endmenu</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个文件定义了<code>CONFIG_BLINK_GPIO</code> ，在配置菜单中提供一个范围供用户选择，不同的目标芯片给定了一个默认值。由于测试的开发板的芯片的ESP32-C3，所以给了默认值8。</p>
<p>这个文件定义了<code>CONFIG_BLINK_LED_STRIP</code>、<code>CONFIG_BLINK_LED_GPIO</code>，在配置菜单中提供支持的LED类型让用户选择，可选项：LED GPIO（普通的LED） or LED STRIP（可寻址的LED）。由于测试的开发板的芯片的ESP32-C3，所以给了默认值：<code>CONFIG_BLINK_LED_STRIP</code>。</p>
<p>若选择LED类型是LED STRIP，还要为其选择驱动类型，可选项：SPI 和 RMT，即<code>CONFIG_BLINK_LED_STRIP_BACKEND_RMT</code>、<code>CONFIG_BLINK_LED_STRIP_BACKEND_SPI</code>，由于测试的开发板的芯片的ESP32-C3，所以给了默认值：SPI。</p>
<p>这个文件还定义了<code>CONFIG_BLINK_PERIOD</code> ，提供一个范围给用户选择，此处的默认值是1000ms，用于闪烁周期。</p>
<p>最后一个宏<code>portTICK_PERIOD_MS</code> ，这个是真的难找，还不能按图索骥。还是通过浏览器搜索找到了一遍文章才找到：<a href="https://blog.csdn.net/sunnysunice/article/details/129817691">细说基于IDF-IDE的ESP32 入门例程blink工程</a>。按照分享的文章，如何找到这个字段的定义：</p>
<ul>
<li><p>搜索这个文件：<code>portmacro.h</code>，在这个文件中找到了定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> portTICK_PERIOD_MS          ( ( TickType_t ) 1000 / configTICK_RATE_HZ )</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>接下来找这个：configTICK_RATE_HZ，可以在这个文件中找到：<code>FreeRTOSConfig.h</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> configTICK_RATE_HZ                           CONFIG_FREERTOS_HZ</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>最后查找：<code>CONFIG_FREERTOS_HZ</code> 就容易了，直接在<code>sdkconfig</code>文件中找就好了</p>
</li>
</ul>
<p>就这种搞法，想让初学者入门真的难度太大了，都不用去看代码逻辑，光找这些宏和变量的定义就可以劝退很多人了。</p>
<h2 id="简化代码"><a href="#简化代码" class="headerlink" title="简化代码"></a>简化代码</h2><p>ESP32-C3-DevKit-M-1开发板GPIO8外接LED_STRIP类型ws2812设备，所以代码可以这样简化：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;freertos/FreeRTOS.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;freertos/task.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;driver/gpio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;esp_log.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led_strip.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sdkconfig.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *TAG = <span class="string">&quot;example&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLINK_GPIO 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLINK_PERIOD 1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 支持定义两种STRIP模式：SPI 和 RMT</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLINK_LED_STRIP_BACKEND_TYPE <span class="string">&quot;SPI&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> s_led_state = <span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">led_strip_handle_t</span> led_strip;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">blink_led</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* If the addressable LED is enabled */</span></span><br><span class="line">    <span class="keyword">if</span> (s_led_state) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Set the LED pixel using RGB from 0 (0%) to 255 (100%) for each color */</span></span><br><span class="line">        led_strip_set_pixel(led_strip, <span class="number">0</span>, <span class="number">16</span>, <span class="number">16</span>, <span class="number">16</span>);</span><br><span class="line">        <span class="comment">/* Refresh the strip to send data */</span></span><br><span class="line">        led_strip_refresh(led_strip);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Set all LED off to clear all pixels */</span></span><br><span class="line">        led_strip_clear(led_strip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">configure_led</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ESP_LOGI(TAG, <span class="string">&quot;Example configured to blink addressable LED!&quot;</span>);</span><br><span class="line">    <span class="comment">/* LED strip initialization with the GPIO and pixels number*/</span></span><br><span class="line">    <span class="type">led_strip_config_t</span> strip_config = &#123;</span><br><span class="line">        .strip_gpio_num = BLINK_GPIO,</span><br><span class="line">        .max_leds = <span class="number">1</span>, <span class="comment">// at least one LED on board</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(BLINK_LED_STRIP_BACKEND_TYPE, <span class="string">&quot;RMT&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">led_strip_rmt_config_t</span> rmt_config = &#123;</span><br><span class="line">            .resolution_hz = <span class="number">10</span> * <span class="number">1000</span> * <span class="number">1000</span>, <span class="comment">// 10MHz</span></span><br><span class="line">            .flags.with_dma = <span class="literal">false</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        ESP_ERROR_CHECK(led_strip_new_rmt_device(&amp;strip_config, &amp;rmt_config, &amp;led_strip));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(BLINK_LED_STRIP_BACKEND_TYPE, <span class="string">&quot;SPI&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">led_strip_spi_config_t</span> spi_config = &#123;</span><br><span class="line">            .spi_bus = SPI2_HOST,</span><br><span class="line">            .flags.with_dma = <span class="literal">true</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        ESP_ERROR_CHECK(led_strip_new_spi_device(&amp;strip_config, &amp;spi_config, &amp;led_strip));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Set all LED off to clear all pixels */</span></span><br><span class="line">    led_strip_clear(led_strip);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">app_main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Configure the peripheral according to the LED type */</span></span><br><span class="line">    configure_led();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        ESP_LOGI(TAG, <span class="string">&quot;Turning the LED %s!&quot;</span>, s_led_state == <span class="literal">true</span> ? <span class="string">&quot;ON&quot;</span> : <span class="string">&quot;OFF&quot;</span>);</span><br><span class="line">        blink_led();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Toggle the LED state */</span></span><br><span class="line">        s_led_state = !s_led_state;</span><br><span class="line">        vTaskDelay(BLINK_PERIOD / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用户通过<code>BLINK_LED_STRIP_BACKEND_TYPE</code> 宏来定义控制类型。</p>
]]></content>
      <categories>
        <category>esp</category>
      </categories>
      <tags>
        <tag>点灯</tag>
        <tag>ESP32-C3-DevKit-M-1</tag>
      </tags>
  </entry>
  <entry>
    <title>Matter: On/Off Cluster</title>
    <url>/2024/09/06/2024/Matter-On-Off-Cluster/</url>
    <content><![CDATA[<blockquote>
<p>On&#x2F;Off Cluster的作用？</p>
</blockquote>
<p>用于打开和关闭设备的属性和命令。</p>
<h2 id="Cluster-ID"><a href="#Cluster-ID" class="headerlink" title="Cluster ID"></a>Cluster ID</h2><p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>Hierarchy</th>
<th>Role</th>
<th>Scope</th>
<th>PICS Code</th>
</tr>
</thead>
<tbody><tr>
<td>Base</td>
<td>Application</td>
<td>Endpoint</td>
<td>OO</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>ID</th>
<th>Name</th>
</tr>
</thead>
<tbody><tr>
<td>0x0006</td>
<td>On&#x2F;Off</td>
</tr>
</tbody></table>
<h2 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h2><table>
<thead>
<tr>
<th>ID</th>
<th>Name</th>
<th>Type</th>
<th>Constraint</th>
<th>Quality</th>
<th>Default</th>
<th>Access</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0000</td>
<td>OnOff</td>
<td>bool</td>
<td>all</td>
<td>SN</td>
<td>FALSE</td>
<td>R V</td>
<td>M</td>
</tr>
<tr>
<td>0x4000</td>
<td>GlobalSceneControl</td>
<td>bool</td>
<td>all</td>
<td></td>
<td>TRUE</td>
<td>R V</td>
<td>LT</td>
</tr>
<tr>
<td>0x4001</td>
<td>OnTime</td>
<td>uint16</td>
<td>all</td>
<td></td>
<td>0</td>
<td>RW VO</td>
<td>LT</td>
</tr>
<tr>
<td>0x4002</td>
<td>OffWaitTime</td>
<td>uint16</td>
<td>all</td>
<td></td>
<td>0</td>
<td>RW VO</td>
<td>LT</td>
</tr>
<tr>
<td>0x4003</td>
<td>StartUpOnOff</td>
<td>StartUpOnOffEnum</td>
<td>desc</td>
<td>XN</td>
<td>MS</td>
<td>RW VM</td>
<td>LT</td>
</tr>
</tbody></table>
<p><strong>OnOff Attribute</strong></p>
<p>这个属性暗示着在Endpoint上设备状态是关闭或打开，该属性的值也对应着FALSE或TRUE。</p>
<p><strong>GlobalSceneControl Attribute</strong></p>
<p>为了支持用户恢复一组设备的最后设置（例如灯光的级别设置）的用例，引入了一个全局场景，该场景在设备关闭时存储并在设备打开时调用。全局场景定义为使用组标识符 0 和场景标识符 0 存储的场景。</p>
<p>定义此属性是为了防止第二个 Off 命令将所有设备关闭的情况存储为全局场景，并防止第二个 On 命令通过返回全局场景来破坏当前设置。</p>
<p>在收到导致 OnOff 属性设置为 TRUE 的命令后，此属性应设置为 TRUE，例如标准On命令、MoveToLevel(WithOnOff) 命令、RecallScene 命令或 OnWithRecallGlobalScene 命令。</p>
<p>在收到 OffWithEffect 命令后，此属性的值应该设置为FALSE。</p>
<p><strong>OnTime Attribute</strong></p>
<p>此属性指定使用 OnWithTimedOff 命令时，在自动转换为 Off 状态之前应保持 On 状态的时间长度（以 1&#x2F;10 秒为单位）。此属性可以随时写入，但写入值仅在 Timed On 状态下才有效。</p>
<p><strong>OffWaitTime Attribute</strong></p>
<p>此属性指定应保护关闭状态的时间长度（以 1&#x2F;10 秒为单位），以防止另一个 OnWithTimedOff 命令将服务器重新切换回开启状态（例如，离开房间时，灯会关闭，但占用传感器会检测到离开的人并尝试将灯重新打开）。此属性可以随时写入，但写入值仅在处于定时开启状态后转换到延迟关闭状态或处于延迟关闭状态时才有效。</p>
<p><strong>StartUpOnOff Attribute</strong></p>
<p>此属性定义设备通电时所需的启动行为并且此状态应反映在 OnOff 属性中。如果值为空，则将 OnOff 属性设置为其先前的值。否则，行为在定义 StartUpOnOffEnum 的表中定义。</p>
<p>此属性不适用于与 OTA 相关的重启。OTA 重启后，OnOff 属性应恢复为重启前的值。</p>
<h2 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h2><table>
<thead>
<tr>
<th>ID</th>
<th>Name</th>
<th>Direction</th>
<th>Response</th>
<th>Access</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x00</td>
<td>Off</td>
<td>client –&gt; server</td>
<td>Y</td>
<td>O</td>
<td>M</td>
</tr>
<tr>
<td>0x01</td>
<td>On</td>
<td>client –&gt; server</td>
<td>Y</td>
<td>O</td>
<td>!OFFONLY</td>
</tr>
<tr>
<td>0x02</td>
<td>Toggle</td>
<td>client –&gt; server</td>
<td>Y</td>
<td>O</td>
<td>!OFFONLY</td>
</tr>
<tr>
<td>0x40</td>
<td>OffWithEffect</td>
<td>client –&gt; server</td>
<td>Y</td>
<td>O</td>
<td>LT</td>
</tr>
<tr>
<td>0x41</td>
<td>OnWithRecallGlobalSence</td>
<td>client –&gt; server</td>
<td>Y</td>
<td>O</td>
<td>LT</td>
</tr>
<tr>
<td>0x42</td>
<td>OnWithTimedOff</td>
<td>client –&gt; server</td>
<td>Y</td>
<td>O</td>
<td>LT</td>
</tr>
</tbody></table>
<p><strong>Off Command</strong></p>
<p>收到Off命令后，服务器应该将OnOff属性的值设置为FALSE。此外，当支持OnTime属性时，服务器应该将OnTime属性的值设置为0。</p>
<p><strong>On Command</strong></p>
<p>如果支持OffOnly功能（或特征）时，收到On命令后，服务器应该发送UNSUPPORTED_COMMAND失败状态响应。否则，收到On命令后，服务器应该设置OnOff属性的值为TRUE。</p>
<p>此外，当同时支持OnTime和OffWaitTime两个属性时，如果OnTime属性的值等于0，服务器应该将OffWaitTime属性的值设置为0。</p>
<p><strong>Toggle Command</strong></p>
<p>如果支持OffOnly功能（或特征），收到Toggle命令后，服务器应该发送UNSUPPORTED_COMMAND失败状态响应。否则，收到Toggle命令后，如果OnOff属性的值等于FALSE，服务器应该将OnOff属性的值设置为TRUE；如果OnOff属性的值等于TRUE，服务器应该将OnOff属性的值设置为FALSE。</p>
<p>此外，当同时支持OnTime和OffWaitTime两个属性时，如果OnOff属性的值等于FALSE，且如果OnTime属性的值等于0，服务器应该将OffWaitTime属性的值设置为0。如果OnOff属性的值等于TRUE，服务器应该将OnTime属性的值设置为0。</p>
<p><strong>OffWithRecallGlobalSence Command</strong></p>
<p>这个命令允许在设备关闭时调用设置。</p>
<p>收到OffWithRecallGlobalSence命令后，如果GlobalSceneControl属性的值等于TRUE，服务器应该丢弃这个命令。</p>
<p>如果GlobalSceneControl属性的值等于FALSE，那么同一个Endpoint上Scene Cluster服务器应该调用它的global scene，并更新OnOff属性的值。OnOff服务器应该将GlobalSceneControl属性的值设置为TRUE。</p>
<p>此外，当同时支持OnTime和OffWaitTime两个属性时，如果OnTime属性的值等于0，服务器应该将OffWaitTime属性的值设置为0。</p>
<p><strong>OnWithTimedOff Command</strong></p>
<p>此命令允许设备在特定持续时间内打开，并具有受保护的持续时间，因此如果设备随后关闭，在此期间再次收到 OnWithTimedOff 命令，无法重新打开设备。在服务器打开时，收到的更多 OnWithTimedOff 命令将更新设备打开的时间段。</p>
<p><em>OnWithTimedOff 命令的数据域</em></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Name</th>
<th>Type</th>
<th>Constraint</th>
<th>Quality</th>
<th>Default</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>OnOffControl</td>
<td>OnOffControlBitamp</td>
<td>0 to 1</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>1</td>
<td>OnTime</td>
<td>uint16</td>
<td>max 0xfffe</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>2</td>
<td>OffWaitTime</td>
<td>uint16</td>
<td>max 0xfffe</td>
<td></td>
<td></td>
<td>M</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Matter</category>
      </categories>
  </entry>
  <entry>
    <title>Matter: Sensor</title>
    <url>/2024/09/06/2024/Matter-Sensor/</url>
    <content><![CDATA[<p>对于传感器器类型设备有很多种，分别有：</p>
<ul>
<li>Contact Sensor（接触式传感器）</li>
<li>Light Sensor（光传感器 or 光敏传感器）</li>
<li>Occupancy Sensor（占用传感器）</li>
<li>Temperature Sensor（温度传感器）</li>
<li>Pressure Sensor（压力传感器）</li>
<li>Flow Sensor（流量传感器）</li>
<li>Humidity Sensor（湿度传感器）</li>
<li>On&#x2F;Off Sensor（开&#x2F;关 传感器）</li>
<li>Smoke CO Alarm（烟雾一氧化碳报警器）</li>
<li>Air Quality Sensor（空气质量传感器）</li>
<li>Water Freeze Detector（水冻探测器）</li>
<li>Water Leak Detector（漏水探测器）</li>
<li>Rain Sensor（雨量传感器）</li>
</ul>
<p>所有传感器对应的信息：</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
</tr>
</thead>
<tbody><tr>
<td>0x0015</td>
<td>Contact Sensor</td>
</tr>
<tr>
<td>0x0106</td>
<td>Light Sensor</td>
</tr>
<tr>
<td>0x0107</td>
<td>Occupancy Sensor</td>
</tr>
<tr>
<td>0x0302</td>
<td>Temperature Sensor</td>
</tr>
<tr>
<td>0x0305</td>
<td>Pressure Sensor</td>
</tr>
<tr>
<td>0x0306</td>
<td>Flow Sensor</td>
</tr>
<tr>
<td>0x0307</td>
<td>Humidity Sensor</td>
</tr>
<tr>
<td>0x0850</td>
<td>On&#x2F;Off Sensor</td>
</tr>
<tr>
<td>0x0076</td>
<td>Smoke CO Alarm</td>
</tr>
<tr>
<td>0x002c</td>
<td>Air Quality Sensor</td>
</tr>
<tr>
<td>0x0041</td>
<td>Water Freeze Detector</td>
</tr>
<tr>
<td>0x0043</td>
<td>Water Leak Detector</td>
</tr>
<tr>
<td>0x0044</td>
<td>Rain Sensor</td>
</tr>
</tbody></table>
<h2 id="Contact-Sensor"><a href="#Contact-Sensor" class="headerlink" title="Contact Sensor"></a>Contact Sensor</h2><p>接触式传感器是一种用于检测门窗等开口处是否关闭的设备。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x0015</td>
<td>Contact Sensor</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0045</td>
<td><strong>Boolean State</strong></td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0080</td>
<td>Boolean State Configuration</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
</tbody></table>
<h2 id="Light-Sensor"><a href="#Light-Sensor" class="headerlink" title="Light Sensor"></a>Light Sensor</h2><p>光传感器是一种能够检测环境光强度的设备。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x0106</td>
<td>Light Sensor</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0004</td>
<td>Groups</td>
<td>Client</td>
<td></td>
<td>[Zigbee]</td>
</tr>
<tr>
<td>0x0400</td>
<td>Illuminance Measurement</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
</tbody></table>
<p><em>Illuminance Measurement：光强度检测值</em></p>
<h2 id="Occupancy-Sendor"><a href="#Occupancy-Sendor" class="headerlink" title="Occupancy Sendor"></a>Occupancy Sendor</h2><p>占用传感器是一种用于检测一个区域是否有人或其他生物体存在的设备。可以通过以下技术检测生物体：红外线、超声波、微波、图像设备、雷达。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x0107</td>
<td>Occupancy Sensor</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0406</td>
<td>Occupancy Sesing</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
</tbody></table>
<h2 id="Temperature-Sensor"><a href="#Temperature-Sensor" class="headerlink" title="Temperature Sensor"></a>Temperature Sensor</h2><p>温度传感器是一种用于检测环境或物体温度的设备。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x0302</td>
<td>Temperature Sensor</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0402</td>
<td>Temperature Measurement</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0004</td>
<td>Groups</td>
<td>Client</td>
<td></td>
<td>[zigbee]</td>
</tr>
</tbody></table>
<h2 id="Pressure-Sensor"><a href="#Pressure-Sensor" class="headerlink" title="Pressure Sensor"></a>Pressure Sensor</h2><p>压力传感器是一种能够测量流体和气体压力变化设备。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x0305</td>
<td>Pressure Sensor</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0403</td>
<td>Pressure Measurement</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0004</td>
<td>Groups</td>
<td>Client</td>
<td></td>
<td>[zigbee]</td>
</tr>
</tbody></table>
<h2 id="Flow-Sensor"><a href="#Flow-Sensor" class="headerlink" title="Flow Sensor"></a>Flow Sensor</h2><p>流量传感器是一种用于测量流体（液体或气体）流动速率的设备。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x0306</td>
<td>Flow Sensor</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0404</td>
<td>Flow Measurement</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0004</td>
<td>Groups</td>
<td>Client</td>
<td></td>
<td>[zigbee]</td>
</tr>
</tbody></table>
<h2 id="Humidity-Sensor"><a href="#Humidity-Sensor" class="headerlink" title="Humidity Sensor"></a>Humidity Sensor</h2><p>湿度传感器是一种用于测量空气中水分含量的设备。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x0307</td>
<td>Humidity Sensor</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0405</td>
<td>Relative Humidity Measurement</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0004</td>
<td>Groups</td>
<td>Client</td>
<td></td>
<td>[zigbee]</td>
</tr>
</tbody></table>
<h2 id="On-Off-Sensor"><a href="#On-Off-Sensor" class="headerlink" title="On&#x2F;Off Sensor"></a>On&#x2F;Off Sensor</h2><p>开&#x2F;关传感器是一种用于检测设备或系统是否处于开启或关闭状态的传感器。例如，当绑定到一个可调光灯设备，能够匹配到灯是开启或关闭状态。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x0850</td>
<td>On&#x2F;Off Sensor</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0003</td>
<td>Identify</td>
<td>Client</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0062</td>
<td>Scenes Management</td>
<td>Client</td>
<td></td>
<td>P,O</td>
</tr>
<tr>
<td>0x0004</td>
<td>Groups</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0006</td>
<td>On&#x2F;Off</td>
<td>Client</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0300</td>
<td>Color Control</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
</tbody></table>
<h2 id="Smoke-CO-Alarm"><a href="#Smoke-CO-Alarm" class="headerlink" title="Smoke CO Alarm"></a>Smoke CO Alarm</h2><p>烟雾一氧化碳报警器是一种检测烟雾和一氧化碳的设备。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x0076</td>
<td>Smoke CO Alarm</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0004</td>
<td>Groups</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x005c</td>
<td>Smoke CO Alarm</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0405</td>
<td>Realative Humidity Measurement</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0402</td>
<td>Temperature Measurement</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x040c</td>
<td>Carbon Monixide Concentration Measurement</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
</tbody></table>
<h2 id="Air-Quality-Sensor"><a href="#Air-Quality-Sensor" class="headerlink" title="Air Quality Sensor"></a>Air Quality Sensor</h2><p>空气质量传感器是一种用于检测环境中空气质量的设备。可以检测多种空气污染物，例如：颗粒物（PM2.5）、挥发性有机化合物、一氧化碳、二氧化硫等。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x002c</td>
<td>Air Quality Sensor</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x005b</td>
<td>Air Quality</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0405</td>
<td>Realative Humidity Measurement</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0402</td>
<td>Temperature Measurement</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x040c</td>
<td>Carbon Monixide Concentration Measurement</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x040d</td>
<td>Carbon Dioxide Concentration Measurement</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0413</td>
<td>Nitrogen Dioxide Concentration Measurement</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0415</td>
<td>Ozone Concentration Measurement</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x042b</td>
<td>Formaldehyde Concentration Measurement</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x042c</td>
<td>PM1 Concentration Measurement</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x042a</td>
<td>PM2.5 Concentration Measurement</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x042d</td>
<td>PM10 Concentration Measurement</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x042f</td>
<td>Radon Concentration Measurement</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x042e</td>
<td>Total Volatile Organic Compounds Concentration Measurement</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
</tbody></table>
<p><em>名词解释：</em></p>
<p><em>1、Carbon Monixide Concentration Measurement：一氧化碳浓度测量</em></p>
<p><em>2、Carbon Dioxide Concentration Measurement：二氧化碳浓度测量</em></p>
<p><em>3、Nitrogen Dioxide Concentration Measurement：二氧化氮浓度测量</em></p>
<p><em>4、Ozone Concentration Measurement：臭氧浓度测量</em></p>
<p><em>5、Formaldehyde Concentration Measurement：甲醛浓度测量</em></p>
<p><em>6、Radon Concentration Measurement：氡浓度测量</em></p>
<p><em>7、Total Volatile Organic Compounds Concentration Measurement：发挥性有机物浓度总量测量</em></p>
<h2 id="Water-Freeze-Detector"><a href="#Water-Freeze-Detector" class="headerlink" title="Water Freeze Detector"></a>Water Freeze Detector</h2><p>水冻探测器是一种用于检测水温是否到达冰点的设备。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x0041</td>
<td>Water Freeze Detector</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0045</td>
<td>Boolean State</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0080</td>
<td>Boolean State Configuration</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
</tbody></table>
<p><strong>元素：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Element</th>
<th>Name</th>
<th>Constraint</th>
<th>Access</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0045</td>
<td>Boolean State</td>
<td>Event</td>
<td>StateChange</td>
<td></td>
<td></td>
<td>M</td>
</tr>
</tbody></table>
<h2 id="Water-Leak-Detector"><a href="#Water-Leak-Detector" class="headerlink" title="Water Leak Detector"></a>Water Leak Detector</h2><p>漏水检测器是一种用于检测是否漏水的传感器。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x0043</td>
<td>Water Leak Detector</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0045</td>
<td>Boolean State</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0080</td>
<td>Boolean State Configuration</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
</tbody></table>
<p><strong>元素：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Element</th>
<th>Name</th>
<th>Constraint</th>
<th>Access</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0045</td>
<td>Boolean State</td>
<td>Event</td>
<td>StateChange</td>
<td></td>
<td></td>
<td>M</td>
</tr>
</tbody></table>
<h2 id="Rain-Sensor"><a href="#Rain-Sensor" class="headerlink" title="Rain Sensor"></a>Rain Sensor</h2><p>雨量传感器是一种用于检测降雨强度的设备。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x0044</td>
<td>Rain Sensor</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0045</td>
<td>Boolean State</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0080</td>
<td>Boolean State Configuration</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
</tbody></table>
<p><strong>元素：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Element</th>
<th>Name</th>
<th>Constraint</th>
<th>Access</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0045</td>
<td>Boolean State</td>
<td>Event</td>
<td>StateChange</td>
<td></td>
<td></td>
<td>M</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Matter</category>
      </categories>
      <tags>
        <tag>Sensor Device</tag>
      </tags>
  </entry>
  <entry>
    <title>Matter: Smart Plugs/Outlets and Other Actuators</title>
    <url>/2024/09/05/2024/Matter-Smart-Plugs-Outlets-and-Other-Actuators/</url>
    <content><![CDATA[<p>智能插头&#x2F;插座和其他执行器分为很多种，分别有：On&#x2F;Off Plug-in Unit、Dimmable Plug-In Unit、Pump、Water Value</p>
<p>Smart Plugs&#x2F;Outlets and Other Actuators类型所有设备信息：</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
</tr>
</thead>
<tbody><tr>
<td>0x010a</td>
<td>On&#x2F;Off Plug-in Unit</td>
</tr>
<tr>
<td>0x010b</td>
<td>Dimmable Plug-In Unit</td>
</tr>
<tr>
<td>0x0303</td>
<td>Pump</td>
</tr>
<tr>
<td>0x0042</td>
<td>Water Value</td>
</tr>
</tbody></table>
<h2 id="On-Off-Plug-in-Unit"><a href="#On-Off-Plug-in-Unit" class="headerlink" title="On&#x2F;Off Plug-in Unit"></a>On&#x2F;Off Plug-in Unit</h2><p>开&#x2F;关 插头单元是一种为插入其中的另一个设备提供电源的设备，并且能够打开或关闭所提供的电源。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x010a</td>
<td>On&#x2F;Off Plug-in Unit</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0004</td>
<td>Groups</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0062</td>
<td>Scenes Management</td>
<td>Server</td>
<td></td>
<td>P,M</td>
</tr>
<tr>
<td>0x0006</td>
<td><strong>On&#x2F;Off</strong></td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0406</td>
<td>Occupancy Sesing</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
</tbody></table>
<p><strong>元素：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Element</th>
<th>Name</th>
<th>Constraint</th>
<th>Access</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Command</td>
<td>TriggerEffect</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0062</td>
<td>Scenes Management</td>
<td>Command</td>
<td>CopyScene</td>
<td></td>
<td></td>
<td>P,M</td>
</tr>
<tr>
<td>0x0006</td>
<td>On&#x2F;Off</td>
<td>Feature</td>
<td>Lighting</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Feature</td>
<td>OnOff</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Feature</td>
<td>Lighting</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Attribute</td>
<td>CurrentLevel</td>
<td>1 to 254</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Attribute</td>
<td>MinLebel</td>
<td>1</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Attribute</td>
<td>MaxLevel</td>
<td>254</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="Dimmable-Plug-In-Unit"><a href="#Dimmable-Plug-In-Unit" class="headerlink" title="Dimmable Plug-In Unit"></a>Dimmable Plug-In Unit</h2><p>可调光插头是一种为插入其中的另一台设备提供电源的设备，可以打开或关闭，并调整其亮度。可调光插头通常用于通过其主电源连接使用相位切割来控制传统的非通信灯。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x010b</td>
<td>Dimmable Plug-In Unit</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0004</td>
<td>Groups</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0062</td>
<td>Scenes Management</td>
<td>Server</td>
<td></td>
<td>P,M</td>
</tr>
<tr>
<td>0x0006</td>
<td>On&#x2F;Off</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0406</td>
<td>Occupancy Sesing</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
</tbody></table>
<p><strong>元素：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Element</th>
<th>Name</th>
<th>Constraint</th>
<th>Access</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Command</td>
<td>TriggerEffect</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0062</td>
<td>Scenes Management</td>
<td>Command</td>
<td>CopyScene</td>
<td></td>
<td></td>
<td>P,M</td>
</tr>
<tr>
<td>0x0006</td>
<td>On&#x2F;Off</td>
<td>Feature</td>
<td>Lighting</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Feature</td>
<td>OnOff</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Feature</td>
<td>Lighting</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Attribute</td>
<td>CurrentLevel</td>
<td>1 to 254</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Attribute</td>
<td>MinLebel</td>
<td>1</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Attribute</td>
<td>MaxLevel</td>
<td>254</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="Pump"><a href="#Pump" class="headerlink" title="Pump"></a>Pump</h2><p>泵设备是一种可以变速的泵。它可以有可选的内置传感器和调节机制。它通常用于泵送水等流体。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x0303</td>
<td>Pump</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0006</td>
<td>On&#x2F;Off</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0200</td>
<td>Pump Configuration and Control</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0004</td>
<td>Groups</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0062</td>
<td>Scenes Management</td>
<td>Server</td>
<td></td>
<td>P,O</td>
</tr>
<tr>
<td>0x0402</td>
<td>Temperature Measurement</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0403</td>
<td>Pressure Measurement</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0404</td>
<td>Flow Measurement</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0402</td>
<td>Temperature Measurement</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0403</td>
<td>Pressure Measurement</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0404</td>
<td>Flow Measurement</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0406</td>
<td>Occupancu Sensing</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
</tbody></table>
<h2 id="Water-Value"><a href="#Water-Value" class="headerlink" title="Water Value"></a>Water Value</h2><p>Water Value的定义与水阀设备类型定义一致。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x0042</td>
<td>Water Value</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0081</td>
<td>Value Configuration and Control</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0404</td>
<td>Flow Measurement</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0404</td>
<td>Flow Measurement</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Matter</category>
      </categories>
      <tags>
        <tag>Smart Plug/Outlet</tag>
        <tag>Actuator</tag>
        <tag>Matter</tag>
      </tags>
  </entry>
  <entry>
    <title>core dump and gdb</title>
    <url>/2024/09/03/2024/core-dump-and-gdb/</url>
    <content><![CDATA[<h2 id="core-dump功能"><a href="#core-dump功能" class="headerlink" title="core dump功能"></a>core dump功能</h2><p><code>core dump</code> 文件是在程序因严重错误（如段错误）而崩溃时由操作系统生成的一个内存映像文件（支持自定义设置设备文件名格式）。这个文件包含了程序崩溃时刻的内存状态，包括寄存器的状态、栈、全局变量等数据。这对于调试程序（gdb）非常有用，因为它可以帮助开发者理解程序在崩溃前的状态，从而定位和解决问题。</p>
<p>linux系统默认关闭core dump文件的生成，原因是：需要占用一部分系统开销。</p>
<ul>
<li>查看core dump是否开启</li>
</ul>
<p>可以通过命令查看是否启动core dump功能：<code>ulimit -c</code>，若打印结果为：0，说明没有启动core dump功能。</p>
<p><em>可以通过该命令查看详细信息：<code>ulimit -a</code></em></p>
<ul>
<li>开启core dump功能</li>
</ul>
<p>在当前的shell窗口启用core dump功能，执行：<code>ulimit -c unlimited</code> ，即生成的core文件大小不受限制。如果想限制core文件的大小，可以执行：<code>ulimit -c 1024</code>，即生成的core文件最大限制为1024KB。如果想关闭core dump功能，执行：<code>ulimit -c 0</code> 即可。</p>
<p><em>注意：shell窗口关闭后，core dump功能失效</em></p>
<ul>
<li>core dump文件名格式</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看core dump文件名格式。%p表示程序ID，%e表示程序文件名</span></span><br><span class="line">$ <span class="built_in">cat</span> /proc/sys/kernel/core_pattern</span><br><span class="line">/data/core-%p-%e</span><br></pre></td></tr></table></figure>

<ul>
<li>core dump文件的生成</li>
</ul>
<p>在使用gcc编译目标程序时，添加参数 <code>-g</code> ，执行目标程序，复现Segment Fault错误，此时在生成了core dump文件 <code>core-2585-g_main_loop_run</code></p>
<h2 id="gdb调试功能"><a href="#gdb调试功能" class="headerlink" title="gdb调试功能"></a>gdb调试功能</h2><p>将core dump文件拷贝至宿主机，用交叉编译链gdb去分析core dump文件。但是执行：<code>./arm-linux-gnueabihf-gdb --help</code> ，报错并提示缺少动态库文件。</p>
<p>查看一下gdb依赖的动态库文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cj@5aee87bd72ed:/workspace/xxx/prebuilts/gcc/linux-x86/arm/gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf/bin$ ldd ./arm-linux-gnueabihf-gdb</span><br><span class="line">        linux-vdso.so.1 (0x00007ffea9745000)</span><br><span class="line">        libtinfo.so.5 =&gt; not found</span><br><span class="line">        libncursesw.so.5 =&gt; not found</span><br><span class="line">        libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x0000719329bca000)</span><br><span class="line">        libpython2.7.so.1.0 =&gt; not found</span><br><span class="line">        libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x0000719329837000)</span><br><span class="line">        libutil.so.1 =&gt; /lib/x86_64-linux-gnu/libutil.so.1 (0x0000719329832000)</span><br><span class="line">        libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007193296e1000)</span><br><span class="line">        libexpat.so.1 =&gt; /lib/x86_64-linux-gnu/libexpat.so.1 (0x00007193296b3000)</span><br><span class="line">        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007193294c1000)</span><br><span class="line">        /lib64/ld-linux-x86-64.so.2 (0x0000719329c41000)</span><br><span class="line">        libtinfo.so.6 =&gt; /lib/x86_64-linux-gnu/libtinfo.so.6 (0x0000719329491000)</span><br><span class="line">        libz.so.1 =&gt; /lib/x86_64-linux-gnu/libz.so.1 (0x0000719329475000)</span><br></pre></td></tr></table></figure>

<p>分别有三个动态库文件找不到：libtinfo.so.5、libncursesw.so.5、libpython2.7.so.1.0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装libncurses5 可以解决libtinfo.so.5缺失的问题</span></span><br><span class="line"><span class="built_in">sudo</span> apt install libncurses5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libpython2.7 可以解决libpython2.7.so.1.0缺失问题</span></span><br><span class="line"><span class="built_in">sudo</span> apt install libpython2.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装libncursesw5-dev后，并创建动态库的软链接</span></span><br><span class="line"><span class="comment"># 安装时，可以显示已经安装了，没有最新安装。而且安装的动态库是libncursesw.so.6.2</span></span><br><span class="line"><span class="built_in">sudo</span> apt install libncursesw5-dev</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/lib/x86_64-linux-gnu/libncursesw.so.6.2 /usr/lib/x86_64-linux-gnu/libncursesw.so.5</span><br></pre></td></tr></table></figure>

<p>至此，gdb可以正常运行。</p>
<p>调试目标程序和其对应的core dump文件，执行：&#96;.&#x2F;arm-linux-gnueabihf-gdb .&#x2F;target_program .&#x2F;core-2585-g_main_loop_run</p>
<p><em>注意：这里将目标程序和对应的core dump文件拷贝到了和gdb同一文件夹</em></p>
<p>以下是执行的结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Use the <span class="string">&quot;info sharedlibrary&quot;</span> <span class="built_in">command</span> to see the complete listing.</span><br><span class="line">Do you need <span class="string">&quot;set solib-search-path&quot;</span> or <span class="string">&quot;set sysroot&quot;</span>?</span><br><span class="line">Core was generated by `./bt-ctl/bt-ctl<span class="string">&#x27;.</span></span><br><span class="line"><span class="string">Program terminated with signal SIGSEGV, Segmentation fault.</span></span><br><span class="line"><span class="string">#0  0x00000000 in ?? ()</span></span><br><span class="line"><span class="string">[Current thread is 1 (LWP 2588)]</span></span><br><span class="line"><span class="string">(gdb) bt</span></span><br><span class="line"><span class="string">#0  0x00000000 in ?? ()</span></span><br><span class="line"><span class="string">#1  0xa6def8b0 in ?? ()</span></span><br><span class="line"><span class="string">Backtrace stopped: previous frame identical to this frame (corrupt stack?)</span></span><br><span class="line"><span class="string">(gdb) </span></span><br></pre></td></tr></table></figure>

<p>可以看到程序是由于SIGSEGV导致异常终止，通过 <code>bt</code> 打印堆栈，却看不到详细信息。由于我的目标程序无法移植到宿主机运行，故无法查看具体是由于哪一行代码导致的报错。</p>
<p>但是可以修改代码，在程序中捕捉SIGSEGV信号，并打印出堆栈信息。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要的头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;execinfo.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printStackTrace</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *callStack[<span class="number">1280</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">char</span> **messages = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> numFrames = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取调用栈信息</span></span><br><span class="line">    numFrames = backtrace(callStack, <span class="number">1280</span>);</span><br><span class="line">    messages = backtrace_symbols(callStack, numFrames);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Obtained %zd frames.\n&quot;</span>, numFrames);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numFrames; ++i) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %2d %s\n&quot;</span>, i, messages[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(messages); <span class="comment">// 释放内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://jardaliao.github.io/2024/08/07/%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%8C%E6%9D%BF%E5%AD%90%E9%87%8C%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%B4%A9%E4%BA%86/">1、怎么办，板子里的程序崩了</a></p>
<p><a href="https://blog.csdn.net/lsqtzj/article/details/108553576#:~:text=%E8%BF%99%E4%B8%AA%E9%94%99%E8%AF%AF%E9%80%9A%E5%B8%B8%E6%98%AF%E7%94%B1">2、ubuntu 缺少 libtinfo.so.5 问题</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>gdb</tag>
        <tag>core dump</tag>
      </tags>
  </entry>
  <entry>
    <title>Matter: Switches and Controls Device Types</title>
    <url>/2024/08/31/2024/Matter-Switches-and-Controls-DeviceTypes/</url>
    <content><![CDATA[<p>开关类设备的类别也为多种，包括：On&#x2F;Off Light Switch、Dimmer Switch、Color Dimmer Switch、Control Bridge、Pump Controller、Generic Switch</p>
<p>switches and controls类型所有信息：</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
</tr>
</thead>
<tbody><tr>
<td>0x0103</td>
<td>On&#x2F;Off Light Switch</td>
</tr>
<tr>
<td>0x0104</td>
<td>Dimmer Switch</td>
</tr>
<tr>
<td>0x0105</td>
<td>Color Dimmer Switch</td>
</tr>
<tr>
<td>0x0840</td>
<td>Control Bridge</td>
</tr>
<tr>
<td>0x0304</td>
<td>Pump Controller</td>
</tr>
<tr>
<td>0x000f</td>
<td>Generic Switch</td>
</tr>
</tbody></table>
<h2 id="On-Off-Light-Switch"><a href="#On-Off-Light-Switch" class="headerlink" title="On&#x2F;Off Light Switch"></a>On&#x2F;Off Light Switch</h2><p>开&#x2F;关灯 开关是一种控制设备，当它与照明设备（如开&#x2F;关灯）绑定时，可用于打开或关闭该设备。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x0103</td>
<td>On&#x2F;Off Light Switch</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0003</td>
<td>Identify</td>
<td>Client</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0004</td>
<td>Groups</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0006</td>
<td>On&#x2F;Off</td>
<td>Client</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0062</td>
<td>Scenes Management</td>
<td>Client</td>
<td></td>
<td>P,O</td>
</tr>
</tbody></table>
<h2 id="Dimmer-Switch"><a href="#Dimmer-Switch" class="headerlink" title="Dimmer Switch"></a>Dimmer Switch</h2><p>调光开关是一种控制设备，当它与可调光灯等照明设备绑定时，可以用于打开或关闭该设备，并调节发射光的强度。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x0104</td>
<td>Dimmer Switch</td>
<td>On&#x2F;Off Light Switch</td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0003</td>
<td>Identify</td>
<td>Client</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0004</td>
<td>Groups</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0006</td>
<td>On&#x2F;Off</td>
<td>Client</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0062</td>
<td>Scenes Management</td>
<td>Client</td>
<td></td>
<td>P,O</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Client</td>
<td></td>
<td>M</td>
</tr>
</tbody></table>
<h2 id="Color-Dimmer-Switch"><a href="#Color-Dimmer-Switch" class="headerlink" title="Color Dimmer Switch"></a>Color Dimmer Switch</h2><p>调色开关是一种控制器设备，当它与照明设备（如扩展色光灯）绑定时，可以用来调节所发射光的颜色。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x0105</td>
<td>Color Dimmer Switch</td>
<td>Dimmer Switch</td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0003</td>
<td>Identify</td>
<td>Client</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0004</td>
<td>Groups</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0006</td>
<td>On&#x2F;Off</td>
<td>Client</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0062</td>
<td>Scenes Management</td>
<td>Client</td>
<td></td>
<td>P,O</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Client</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0300</td>
<td>Color Control</td>
<td>Client</td>
<td></td>
<td>M</td>
</tr>
</tbody></table>
<h2 id="Control-Bridge"><a href="#Control-Bridge" class="headerlink" title="Control Bridge"></a>Control Bridge</h2><p>控制桥是一种控制器设备，当它与照明设备（例如扩展色光）绑定时，可用于打开或关闭设备、调整发射光的强度和调整发射光的颜色。此外，控制桥设备还可用于设置场景。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x0840</td>
<td>Control Bridge</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0003</td>
<td>Identify</td>
<td>Client</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0004</td>
<td>Groups</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0006</td>
<td>On&#x2F;Off</td>
<td>Client</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0062</td>
<td>Scenes Management</td>
<td>Client</td>
<td></td>
<td>P,O</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Client</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0300</td>
<td>Color Control</td>
<td>Client</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0400</td>
<td>Illuminance Measurement</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0406</td>
<td>Occupancy Sensing</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
</tbody></table>
<h2 id="Pump-Controller"><a href="#Pump-Controller" class="headerlink" title="Pump Controller"></a>Pump Controller</h2><p>泵控制器设备能够配置和控制泵设备。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x0304</td>
<td>Pump Controller</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0003</td>
<td>Identify</td>
<td>Client</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0004</td>
<td>Groups</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0006</td>
<td>On&#x2F;Off</td>
<td>Client</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0062</td>
<td>Scenes Management</td>
<td>Client</td>
<td></td>
<td>P,O</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Client</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x001e</td>
<td>Binding</td>
<td>Client</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0200</td>
<td>Pump Configuration and Control</td>
<td>Client</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0402</td>
<td>Temperature Measurement</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0403</td>
<td>Presessure Measurement</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0404</td>
<td>Flow Measurement</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
</tbody></table>
<h2 id="Generic-Switch"><a href="#Generic-Switch" class="headerlink" title="Generic Switch"></a>Generic Switch</h2><p>通用开关</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x000f</td>
<td>Generic Switch</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x003b</td>
<td>Switch</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Matter</category>
      </categories>
      <tags>
        <tag>matter-1-3-device-library-specification</tag>
        <tag>Switches and Controls of Matter Device</tag>
      </tags>
  </entry>
  <entry>
    <title>bluetooth：raspberry4b play audio</title>
    <url>/2024/08/28/2024/raspberry4b-play-audio/</url>
    <content><![CDATA[<p>环境介绍：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 硬件信息</span></span><br><span class="line">树莓派4B 8GB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统信息</span></span><br><span class="line"><span class="built_in">uname</span> -a</span><br><span class="line">Linux caojun-desktop 6.8.0-1010-raspi <span class="comment">#11-Ubuntu SMP PREEMPT_DYNAMIC Thu Aug  8 23:22:41 UTC 2024 aarch64 aarch64 aarch64 GNU/Linux</span></span><br></pre></td></tr></table></figure>



<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p><code>&#123;% post_link 'bluetoothctl client tool' %&#125;</code> 介绍了为什么要写一个蓝牙应用库，既然选择了在树莓派上开发，那么就需要在树莓派上验证蓝牙应用库的可用性。通过树莓派运行蓝牙应用库连接蓝牙音响设备播放音频文件，我就可以证明蓝牙应用库的可用性。</p>
<p>在购入树莓派之前，我有查询过树莓派可以实现多媒体应用：视频和音频。树莓派硬件自带了一个3.5mm的音频输出口，以及两个micro hdmi接口。</p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>查看树莓派4B有哪些音频播放接口，可以通过一下两种方式：</p>
<ul>
<li><p>方式1：执行命令 <code>cat /proc/asound/cards</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 [Headphones     ]: bcm2835_headpho - bcm2835 Headphones</span><br><span class="line">                     bcm2835 Headphones</span><br><span class="line">1 [vc4hdmi0       ]: vc4-hdmi - vc4-hdmi-0</span><br><span class="line">                     vc4-hdmi-0</span><br><span class="line">2 [vc4hdmi1       ]: vc4-hdmi - vc4-hdmi-1</span><br><span class="line">                     vc4-hdmi-1</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式2：执行命令 <code>sudo apaly -l</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">**** List of PLAYBACK Hardware Devices ****</span><br><span class="line">card 0: Headphones [bcm2835 Headphones], device 0: bcm2835 Headphones [bcm2835 Headphones]</span><br><span class="line">  Subdevices: 8/8</span><br><span class="line">  Subdevice <span class="comment">#0: subdevice #0</span></span><br><span class="line">  Subdevice <span class="comment">#1: subdevice #1</span></span><br><span class="line">  Subdevice <span class="comment">#2: subdevice #2</span></span><br><span class="line">  Subdevice <span class="comment">#3: subdevice #3</span></span><br><span class="line">  Subdevice <span class="comment">#4: subdevice #4</span></span><br><span class="line">  Subdevice <span class="comment">#5: subdevice #5</span></span><br><span class="line">  Subdevice <span class="comment">#6: subdevice #6</span></span><br><span class="line">  Subdevice <span class="comment">#7: subdevice #7</span></span><br><span class="line">card 1: vc4hdmi0 [vc4-hdmi-0], device 0: MAI PCM i2s-hifi-0 [MAI PCM i2s-hifi-0]</span><br><span class="line">  Subdevices: 1/1</span><br><span class="line">  Subdevice <span class="comment">#0: subdevice #0</span></span><br><span class="line">card 2: vc4hdmi1 [vc4-hdmi-1], device 0: MAI PCM i2s-hifi-0 [MAI PCM i2s-hifi-0]</span><br><span class="line">  Subdevices: 1/1</span><br><span class="line">  Subdevice <span class="comment">#0: subdevice #0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p>通过上述查询接口，树莓派4B提供了3个音频接口：bcm2835 Headphones（即3.5mm耳机口）、vc4-hdmi-0、vc4-hdmi-1</p>
<h3 id="耳机口播放音频"><a href="#耳机口播放音频" class="headerlink" title="耳机口播放音频"></a>耳机口播放音频</h3><p>准备工作：</p>
<ul>
<li>3.5mm耳机线插入树莓派</li>
<li>树莓派中下载alsa-utils工具</li>
</ul>
<p>可以通过命令查询alsa-utils是否安装：<code>dpkg -l | grep alsa-utils</code>，若没有安装，则通过命令安装：<code>sudo apt install alsa-utils</code></p>
<p>alsa-utils工具包含了：aplay（播放音频） 、 arecord（录制音频） 、 alsamixer（基于文本界面的音频设备管理） 、 amixer（调整设备音量），而且在 <code>/usr/share/soudns/alsa</code> 目录下会提供多个wav音频文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ll /usr/share/sounds/alsa/</span><br><span class="line">-rw-r--r--  1 root root 137134  4月  7 15:09 Front_Center.wav</span><br><span class="line">-rw-r--r--  1 root root 142128  4月  7 15:09 Front_Left.wav</span><br><span class="line">-rw-r--r--  1 root root 146990  4月  7 15:09 Front_Right.wav</span><br><span class="line">-rw-r--r--  1 root root 135202  4月  7 15:09 Noise.wav</span><br><span class="line">-rw-r--r--  1 root root 130096  4月  7 15:09 Rear_Center.wav</span><br><span class="line">-rw-r--r--  1 root root 126064  4月  7 15:09 Rear_Left.wav</span><br><span class="line">-rw-r--r--  1 root root 146480  4月  7 15:09 Rear_Right.wav</span><br><span class="line">-rw-r--r--  1 root root 134868  4月  7 15:09 Side_Left.wav</span><br><span class="line">-rw-r--r--  1 root root 129966  4月  7 15:09 Side_Right.wav</span><br></pre></td></tr></table></figure>

<p>可以先通过alsamixer选择默认音频设备，并调节音量。接着通过aplay播放wav音频文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 播放方式1</span></span><br><span class="line"><span class="built_in">sudo</span> aplay /usr/share/sounds/alsa/Front_Center.wav</span><br><span class="line"></span><br><span class="line"><span class="comment"># 播放方式2, 指定CARD和DEV</span></span><br><span class="line"><span class="built_in">sudo</span> aplay /usr/share/sounds/alsa/Front_Center.wav -D plughw:CARD=0,DEV=0</span><br></pre></td></tr></table></figure>

<p>若一切正常，则会从耳机中听到英文声音：Frong Center</p>
<p>调节设备音量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 音量调节至90%</span></span><br><span class="line">amixer sset Master 90%</span><br><span class="line"></span><br><span class="line"><span class="comment"># 音量调节至20%</span></span><br><span class="line">amixer sset Master 20%</span><br></pre></td></tr></table></figure>

<p>再次播放wav音频文件，验证音量设备是否成功。</p>
<p><em>注意：这里发现一个奇怪的现象：对于alsa-utils工具包的软件都需要使用管理员权限执行，即sudo，否则就会有问题。</em></p>
<h2 id="蓝牙音响播放音频"><a href="#蓝牙音响播放音频" class="headerlink" title="蓝牙音响播放音频"></a>蓝牙音响播放音频</h2><p>树莓派通过蓝牙适配器连接蓝牙音响，然后播放音频文件。其中主要解决的问题是：蓝牙连接成功后，如何将将音频文件传输到蓝牙音响，并输出音频？</p>
<p>通过互联网上的资料，我可以确认有两种解决方案：</p>
<ul>
<li><p>bluez+bluealsa</p>
<p><code>bluealsa</code> 是一个用于将 ALSA（Advanced Linux Sound Architecture，高级Linux音频架构）与 Bluetooth 低功耗（即 BLE）音频协议相结合的解决方案。它使得 Linux 系统能够通过 BLE 连接蓝牙音频设备，并让蓝牙音频设备播放音频文件。</p>
<p>bluealsa 的核心是<code>bluealsa</code>与 BlueZ 蓝牙守护进程<code>bluetoothd</code>和本地蓝牙适配器交互的守护进程。它处理 A2DP、HFP 和 HSP 的配置文件（即Profile）连接和配置逻辑，并通过 D-Bus 将生成的音频流呈现给应用程序。</p>
</li>
<li><p>bluez+pulseaudio</p>
</li>
</ul>
<h3 id="编译安装bluealsa"><a href="#编译安装bluealsa" class="headerlink" title="编译安装bluealsa"></a>编译安装bluealsa</h3><p><a href="https://github.com/Arkq/bluez-alsa">Github 开源项目：bluez-alsa</a></p>
<p>该开源项目README.md文件给出了一个提示：</p>
<blockquote>
<p>警告：</p>
<p>从tag 4.3.1版本最新的源文件为核心组件使用了新的名字：</p>
<ul>
<li><code>bluealsa</code> daemon现在改为了 <code>bluealsad</code> daemon</li>
<li><code>bluealsa-cli</code> utility现在改为了 <code>bluealsactl</code> utility</li>
</ul>
</blockquote>
<p>由于安装Ubuntu 24.04的树莓派目前不支持通过apt安装bluealsa，故这里通过编译安装，以下是详细过程。</p>
<ul>
<li><p>对于如何通过源码编译构建，该项目也很贴心的给出了指引文件<a href="https://github.com/arkq/bluez-alsa/blob/master/INSTALL.md">INSTALL.md</a>。更加详细的编译安装教程可以查看<a href="https://github.com/arkq/bluez-alsa/wiki/Installation-from-source">Installation from source</a>，甚至不同的操作系统也都给出了，例如：Debain&#x2F;Raspberry Pi OS&#x2F;Ubuntu、Fedora、Arch。这里选择Ubuntu的安装过程即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装编译环境</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install git automake build-essential libtool pkg-config python3-docutils</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libasound2-dev libbluetooth-dev libdbus-1-dev libglib2.0-dev libsbc-dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过git克隆blue-alsa仓库到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆仓库</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/arkq/bluez-alsa.git</span><br><span class="line"><span class="built_in">cd</span> blue-alsa</span><br></pre></td></tr></table></figure>
</li>
<li><p>准备编译构建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用自动配置工具适配当前开发环境，最后生成configure配置文件</span></span><br><span class="line">autoreconf --install --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建build目录，存放编译过程文件</span></span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在build目录下，运行配置文件（这里没有增加额外的参数）</span></span><br><span class="line">../configure</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译和安装</span></span><br><span class="line">make</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="运行bluealsa"><a href="#运行bluealsa" class="headerlink" title="运行bluealsa"></a>运行bluealsa</h3><p>在连接蓝牙音频设备之前，确保 <code>hciconfig -a</code> 可以查询到hci接口，确保 <code>bluetoothd</code> 已经运行。然后运行 <code>bluealsa</code> ，执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行方式1，以root权限运行，注意：这里有bluealsa后台打印信息输出 </span></span><br><span class="line"><span class="built_in">sudo</span> bluealsa --profile=a2dp-source &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行方式2，以root权限运行，禁止bluealsa后台打印信息输出</span></span><br><span class="line"><span class="built_in">sudo</span> bluealsa --profile=a2dp-source &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行方式3，通过systemd运行bluealsa</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl start bluealsa.service</span><br></pre></td></tr></table></figure>



<p>使用 <code>bluetoothctl</code> 搜索、配对、连接蓝牙音频设备（此部分不做说明），修改asoundrc.conf，最后使用 <code>aplay</code> 播放wav音频文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改asoundrc.conf</span></span><br><span class="line">pcm.!default <span class="string">&quot;bluealsa&quot;</span></span><br><span class="line">ctl.!default <span class="string">&quot;bluealsa&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># aplay播放wav文件</span></span><br><span class="line"><span class="built_in">sudo</span> aplay /usr/share/sounds/alsa/Front_Center.wav</span><br></pre></td></tr></table></figure>



<p><strong>asoundrc.conf</strong></p>
<p>ALSA 正常工作不需要用户端文件<code>.asoundrc</code> 或 <code>asound.conf</code>配置文件。<code>asoundrc.conf</code> 文件用于通过 alsa-lib 层实现额外的功能，例如路由和采样率转换。</p>
<p>alsa-lib 软件包提供了 <code>/usr/share/alsa/alsa.conf</code> 文件作为<em>主入口点</em>。该文件负责包含系统上所有可能的 .asoundrc 格式文件。alsa.conf 会加载系统全局自定义设置文件 &#x2F;etc&#x2F;asound.conf 和每个用户的自定义设置文件 ~&#x2F;.asoundrc。</p>
<p>用户自定义的 <code>~/.asoundrd.conf </code> 文件需要用户手动创建，并且文件该作用域大于全局自定义的 <code>/etc/asoundrc.conf</code> 。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cursorhu.github.io/2021/09/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%BD%BF%E7%94%A8ALSA-A2DP-PulseAudio%E8%87%AA%E5%88%B6%E8%93%9D%E7%89%99%E9%9F%B3%E7%AE%B1/">1、树莓派笔记：使用ALSA+A2DP+PulseAudio自制蓝牙音箱</a></p>
<p><a href="https://www.alsa-project.org/main/index.php/Asoundrc">2、Asoundrc</a></p>
]]></content>
      <categories>
        <category>bluetooth</category>
      </categories>
      <tags>
        <tag>raspberry4b</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh remote login</title>
    <url>/2024/08/21/2024/ssh-remote-login/</url>
    <content><![CDATA[<h2 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装ssh</h2><p>一般都是在本地PC通过ssh远程连接服务器，在本地PC基本都有ssh client程序，而服务器不一定会有ssh server程序。所以首先第一步要确认<strong>服务器</strong>是否已经安装了ssh server程序（即openssh-server），若已经安装，则跳过；若没有安装，则接下来安装步骤。</p>
<ul>
<li><p>服务器上检查是否安装 openssh-server</p>
<p>可以通过如下命令查询：<code>dpkg -l | grep openssh-server</code></p>
</li>
<li><p>服务器上安装openssh-server</p>
<p>可以通过如下命令安装：<code>sudo apt update &amp;&amp; sudo apt install openssh-server</code></p>
</li>
<li><p>服务器上检查sshd服务是否启动</p>
<p>可以通过几种方式去查询，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式1</span></span><br><span class="line">ps -ef | grep sshd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2</span></span><br><span class="line">systemctl status ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式3</span></span><br><span class="line">service ssh status</span><br></pre></td></tr></table></figure>

<p>若服务没有启动，则可以通过几种方式去启动，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式1</span></span><br><span class="line">systtemctl start ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2</span></span><br><span class="line">service ssh start</span><br></pre></td></tr></table></figure></li>
</ul>
<p>至此，在服务器上安装ssh（即openssh-server）完成。</p>
<h2 id="登录ssh"><a href="#登录ssh" class="headerlink" title="登录ssh"></a>登录ssh</h2><p>在服务器上安装ssh后，可以在本地PC通过ssh client连接到服务器ssh server，登录的方式有：<strong>秘钥登录</strong> 和 <strong>公钥登录</strong>。</p>
<h3 id="秘钥登录"><a href="#秘钥登录" class="headerlink" title="秘钥登录"></a>秘钥登录</h3><p>秘钥登录就是通过用户名和密码进行登录，例如通过秘钥登录到树莓派（作为服务器角色）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># raspberry是树莓派的主机名，也可以替换为树莓派的IP地址。执行命令后，会要求输入pi用户的密码。</span></span><br><span class="line">ssh pi@raspberrypi</span><br></pre></td></tr></table></figure>

<p><em>注意：这里没有使用树莓派的IP，而是使用树莓派的主机名。因为树莓派启动了avahi-daemon服务，将树莓派主机名通过mDNS组播，这样树莓派主机名就可以替换它的IP地址。</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pi@raspberrypi:~$ ps -ef | grep avahi</span><br><span class="line">avahi       1014       1  0 15:29 ?        00:00:00 avahi-daemon: running [raspberrypi.local]</span><br><span class="line">avahi       1051    1014  0 15:30 ?        00:00:00 avahi-daemon: <span class="built_in">chroot</span> helper</span><br><span class="line">pi          3046    3029 50 15:50 pts/1    00:00:00 grep --color=auto avahi</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="公钥登录"><a href="#公钥登录" class="headerlink" title="公钥登录"></a>公钥登录</h3><p>公钥登录是指将本地PC的公钥上传到服务器上，本地PC将登录信息用私钥签名给服务器，服务器用本地PC的公钥鉴别。</p>
<ul>
<li><p><strong>本地PC创建公钥</strong></p>
<p>通过命令创建公钥：<code>ssh-keygen</code>，接下来按下两次次回车键即可创建完成。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pi@raspberrypi:~$ ssh-keygen -t rsa -C <span class="string">&quot;caoj97141@gmail.com&quot;</span> -f ~/.ssh/id_rsa</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /home/pi/.ssh/id_rsa</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /home/pi/.ssh/id_rsa.pub</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:*****ro74Dm9Zn****sfk91dbb****CLjnEOzJD**** caoj97141@gmail.com</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 3072]----+</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|          E      |</span></span><br><span class="line"><span class="string">|         = o    o|</span></span><br><span class="line"><span class="string">|        S o    .+|</span></span><br><span class="line"><span class="string">|        .*     .B|</span></span><br><span class="line"><span class="string">|       . +* o .*=|</span></span><br><span class="line"><span class="string">|        +.=Xo=oo*|</span></span><br><span class="line"><span class="string">|         =%@*o+=B|</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p>执行命令后会提示输入两次密码（该密码是你push文件的时候要输入的密码，而不是github管理者的密码），当然也不可以不输入密码，直接回车跳过。这样设置之后，git push时就不需要输入密码，直接提交到git仓库。</p>
<p>命令执行完成后，生成秘钥文件（公钥和私钥）：<code>~/.ssh/id_rsa.pub</code> 和 <code>~/.ssh/id_rsa</code></p>
</li>
<li><p><strong>上传公钥到服务器</strong></p>
<p>通过命令将公钥上传到服务器，可以使用如下命令：<code>cd ~/.ssh &amp;&amp; scp id_rsa.pub pi@raspberrypi:/home/pi</code></p>
</li>
<li><p><strong>服务器修改ssh配置</strong></p>
<p>先在服务器创建 <code>~/.ssh/authorized_keys</code>，然后将本地PC的公钥写进入。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建文件</span></span><br><span class="line"><span class="built_in">mkdir</span> /home/pi/.ssh </span><br><span class="line"><span class="built_in">touch</span> /home/pi/.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公钥写入</span></span><br><span class="line"><span class="built_in">cd</span> /home/pi/.ssh</span><br><span class="line"><span class="built_in">cat</span> /home/pi/id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件权限</span></span><br><span class="line"><span class="built_in">chmod</span> 600 authorized_keys</span><br></pre></td></tr></table></figure>

<p>最后修改ssh的配置文件：<code>/etc/ssh/sshd_config</code>，涉及到的选项有：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 公钥登录许可</span></span><br><span class="line">PubkeyAuthentication <span class="built_in">yes</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>公钥登录</p>
<p>修改完ssh服务的配置文件后，重启ssh服务，接着本地PC通过公钥登录服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启ssh服务 方式1</span></span><br><span class="line">systemctl restart ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 重启ssh服务 方式2</span></span><br><span class="line">service ssh restart</span><br></pre></td></tr></table></figure></li>
</ul>
<p>本地PC通过ssh client公钥认证登录：<code>ssh pi@raspberrypi</code>，此时会直接登录，无需密码。</p>
<p>登录成功提示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">eiSouthBoy@eiSouthBoy-NMH-WCX9:~$ ssh  pi@raspberrypi</span><br><span class="line">Welcome to Ubuntu 24.04 LTS (GNU/Linux 6.8.0-1009-raspi aarch64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/pro</span><br><span class="line"></span><br><span class="line">Expanded Security Maintenance <span class="keyword">for</span> Applications is not enabled.</span><br><span class="line"></span><br><span class="line">0 updates can be applied immediately.</span><br><span class="line"></span><br><span class="line">Enable ESM Apps to receive additional future security updates.</span><br><span class="line">See https://ubuntu.com/esm or run: <span class="built_in">sudo</span> pro status</span><br><span class="line"></span><br><span class="line">*** System restart required ***</span><br><span class="line">Last login: Thu Aug 22 11:10:19 2024 from fdfc:869c:9ebb:0:2803:5d58:2f66:5d78</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="管理多个Git仓库"><a href="#管理多个Git仓库" class="headerlink" title="管理多个Git仓库"></a>管理多个Git仓库</h2><p>同时拥有Github和Gitee两个账户下的仓库需要管理，如何通过ssh管理？</p>
<p>在PC上分别为Gihub和Gitee创建ssh key，然后编写ssh config文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为Github创建ssh key</span></span><br><span class="line">pi@raspberrypi:~$ ssh-keygen -t rsa -C <span class="string">&quot;caoj97141@gmail.com&quot;</span> -f ~/.ssh/id_rsa-github</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为Gitee创建ssh key</span></span><br><span class="line">pi@raspberrypi:~$ ssh-keygen -t rsa -C <span class="string">&quot;caoj97141@gmail.com&quot;</span> -f ~/.ssh/id_rsa-gitee</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编写ssh config文件（vim ~&#x2F;.ssh&#x2F;config），若没有该文件就创建它（touch ~&#x2F;.ssh&#x2F;config）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User yourname@gmail.com</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa-github</span><br><span class="line">    StrictHostKeyChecking no</span><br><span class="line">    UserKnownHostsFile=/dev/null</span><br><span class="line">Host gitee.com</span><br><span class="line">    HostName gitee.com</span><br><span class="line">    User yourname@163.com</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa-gitee</span><br><span class="line">    StrictHostKeyChecking no</span><br><span class="line">    UserKnownHostsFile=/dev/null</span><br></pre></td></tr></table></figure>















]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell and Shell Scripts</title>
    <url>/2024/08/18/2024/Shell-and-Shell-Scripts/</url>
    <content><![CDATA[<h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><p>在Linux中有很多Shell可以使用，常用的有如下：</p>
<ul>
<li>sh：即Bourne shell，由Steven Bourne开发，这是第一个流行的shell</li>
<li>bash：即Bourne Again Shell，由GNU组织开发，属于Bourne shell的增强版本，这是Linux默认使用的shell</li>
<li>csh：即C shell，由Bill Joy开发，这是流行于学术界Sun主机的shell</li>
</ul>
<p>虽然shell有很多种，但是学习和工作都是基于Linux，所以掌握bash即可。</p>
<h3 id="bash的功能"><a href="#bash的功能" class="headerlink" title="bash的功能"></a>bash的功能</h3><ul>
<li>历史命令记录（history）</li>
<li>命令补全功能（bash-completion）</li>
<li>命令别名设置（alias）</li>
<li>shell脚本执行（shell scripts）</li>
</ul>
<h3 id="bash的命令分类"><a href="#bash的命令分类" class="headerlink" title="bash的命令分类"></a>bash的命令分类</h3><p>在bash中执行的命令分为两种类型：</p>
<ul>
<li><p>内置命令：内置命令是指集成在bash里面的可以执行的文件，例如：cd、pwd</p>
</li>
<li><p>外部命令：外部命令是文件系统里的可执行文件，例如用户下载的软件和编写的脚本文件</p>
</li>
</ul>
<blockquote>
<p>如何在bash中判断命令的类型？type target-command</p>
</blockquote>
<p>如果target-command是一个内置命令，则会打印如下信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">target-command is a shell <span class="built_in">builtin</span></span><br></pre></td></tr></table></figure>

<p><em>注意：使用时，将target-command替换具体的命令，例如：cd、ls</em></p>
<p>那么如果知道当前使用的shell类型和支持哪些shell类型呢？</p>
<ul>
<li><p>当前支持的shell类型</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br><span class="line">/bin/sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>当前使用的shell类型</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/shells </span><br><span class="line"><span class="comment"># /etc/shells: valid login shells</span></span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/usr/bin/bash</span><br><span class="line">/bin/rbash</span><br><span class="line">/usr/bin/rbash</span><br><span class="line">/usr/bin/sh</span><br><span class="line">/bin/dash</span><br><span class="line">/usr/bin/dash</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p>其实在创建用户时就会指定一种要使用的shell类型：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line"><span class="built_in">sync</span>:x:4:65534:<span class="built_in">sync</span>:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">user:x:1000:1000:user,,,:/home/caojun:/bin/bash</span><br><span class="line">ubuntu:x:1000:1000:ubuntu,,,:/home/caojun:/bin/sh</span><br></pre></td></tr></table></figure>

<p>root用户就是使用shell类型就是：<code>bash</code>，而ubuntu用户使用的shell类型是：<code>sh</code></p>
<h3 id="bash的技巧"><a href="#bash的技巧" class="headerlink" title="bash的技巧"></a>bash的技巧</h3><p>在使用bash中有很多常用的小技巧或者小功能，有必要学习和记录一下。</p>
<ul>
<li>命令换行：输入一行命令太长，阅读效果并不好，需要拆分成多行显示。在需要换行位置输入 <code>\</code> ，紧接着按下回车键（Enter），然后接着输入未完成的命令。</li>
<li>光标跳转：输入一行命令后，发现行头附近有错误或者行尾处有错误，需要快速跳转到行头或行尾。通过组合键进行光标快速跳转，<code>Ctrl+A</code> 调到行头，<code>Ctrl+E</code> 跳到行尾</li>
<li>环境变量：bash中有很多默认的环境变量，所以很多部命令不需要输入绝对路径就可以执行。通过 <code>env</code> 可以查询所有的默认环境变量。</li>
</ul>
<h2 id="Shell-Scripts"><a href="#Shell-Scripts" class="headerlink" title="Shell Scripts"></a>Shell Scripts</h2><blockquote>
<p>shell scripts是什么？</p>
</blockquote>
<p>shell script是利用shell的功能所写的一个“程序（program）”，这个程序是使用纯文本文件，将一些shell的语法与指令（包含外部指令）写在里面，搭配正则表达式、管道命令与数据重定向等功能，以达到我们所想要的处理目的。</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量一般用于存放数据，而且可以支持修改，方便在不同环境执行时，仅仅修改变量即可使用。</p>
<p>变量名的限制：</p>
<ul>
<li><p>变量名和等号之间不能有空格（语法规定）</p>
</li>
<li><p>变量名只能由字母（<code>a~z</code>，<code>A~Z</code>）、数字（0~9）、下划线（_）组成，且不能以数字开头</p>
</li>
<li><p>变量名不能使用shell中的关键字</p>
</li>
</ul>
<p>简单示例1：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a simple example, print string &quot;hello world&quot;</span></span><br><span class="line">str1=<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">str2=<span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str1</span> <span class="variable">$&#123;str2&#125;</span></span><br></pre></td></tr></table></figure>

<p><em>注意：定义变量时，直接给变量赋值。使用变量时，必须通过<code>$</code>符号引用，而且建议用<code>&#123;&#125;</code>将变量包含起来。</em></p>
<h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><p>判断语句一般用于检查条件符合什么条件，然后执行相应的内容。</p>
<h3 id="if判断语句"><a href="#if判断语句" class="headerlink" title="if判断语句"></a>if判断语句</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># condition check, if [...];then</span></span><br><span class="line"></span><br><span class="line">target_file=condition.sh</span><br><span class="line">target_str=hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># example 1</span></span><br><span class="line"><span class="keyword">if</span> [ -e <span class="variable">$&#123;target_file&#125;</span> ];<span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="variable">$&#123;target_file&#125;</span> exist</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># example 2</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;target_str&#125;</span> == <span class="string">&quot;hello&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span>  <span class="variable">$&#123;target_str&#125;</span> is exist</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="variable">$&#123;target_str&#125;</span> is not <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span>	</span><br><span class="line"></span><br><span class="line"><span class="comment"># example 3</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span>==<span class="string">&#x27;1&#x27;</span> ];<span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$1</span>==<span class="string">&#x27;2&#x27;</span> ];<span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;other&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p><em>注意：</em></p>
<p><em>1、第一行 <code>#!/bin/bash</code> 表示该脚本文件使用shell类型是：bash，脚本文件内部的命令使用bash语句进行解释。</em></p>
<p>2<em>、<code>$1</code> 表示传入第一个参数。</em></p>
<p>文件测试标志：</p>
<ul>
<li>-e：检查目标文件是否存在</li>
<li>-f：检查目标文件是否存则且为普通文件</li>
<li>-d：检查目标文件是否存在且文件类型是目录</li>
</ul>
<p>整数之间的比较：</p>
<ul>
<li>-eq：相等</li>
<li>-ne：不相等</li>
<li>-gt：大于</li>
<li>-lt：小于</li>
<li>-ge：大于等于</li>
<li>-le：小于等于</li>
</ul>
<p>字符串之间的比较：</p>
<ul>
<li>&#x3D;&#x3D;：字符串相同</li>
<li>!&#x3D;：字符串不同</li>
<li>-z：字符串长度是否为0</li>
<li>-n：字符串长度是否为非0</li>
</ul>
<h3 id="case判断语句"><a href="#case判断语句" class="headerlink" title="case判断语句"></a>case判断语句</h3><p>通过传入的数字字符串来判断星期几</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print weekday by a number</span></span><br><span class="line">option=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$&#123;option&#125;</span> <span class="keyword">in</span></span><br><span class="line">	1)</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;Mon&quot;</span></span><br><span class="line">		;;</span><br><span class="line">	2)</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;Tue&quot;</span></span><br><span class="line">		;;</span><br><span class="line">	3)</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;Wed&quot;</span></span><br><span class="line">		;;</span><br><span class="line">	4)</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;Thu&quot;</span></span><br><span class="line">		;;</span><br><span class="line">	5)</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;Fri&quot;</span></span><br><span class="line">		;;</span><br><span class="line">	6)</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;Sat&quot;</span></span><br><span class="line">		;;</span><br><span class="line">	7)</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;Sun&quot;</span></span><br><span class="line">		;;</span><br><span class="line">	*)</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;unkonwn&quot;</span></span><br><span class="line">		;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>执行循环体，打印从1到10</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 10)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>将固定的功能模块化–函数，之后可以复用该函数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">printit</span></span>() &#123;</span><br><span class="line">	<span class="built_in">echo</span> -n <span class="string">&quot;Your choice is &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This program will print your selection!&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$&#123;1&#125;</span> <span class="keyword">in</span></span><br><span class="line">	<span class="string">&quot;one&quot;</span>)</span><br><span class="line">		printit; <span class="built_in">echo</span> <span class="variable">$&#123;1&#125;</span> | <span class="built_in">tr</span> <span class="string">&#x27;a-z&#x27;</span> <span class="string">&#x27;A-Z&#x27;</span></span><br><span class="line">		;;</span><br><span class="line">	<span class="string">&quot;two&quot;</span>)</span><br><span class="line">		printit; <span class="built_in">echo</span> <span class="variable">$&#123;1&#125;</span> | <span class="built_in">tr</span> <span class="string">&#x27;a-z&#x27;</span> <span class="string">&#x27;A-Z&#x27;</span></span><br><span class="line">		;;</span><br><span class="line">	<span class="string">&quot;three&quot;</span>)</span><br><span class="line">		printit; <span class="built_in">echo</span> <span class="variable">$&#123;1&#125;</span> | <span class="built_in">tr</span> <span class="string">&#x27;a-z&#x27;</span> <span class="string">&#x27;A-Z&#x27;</span></span><br><span class="line">		;;</span><br><span class="line">	*)</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;Usage <span class="variable">$&#123;0&#125;</span> &#123;one;two;three&#125;&quot;</span></span><br><span class="line">		;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



















]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
        <tag>Shell Scripts</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/08/17/2024/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Clean-Statuc-files"><a href="#Clean-Statuc-files" class="headerlink" title="Clean Statuc files"></a>Clean Statuc files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo command</tag>
      </tags>
  </entry>
  <entry>
    <title>bluetoothctl client tool</title>
    <url>/2024/08/16/2024/bluetoothctl-client-tool/</url>
    <content><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>在使用某一家SoC的蓝牙库的时候，很多东西都无法修改。但是在测试的过程中，发现这家SoC的蓝牙库也是基于bluez的dbus实现的，那么我也可以封装一个蓝牙库。</p>
<p>首先，我手里有树莓派4B一台，该设备具备了蓝牙和Wi-Fi功能。那么只需要通过研究bluez项目中的bluetoothctl工具的源码，然后进行自定义修改，最后封装成自己的蓝牙库。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="硬件平台"><a href="#硬件平台" class="headerlink" title="硬件平台"></a>硬件平台</h3><p>树莓派环境介绍：</p>
<blockquote>
<p>系统：Ubuntu 24.04 LTS</p>
<p>内核：6.8.0-1009-raspi</p>
<p>架构：aarch64</p>
<p>内存：8GB</p>
</blockquote>
<p>阅读蓝牙官方文档，通过基于bluez的dbus接口编程需要相关依赖库：glib-2.0 、gio-2.0、 dbus-1，如果树莓派环境没有以上依赖库，则通过apt安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install libglib2.0-dev libdbus-1-dev</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过pkg-config可以查找对应的头文件目录和库文件</span></span><br><span class="line">pkg-config --cflags glib-2.0 gio-2.0 dbus-1</span><br><span class="line">pkg-config --libs glib-2.0 gio-2.0 dbus-1</span><br></pre></td></tr></table></figure>

<p>涉及的头文件目录和库文件有如下：</p>
<ul>
<li><p>-I&#x2F;usr&#x2F;include&#x2F;glib-2.0 </p>
</li>
<li><p>-I&#x2F;usr&#x2F;lib&#x2F;aarch64-linux-gnu&#x2F;glib-2.0&#x2F;include </p>
</li>
<li><p>-pthread -I&#x2F;usr&#x2F;include&#x2F;libmount</p>
</li>
<li><p>-I&#x2F;usr&#x2F;include&#x2F;blkid </p>
</li>
<li><p>-lgio-2.0 </p>
</li>
<li><p>-lgobject-2.0 </p>
</li>
<li><p>-lglib-2.0 </p>
</li>
<li><p>-ldbus-1</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过dpkg查看相关依赖库是否已经安装</span></span><br><span class="line">dpkg -l | grep libglib2.0-dev</span><br><span class="line">dpkg -l | grep libdbus-1-dev</span><br></pre></td></tr></table></figure>

<p>涉及的依赖包有如下：</p>
<ul>
<li><p>libglib2.0-dev-bin</p>
</li>
<li><p>libglib2.0-dev-bin</p>
</li>
<li><p>libdbus-1-dev:arm64</p>
</li>
</ul>
<h3 id="协议文档"><a href="#协议文档" class="headerlink" title="协议文档"></a>协议文档</h3><h4 id="dbus数据模型"><a href="#dbus数据模型" class="headerlink" title="dbus数据模型"></a>dbus数据模型</h4><p><a href="https://dbus.freedesktop.org/doc/dbus-specification.html">dbus规范</a></p>
<p>dbus使用一套类型于JSON类型的数据模型，但还是有所差别，dbus数据模型：</p>
<table>
<thead>
<tr>
<th>常规名字</th>
<th>ASCII符号</th>
<th>数据定义</th>
<th>编码存储</th>
</tr>
</thead>
<tbody><tr>
<td>BYTE</td>
<td>y</td>
<td>guchar</td>
<td>unsigned 8-bit integer</td>
</tr>
<tr>
<td>BOOlEAN</td>
<td>b</td>
<td>gboolean</td>
<td>boolean value: 0 is false, 1 is true</td>
</tr>
<tr>
<td>INT16</td>
<td>n</td>
<td>gint16</td>
<td>signed 16-bit integer</td>
</tr>
<tr>
<td>UINT16</td>
<td>q</td>
<td>guint16</td>
<td>unsigned 16-bit integer</td>
</tr>
<tr>
<td>INT32</td>
<td>i</td>
<td>gint32</td>
<td>signed 32-bit integer</td>
</tr>
<tr>
<td>UINT32</td>
<td>u</td>
<td>guint32</td>
<td>unsigned 32-bit integer</td>
</tr>
<tr>
<td>INT64</td>
<td>x</td>
<td>gint64</td>
<td>signed 64-bit integer</td>
</tr>
<tr>
<td>UINT64</td>
<td>t</td>
<td>guint64</td>
<td>unsigned 64-bit integer</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>d</td>
<td>gdouble</td>
<td>double-precision floating point</td>
</tr>
<tr>
<td>UNIX_FD</td>
<td>h</td>
<td></td>
<td>unsigned 32-bit representing an index into an out-of-band array of file descriptors</td>
</tr>
<tr>
<td>STRING</td>
<td>s</td>
<td></td>
<td>string, 必须是有效的UTF-8字符串</td>
</tr>
<tr>
<td>OBJECT_PATH</td>
<td>o</td>
<td></td>
<td>object_path，例如：&#x2F;org&#x2F;bluez&#x2F;hci0&#x2F;dev_50_64_2B_BF_46_36</td>
</tr>
<tr>
<td>SIGNATURE</td>
<td>g</td>
<td></td>
<td>signature类型，即签名类型</td>
</tr>
<tr>
<td>ARRAY</td>
<td>a</td>
<td></td>
<td>array, like []</td>
</tr>
<tr>
<td>VARIANT</td>
<td>v</td>
<td></td>
<td>variant，变体类型</td>
</tr>
<tr>
<td>STRUCT</td>
<td>r 、(  、 )</td>
<td></td>
<td>结构类型</td>
</tr>
<tr>
<td>DICT_ENTRY</td>
<td>e 、{ 、 }</td>
<td></td>
<td>字典或映射（键值对数组）的条目</td>
</tr>
</tbody></table>
<p>关于结构类型，其组成是由其他类型组合而成。例如：<code>(a&#123;oa&#123;sa&#123;sv&#125;&#125;&#125;)</code></p>
<p>通过上述表格的数据类型来解析结构类型数据。</p>
<p>1、括号 <code>()</code> 表示一个结构体</p>
<p>2、<code>a&#123;oa&#123;sa&#123;sv&#125;&#125;&#125;</code> 表示一个字典数组，其中的键为对象路径（即 o），值为另外一个字典数组（即 a{sa{sv}}）</p>
<p>3、<code>a&#123;sa&#123;sv&#125;&#125;</code> 表示一个字典数组，其中的键为字符串（即 s），值为另外一个字典数组（即 a{sv}）</p>
<p>4、<code>a&#123;sv&#125;</code> 表示一个字典数组，其中的键为字符串（即 s），值为变体（即v）</p>
<p><em>注意：字典数组要分成两个部分：字典 + 数组，类型是字典，但是字典里面多个字典元素</em></p>
<p><code>a&#123;oa&#123;sa&#123;sv&#125;&#125;&#125;</code> 的具体案例如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    &#x27;/org/bluez&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        &#x27;org.freedesktop.DBus.Introspectable&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        &#x27;org.bluez.AgentManager1&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        &#x27;org.bluez.ProfileManager1&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        &#x27;org.bluez.HealthManager1&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">    &#x27;/org/bluez/hci0&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        &#x27;org.freedesktop.DBus.Introspectable&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        &#x27;org.bluez.Adapter1&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            &#x27;Address&#x27;<span class="punctuation">:</span> &lt;&#x27;D8<span class="punctuation">:</span><span class="number">3</span>A<span class="punctuation">:</span>DD<span class="punctuation">:</span><span class="number">9</span>B<span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">9</span>C&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;AddressType&#x27;<span class="punctuation">:</span> &lt;&#x27;public&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Name&#x27;<span class="punctuation">:</span> &lt;&#x27;caojun-desktop&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Alias&#x27;<span class="punctuation">:</span> &lt;&#x27;caojun-desktop&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Class&#x27;<span class="punctuation">:</span> &lt;uint32 <span class="number">7077888</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Powered&#x27;<span class="punctuation">:</span> &lt;<span class="literal"><span class="keyword">true</span></span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Discoverable&#x27;<span class="punctuation">:</span> &lt;<span class="literal"><span class="keyword">false</span></span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;DiscoverableTimeout&#x27;<span class="punctuation">:</span> &lt;uint32 <span class="number">180</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Pairable&#x27;<span class="punctuation">:</span> &lt;<span class="literal"><span class="keyword">true</span></span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;PairableTimeout&#x27;<span class="punctuation">:</span> &lt;uint32 <span class="number">0</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Discovering&#x27;<span class="punctuation">:</span> &lt;<span class="literal"><span class="keyword">false</span></span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;UUIDs&#x27;<span class="punctuation">:</span> &lt;<span class="punctuation">[</span></span><br><span class="line">                &#x27;<span class="number">0000110e-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;<span class="punctuation">,</span> </span><br><span class="line">                &#x27;<span class="number">0000111</span>f<span class="number">-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;<span class="punctuation">,</span> </span><br><span class="line">                &#x27;<span class="number">00001200</span><span class="number">-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;<span class="punctuation">,</span> </span><br><span class="line">                &#x27;<span class="number">0000110</span>b<span class="number">-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;<span class="punctuation">,</span> </span><br><span class="line">                &#x27;<span class="number">0000110</span>a<span class="number">-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;<span class="punctuation">,</span> </span><br><span class="line">                &#x27;<span class="number">0000110</span>c<span class="number">-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;<span class="punctuation">,</span> </span><br><span class="line">                &#x27;<span class="number">00001800</span><span class="number">-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;<span class="punctuation">,</span> </span><br><span class="line">                &#x27;<span class="number">00001801</span><span class="number">-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;<span class="punctuation">,</span> </span><br><span class="line">                &#x27;<span class="number">0000180</span>a<span class="number">-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;<span class="punctuation">,</span> </span><br><span class="line">                &#x27;<span class="number">0000111e-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;<span class="punctuation">]</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Modalias&#x27;<span class="punctuation">:</span> &lt;&#x27;usb<span class="punctuation">:</span>v1D6Bp0246d0548&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Roles&#x27;<span class="punctuation">:</span> &lt;<span class="punctuation">[</span>&#x27;central&#x27;<span class="punctuation">,</span> &#x27;peripheral&#x27;<span class="punctuation">]</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Manufacturer&#x27;<span class="punctuation">:</span> &lt;uint16 <span class="number">305</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Version&#x27;<span class="punctuation">:</span> &lt;byte <span class="number">0x09</span>&gt;</span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        &#x27;org.freedesktop.DBus.Properties&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        &#x27;org.bluez.BatteryProviderManager1&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        &#x27;org.bluez.GattManager1&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        &#x27;org.bluez.Media1&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            &#x27;SupportedUUIDs&#x27;<span class="punctuation">:</span> &lt;<span class="punctuation">[</span></span><br><span class="line">                &#x27;<span class="number">0000110</span>a<span class="number">-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;<span class="punctuation">,</span> </span><br><span class="line">                &#x27;<span class="number">0000110</span>b<span class="number">-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;<span class="punctuation">]</span>&gt;</span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        &#x27;org.bluez.NetworkServer1&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        &#x27;org.bluez.LEAdvertisingManager1&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            &#x27;ActiveInstances&#x27;<span class="punctuation">:</span> &lt;byte <span class="number">0x00</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;SupportedInstances&#x27;<span class="punctuation">:</span> &lt;byte <span class="number">0x05</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;SupportedIncludes&#x27;<span class="punctuation">:</span> &lt;<span class="punctuation">[</span>&#x27;tx-power&#x27;<span class="punctuation">,</span> &#x27;appearance&#x27;<span class="punctuation">,</span> &#x27;local-name&#x27;<span class="punctuation">]</span>&gt;</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">    &#x27;/org/bluez/hci0/dev_50_64_2B_BF_46_36&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        &#x27;org.freedesktop.DBus.Introspectable&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        &#x27;org.bluez.Device1&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            &#x27;Address&#x27;<span class="punctuation">:</span> &lt;&#x27;<span class="number">50</span><span class="punctuation">:</span><span class="number">64</span><span class="punctuation">:</span><span class="number">2</span>B<span class="punctuation">:</span>BF<span class="punctuation">:</span><span class="number">46</span><span class="punctuation">:</span><span class="number">36</span>&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;AddressType&#x27;<span class="punctuation">:</span> &lt;&#x27;public&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Name&#x27;<span class="punctuation">:</span> &lt;&#x27;小爱触屏音箱<span class="number">-8523</span>&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Alias&#x27;<span class="punctuation">:</span> &lt;&#x27;小爱触屏音箱<span class="number">-8523</span>&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Class&#x27;<span class="punctuation">:</span> &lt;uint32 <span class="number">2360348</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Icon&#x27;<span class="punctuation">:</span> &lt;&#x27;audio-card&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Paired&#x27;<span class="punctuation">:</span> &lt;<span class="literal"><span class="keyword">true</span></span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Bonded&#x27;<span class="punctuation">:</span> &lt;<span class="literal"><span class="keyword">true</span></span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Trusted&#x27;<span class="punctuation">:</span> &lt;<span class="literal"><span class="keyword">false</span></span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Blocked&#x27;<span class="punctuation">:</span> &lt;<span class="literal"><span class="keyword">false</span></span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;LegacyPairing&#x27;<span class="punctuation">:</span> &lt;<span class="literal"><span class="keyword">false</span></span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Connected&#x27;<span class="punctuation">:</span> &lt;<span class="literal"><span class="keyword">true</span></span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;UUIDs&#x27;<span class="punctuation">:</span> &lt;<span class="punctuation">[</span></span><br><span class="line">                &#x27;<span class="number">0000110</span>b<span class="number">-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;<span class="punctuation">,</span> </span><br><span class="line">                &#x27;<span class="number">0000110</span>c<span class="number">-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;<span class="punctuation">,</span> </span><br><span class="line">                &#x27;<span class="number">0000110e-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;<span class="punctuation">,</span> </span><br><span class="line">                &#x27;<span class="number">00001200</span><span class="number">-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;<span class="punctuation">,</span> </span><br><span class="line">                &#x27;<span class="number">00001800</span><span class="number">-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;<span class="punctuation">,</span> </span><br><span class="line">                &#x27;<span class="number">00001801</span><span class="number">-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;<span class="punctuation">,</span> </span><br><span class="line">                &#x27;<span class="number">00001828</span><span class="number">-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;<span class="punctuation">]</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Modalias&#x27;<span class="punctuation">:</span> &lt;&#x27;bluetooth<span class="punctuation">:</span>v0046p1200d1436&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Adapter&#x27;<span class="punctuation">:</span> &lt;objectpath &#x27;/org/bluez/hci0&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;ServicesResolved&#x27;<span class="punctuation">:</span> &lt;<span class="literal"><span class="keyword">true</span></span>&gt;</span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        &#x27;org.freedesktop.DBus.Properties&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        &#x27;org.bluez.MediaControl1&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span>&#x27;Connected&#x27;<span class="punctuation">:</span> &lt;<span class="literal"><span class="keyword">true</span></span>&gt;<span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">    &#x27;/org/bluez/hci0/dev_50_64_2B_BF_46_36/sep2&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        &#x27;org.freedesktop.DBus.Introspectable&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        &#x27;org.bluez.MediaEndpoint1&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            &#x27;UUID&#x27;<span class="punctuation">:</span> &lt;&#x27;<span class="number">0000110</span>b<span class="number">-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Codec&#x27;<span class="punctuation">:</span> &lt;byte <span class="number">0x02</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Capabilities&#x27;<span class="punctuation">:</span> &lt;b&#x27;\<span class="number">200</span>\<span class="number">001</span>\<span class="number">214</span>\<span class="number">004</span>\<span class="number">342</span>&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Device&#x27;<span class="punctuation">:</span> &lt;objectpath &#x27;/org/bluez/hci0/dev_50_64_2B_BF_46_36&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;DelayReporting&#x27;<span class="punctuation">:</span> &lt;<span class="literal"><span class="keyword">false</span></span>&gt;</span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        &#x27;org.freedesktop.DBus.Properties&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">    &#x27;/org/bluez/hci0/dev_50_64_2B_BF_46_36/sep1&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        &#x27;org.freedesktop.DBus.Introspectable&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        &#x27;org.bluez.MediaEndpoint1&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            &#x27;UUID&#x27;<span class="punctuation">:</span> &lt;&#x27;<span class="number">0000110</span>b<span class="number">-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Codec&#x27;<span class="punctuation">:</span> &lt;byte <span class="number">0x00</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Capabilities&#x27;<span class="punctuation">:</span> &lt;<span class="punctuation">[</span>byte <span class="number">0x3f</span><span class="punctuation">,</span> <span class="number">0xff</span><span class="punctuation">,</span> <span class="number">0x02</span><span class="punctuation">,</span> <span class="number">0x35</span><span class="punctuation">]</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Device&#x27;<span class="punctuation">:</span> &lt;objectpath &#x27;/org/bluez/hci0/dev_50_64_2B_BF_46_36&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;DelayReporting&#x27;<span class="punctuation">:</span> &lt;<span class="literal"><span class="keyword">false</span></span>&gt;</span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        &#x27;org.freedesktop.DBus.Properties&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">    &#x27;/org/bluez/hci0/dev_50_64_2B_BF_46_36/sep1/fd12&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        &#x27;org.freedesktop.DBus.Introspectable&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        &#x27;org.bluez.MediaTransport1&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            &#x27;Device&#x27;<span class="punctuation">:</span> &lt;objectpath &#x27;/org/bluez/hci0/dev_50_64_2B_BF_46_36&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;UUID&#x27;<span class="punctuation">:</span> &lt;&#x27;<span class="number">0000110</span>a<span class="number">-0000</span><span class="number">-1000</span><span class="number">-8000</span><span class="number">-00805</span>f9b34fb&#x27;&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Codec&#x27;<span class="punctuation">:</span> &lt;byte <span class="number">0x00</span>&gt;<span class="punctuation">,</span> </span><br><span class="line">            &#x27;Configuration&#x27;<span class="punctuation">:</span> &lt;<span class="punctuation">[</span>byte <span class="number">0x11</span><span class="punctuation">,</span> <span class="number">0x15</span><span class="punctuation">,</span> <span class="number">0x02</span><span class="punctuation">,</span> <span class="number">0x35</span><span class="punctuation">]</span>&gt;<span class="punctuation">,</span> &#x27;State&#x27;<span class="punctuation">:</span> &lt;&#x27;idle&#x27;&gt;</span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        &#x27;org.freedesktop.DBus.Properties&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h4 id="dbus接口模型"><a href="#dbus接口模型" class="headerlink" title="dbus接口模型"></a>dbus接口模型</h4><ul>
<li><p><strong>服务名称（dbus name）</strong>：<br>服务端程序在D-Bus上注册的服务名称（即 dbus name），在D-Bus上的注册的服务后会产生一个地址（例如：<code>/org/bluez</code>）和唯一名称（例如：<code>1.466</code>），地址和唯一名称都是随机生成的，客户端通过dbus name来知道服务名称。dbus name的格式，例如：<code>org.bluez</code>，这是D-Bus的规定，没有为什么。</p>
</li>
<li><p><strong>对象（Object）</strong>：<br>对象以路径的形式表示，对象路径代表一个对象实例。对象路径的前缀以dbus name为参考，接上其他的。例如，上述dbus name：<code>org.bluez</code>，那么对象路径前缀是：<code>/org/bluez</code>，接上其他的，形成完成的对象路径，例如：<code>/org/bluez/hci0</code></p>
</li>
<li><p><strong>接口（Interface）</strong>：<br>接口，顾名思义。接口名称的格式规定与dbus name一样，例如：<code>org.bluez.Adapter1</code></p>
</li>
<li><p><strong>成员名称（Member name）</strong>：<br>成员包括：方法（Method）和信号（Signal），在大多数方面，他们几乎是一样的，除了两点：</p>
<p>1、Signal是在总线中进行广播的，而Method是指定发给某个进程的。</p>
<p>2、Signal 不会有返回，而 Method 一定会有返回（Method调用可以同步的或是异步的）。</p>
<p>从 C API 的层面来看，Member name 最大的作用就是在两个进程间共享 “发出的消息的类型信息”，DBus 只能以 Signal or Method 来进行消息通信。</p>
</li>
</ul>
<h4 id="dbus通用接口"><a href="#dbus通用接口" class="headerlink" title="dbus通用接口"></a>dbus通用接口</h4><p>dbus标准接口共有4个，分别是：</p>
<ul>
<li>org.freedesktop.DBus.Peer</li>
<li>org.freedesktop.DBus.Introspectable</li>
<li><strong>org.freedesktop.DBus.Properties</strong>：用于获取和设置对象属性，并监听属性变化。</li>
<li><strong>org.freedesktop.DBus.ObjectManager</strong>：用于管理和监控 D-Bus 对象，通常用于获取所有对象及其接口和属性。</li>
</ul>
<h5 id="org-freedesktop-DBus-Properties"><a href="#org-freedesktop-DBus-Properties" class="headerlink" title="org.freedesktop.DBus.Properties"></a>org.freedesktop.DBus.Properties</h5><p>常用的方法有：</p>
<ul>
<li>Get：获取对象的特定属性值</li>
<li>Set：设置对象的特定属性值</li>
<li>GetAll：获取对象的所有属性值</li>
</ul>
<p>常用的信号有：</p>
<ul>
<li>PropertiesChanged：当对象的属性发生变化时发出信号</li>
</ul>
<h5 id="org-freedesktop-DBus-ObjectManager"><a href="#org-freedesktop-DBus-ObjectManager" class="headerlink" title="org.freedesktop.DBus.ObjectManager"></a>org.freedesktop.DBus.ObjectManager</h5><p>常用的方法有：</p>
<ul>
<li>GetManagedObjects：获取所有受管理的对象及其接口和属性</li>
</ul>
<p>常用的信号有：</p>
<ul>
<li><p>InterfacesAdded：当新对象添加时发出信号</p>
</li>
<li><p>InterfacesRemoved：当对象接口移除时发出信号</p>
</li>
</ul>
<h4 id="dbus-for-bluez接口"><a href="#dbus-for-bluez接口" class="headerlink" title="dbus for bluez接口"></a>dbus for bluez接口</h4><p>bluez dbus api 文档涉及到各个不同接口，主要关注这几个接口：</p>
<ul>
<li>org.bluez.Adapter1</li>
<li>org.bluez.Device1</li>
<li>org.bluez.Agent1</li>
</ul>
<h5 id="org-bluez-Adapter1"><a href="#org-bluez-Adapter1" class="headerlink" title="org.bluez.Adapter1"></a>org.bluez.Adapter1</h5><p><strong>接口介绍：</strong></p>
<p>这个接口用于管理蓝牙适配器，实现了蓝牙设备的搜索和管理功能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:Service:	org.bluez</span><br><span class="line">:Interface:	org.bluez.Adapter1</span><br><span class="line">:Object path:	[variable prefix]/&#123;hci0,hci1,...&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方法介绍：</strong></p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><strong>void StartDiscovery()</strong></td>
<td>开始扫描设备</td>
</tr>
<tr>
<td><strong>void StopDiscovery()</strong></td>
<td>结束扫描设备</td>
</tr>
<tr>
<td><strong>void RemoveDevice(object device)</strong></td>
<td>移除蓝牙设备</td>
</tr>
<tr>
<td>void SetDiscoveryFilter(dict filter)</td>
<td>设置扫描条件</td>
</tr>
<tr>
<td>array{string} GetDiscoveryFilters()</td>
<td>获取扫描条件</td>
</tr>
<tr>
<td>object ConnectDevice(dict properties) [experimental]</td>
<td>连接蓝牙设备</td>
</tr>
</tbody></table>
<p><strong>属性介绍：</strong></p>
<table>
<thead>
<tr>
<th>属性名称</th>
<th>权限</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>string Address</strong></td>
<td>[readonly]</td>
<td>蓝牙设备MAC地址</td>
</tr>
<tr>
<td>string AddressType</td>
<td>[readonly]</td>
<td>取值范围：public和random</td>
</tr>
<tr>
<td><strong>string Name</strong></td>
<td>[readonly]</td>
<td>蓝牙设备名称</td>
</tr>
<tr>
<td>string Alias</td>
<td>[readwrite]</td>
<td>蓝牙设备别名</td>
</tr>
<tr>
<td>uint32 Class</td>
<td>[readonly]</td>
<td>蓝牙设备类型</td>
</tr>
<tr>
<td><strong>boolean Powered</strong></td>
<td>[readwrite]</td>
<td>打开或关闭适配器电源</td>
</tr>
<tr>
<td>string PowerState</td>
<td>[readonly, experimental]</td>
<td>适配器电源状态</td>
</tr>
<tr>
<td>boolean Discoverable</td>
<td>[readwrite] (Default: false)</td>
<td>打开或关闭适配器可被发现状态</td>
</tr>
<tr>
<td>boolean Pairable</td>
<td>[readwrite] (Default: true)</td>
<td>打开或关闭适配可被配对状态</td>
</tr>
<tr>
<td>uint32 PairableTimeout</td>
<td>[readwrite] (Default: 0)</td>
<td>配对超时时间（单位：秒）</td>
</tr>
<tr>
<td>uint32 DiscoverableTimeout</td>
<td>[readwrite] (Default: 180)</td>
<td>发现超时时间（单位：秒）</td>
</tr>
<tr>
<td>boolean Discovering</td>
<td>[readonly]</td>
<td>扫描执行状态</td>
</tr>
<tr>
<td>array{string} UUIDs</td>
<td>[readonly]</td>
<td>128-bit UIIDs</td>
</tr>
<tr>
<td>string Modalias</td>
<td>[readonly, optional]</td>
<td>内核使用的本地设备ID</td>
</tr>
<tr>
<td>array{string} Roles</td>
<td>[readonly]</td>
<td>支持角色列表</td>
</tr>
<tr>
<td>array{string} ExperimentalFeatures</td>
<td>[readonly, optional]</td>
<td>实验性质的128-bit UIIDs</td>
</tr>
<tr>
<td>uint16 Manufacturer</td>
<td>[readonly]</td>
<td>设备制造商</td>
</tr>
<tr>
<td>byte Version</td>
<td>[readonly]</td>
<td>设备支持的蓝牙版本</td>
</tr>
</tbody></table>
<h5 id="org-bluez-Device1"><a href="#org-bluez-Device1" class="headerlink" title="org.bluez.Device1"></a>org.bluez.Device1</h5><p><strong>接口介绍：</strong></p>
<p>这个接口用于管理蓝牙设备，实现了设备的配对、连接和断开连接等功能。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:Service:	org.bluez</span><br><span class="line">:Interface:	org.bluez.Device1</span><br><span class="line">:Object path:	[variable prefix]/&#123;hci0,hci1,...&#125;/dev_XX_XX_XX_XX_XX_XX</span><br></pre></td></tr></table></figure>

<p><strong>方法介绍：</strong></p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><strong>void Connect()</strong></td>
<td>连接蓝牙设备</td>
</tr>
<tr>
<td><strong>void Disconnect()</strong></td>
<td>断开蓝牙设备</td>
</tr>
<tr>
<td>void ConnectProfile(string uuid)</td>
<td>连接配置文件</td>
</tr>
<tr>
<td>void DisconnectProfile(string uuid)</td>
<td>断开配置文件</td>
</tr>
<tr>
<td><strong>void Pair()</strong></td>
<td>配对蓝牙设备</td>
</tr>
<tr>
<td>void CancelPairing()</td>
<td>取消配对请求</td>
</tr>
</tbody></table>
<p><strong>属性介绍：</strong></p>
<table>
<thead>
<tr>
<th>属性名称</th>
<th>权限</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>string Address</strong></td>
<td>[readonly]</td>
<td>蓝牙设备MAC地址</td>
</tr>
<tr>
<td>string AddressType</td>
<td>[readonly]</td>
<td>取值范围：public和random</td>
</tr>
<tr>
<td><strong>string Name</strong></td>
<td>[readonly, optional]</td>
<td>蓝牙设备名称</td>
</tr>
<tr>
<td>string Icon</td>
<td>[readonly, optional]</td>
<td>蓝牙设备图标</td>
</tr>
<tr>
<td>uint32 Class</td>
<td>[readonly, optional]</td>
<td>蓝牙设备类型</td>
</tr>
<tr>
<td>uint16 Appearance</td>
<td>[readonly, optional]</td>
<td>蓝牙设备外观</td>
</tr>
<tr>
<td>array{string} UUIDs</td>
<td>[readonly, optional]</td>
<td>128-bit UIIDs</td>
</tr>
<tr>
<td><strong>boolean Paired</strong></td>
<td>[readonly]</td>
<td>蓝牙设备配对状态</td>
</tr>
<tr>
<td>boolean Bonded</td>
<td>[readonly]</td>
<td>蓝牙设备绑定状态</td>
</tr>
<tr>
<td><strong>boolean Connected</strong></td>
<td>[readonly]</td>
<td>蓝牙设备连接状态</td>
</tr>
<tr>
<td>boolean Trusted</td>
<td>[readwrite]</td>
<td>蓝牙设备信任状态</td>
</tr>
<tr>
<td>boolean Blocked</td>
<td>[readwrite]</td>
<td>蓝牙设备阻塞状态</td>
</tr>
<tr>
<td>boolean WakeAllowed</td>
<td>[readwrite]</td>
<td>蓝牙设备唤醒功能</td>
</tr>
<tr>
<td>string Alias</td>
<td>[readwrite]</td>
<td>蓝牙设备别名</td>
</tr>
<tr>
<td>object Adapter</td>
<td>[readonly]</td>
<td>蓝牙设备所属适配器对象</td>
</tr>
<tr>
<td>boolean LegacyPairing</td>
<td>[readonly]</td>
<td>传统配对功能</td>
</tr>
<tr>
<td>string Modalias</td>
<td>[readonly, optional]</td>
<td>内核使用的设备ID</td>
</tr>
<tr>
<td>int16 RSSI</td>
<td>[readonly, optional]</td>
<td>蓝牙设备信号强度</td>
</tr>
<tr>
<td>int16 TxPower</td>
<td>[readonly, optional]</td>
<td>蓝牙广播发射功率电平</td>
</tr>
<tr>
<td>dict ManufacturerData</td>
<td>[readonly, optional]</td>
<td>蓝牙制造商数据</td>
</tr>
<tr>
<td>dict ServiceData</td>
<td>[readonly, optional]</td>
<td>蓝牙服务数据</td>
</tr>
<tr>
<td>bool ServicesResolved</td>
<td>[readonly]</td>
<td>服务解析是否完成</td>
</tr>
<tr>
<td>array{byte} AdvertisingFlags</td>
<td>[readonly]</td>
<td>蓝牙广播数据标志</td>
</tr>
<tr>
<td>dict AdvertisingData</td>
<td>[readonly]</td>
<td>蓝牙广播数据</td>
</tr>
<tr>
<td>array{object, dict} Sets</td>
<td>[readonly, experimental]</td>
<td>蓝牙设备所属对象集合</td>
</tr>
</tbody></table>
<h5 id="org-bluez-Agent1"><a href="#org-bluez-Agent1" class="headerlink" title="org.bluez.Agent1"></a>org.bluez.Agent1</h5><p><strong>接口介绍：</strong></p>
<p>这个用于管理蓝牙代理，实现了蓝牙认证和授权功能。在进行蓝牙配对时，代理程序将被调用执行认证和授权操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:Service:	unique name</span><br><span class="line">:Interface:	org.bluez.Agent1</span><br><span class="line">:Object path:	freely definable</span><br></pre></td></tr></table></figure>

<p><strong>方法介绍：</strong></p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>void Release()</td>
<td>释放任务</td>
</tr>
<tr>
<td>string RequestPinCode(object device)</td>
<td>请求PIN码</td>
</tr>
<tr>
<td>void DisplayPinCode(object device, string pincode)</td>
<td>显示PIN码</td>
</tr>
<tr>
<td>uint32 RequestPasskey(object device)</td>
<td>请求秘钥</td>
</tr>
<tr>
<td>void DisplayPasskey(object device, uint32 passkey, uint16 entered)</td>
<td>显示秘钥</td>
</tr>
<tr>
<td>void RequestConfirmation(object device, uint32 passkey)</td>
<td>请求确认秘钥</td>
</tr>
<tr>
<td>void RequestAuthorization(object device)</td>
<td>请求授权</td>
</tr>
<tr>
<td>void AuthorizeService(object device, string uuid)</td>
<td>授权服务</td>
</tr>
<tr>
<td>void Cancel()</td>
<td>取消请求</td>
</tr>
</tbody></table>
<p><strong>属性介绍：</strong></p>
<p>无属性</p>
<h4 id="gdbus接口"><a href="#gdbus接口" class="headerlink" title="gdbus接口"></a>gdbus接口</h4><p>gio库提供了对于dbus接口的高级封装：<a href="https://docs.gtk.org/gio/index.html">gdbus</a>，常用API总结，方便直接定位查寻：</p>
<p><a href="https://docs.gtk.org/gio/func.bus_get_sync.html">g_bus_get_sync()</a></p>
<p>描述：同步连接到bus_type指定的消息总线。若返回值为NULL，则错误发生；若返回值不为NULL，调用者有责任使用 <code>g_object_unref()</code> 释放返回值。当调用错误发生时，<code>error != NULL</code>，可以通过error知道错误的原因，调用者有责任使用 <code>g_error_free()</code> 释放error。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">GDBusConnection*</span><br><span class="line"><span class="title function_">g_bus_get_sync</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GBusType bus_type,</span></span><br><span class="line"><span class="params">  GCancellable* cancellable,</span></span><br><span class="line"><span class="params">  GError** error</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>

<p><a href="https://docs.gtk.org/glib/ctor.MainLoop.new.html">g_main_loop_new()</a></p>
<p>描述：创建一个新的GMainLoop结构体，调用者有责任去释放这个结构体。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">GMainLoop*</span><br><span class="line"><span class="title function_">g_main_loop_new</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GMainContext* context,</span></span><br><span class="line"><span class="params">  gboolean is_running</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>

<p><a href="https://docs.gtk.org/gobject/method.Object.unref.html">g_object_unref()</a></p>
<p>描述：减少对象的参考计数。当其参考计数降至0时，对象将最终确定（即其内存已释放）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">g_object_unref</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GObject* object</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>



<p><a href="https://docs.gtk.org/glib/method.MainLoop.run.html">g_main_loop_run()</a></p>
<p>描述：运行主循环，直到 g_main_loop_quit() 被调用才结束。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">g_main_loop_run</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GMainLoop* loop</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>



<p><a href="https://docs.gtk.org/gio/type_func.DBusProxy.new.html">g_dbus_proxy_new()</a></p>
<p>描述：创建一个代理</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">g_dbus_proxy_new</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GDBusConnection* connection,</span></span><br><span class="line"><span class="params">  GDBusProxyFlags flags,</span></span><br><span class="line"><span class="params">  GDBusInterfaceInfo* info,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* name,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* object_path,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* interface_name,</span></span><br><span class="line"><span class="params">  GCancellable* cancellable,</span></span><br><span class="line"><span class="params">  GAsyncReadyCallback callback,</span></span><br><span class="line"><span class="params">  gpointer user_data</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>



<p><a href="https://docs.gtk.org/gio/method.DBusProxy.call.html">g_dbus_proxy_call()</a></p>
<p>描述：异步调用代理上的 method_name 方法。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">g_dbus_proxy_call</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GDBusProxy* proxy,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* method_name,</span></span><br><span class="line"><span class="params">  GVariant* parameters,</span></span><br><span class="line"><span class="params">  GDBusCallFlags flags,</span></span><br><span class="line"><span class="params">  gint timeout_msec,</span></span><br><span class="line"><span class="params">  GCancellable* cancellable,</span></span><br><span class="line"><span class="params">  GAsyncReadyCallback callback,</span></span><br><span class="line"><span class="params">  gpointer user_data</span></span><br><span class="line"><span class="params">)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href>g_dbus_proxy_call_sync()</a></p>
<p>描述：同步调用<code>method_name</code>上的方法<code>proxy</code> ，调用线程被阻塞，直到收到回复。若返回值为NULL，则错误发生；若返回值不为NULL，调用者有责任使用 <code>g_variant_unref()</code> 去释放返回值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">GVariant*</span><br><span class="line"><span class="title function_">g_dbus_proxy_call_sync</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GDBusProxy* proxy,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* method_name,</span></span><br><span class="line"><span class="params">  GVariant* parameters,</span></span><br><span class="line"><span class="params">  GDBusCallFlags flags,</span></span><br><span class="line"><span class="params">  gint timeout_msec,</span></span><br><span class="line"><span class="params">  GCancellable* cancellable,</span></span><br><span class="line"><span class="params">  GError** error</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>



<p><a href="https://docs.gtk.org/gio/method.DBusConnection.call_sync.html">g_dbus_connection_call_sync()</a></p>
<p>描述：<strong>同步</strong>调用bus_name 拥有的object_path 远程对象上interface_name D-Bus 接口上的method_name 方法。当返回值为NULL，则有错误发生。若返回值不为NULL，调用有责任通过 g_variant_unref() 去释放它。该函数被调用时，线程被阻塞，直到收到回复。</p>
<p>若 <code>error != NULL</code> 说明错误发生，调用者有责任去释放error。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">GVariant*</span><br><span class="line"><span class="title function_">g_dbus_connection_call_sync</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GDBusConnection* connection,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* bus_name,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* object_path,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* interface_name,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* method_name,</span></span><br><span class="line"><span class="params">  GVariant* parameters,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> GVariantType* reply_type,</span></span><br><span class="line"><span class="params">  GDBusCallFlags flags,</span></span><br><span class="line"><span class="params">  gint timeout_msec,</span></span><br><span class="line"><span class="params">  GCancellable* cancellable,</span></span><br><span class="line"><span class="params">  GError** error</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>

<p><a href="https://docs.gtk.org/gio/method.DBusConnection.call.html">g_dbus_connection_call()</a></p>
<p>描述：<strong>异步</strong>调用bus_name 拥有的object_path 远程对象上interface_name D-Bus 接口上的method_name 方法。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">g_dbus_connection_call</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GDBusConnection* connection,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* bus_name,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* object_path,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* interface_name,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* method_name,</span></span><br><span class="line"><span class="params">  GVariant* parameters,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> GVariantType* reply_type,</span></span><br><span class="line"><span class="params">  GDBusCallFlags flags,</span></span><br><span class="line"><span class="params">  gint timeout_msec,</span></span><br><span class="line"><span class="params">  GCancellable* cancellable,</span></span><br><span class="line"><span class="params">  GAsyncReadyCallback callback,</span></span><br><span class="line"><span class="params">  gpointer user_data</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>

<p><a href="https://docs.gtk.org/gio/method.DBusConnection.call_finish.html">g_dbus_connection_call_finish()</a></p>
<p>描述：完成由 g_dbus_connection_call() 启动的操作。若返回值为NULL，则错误发生。当返回值不为NULL，调用者有责任通过 g_variant_unref() 去释放它。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GVariant*</span><br><span class="line">g_dbus_connection_call_finish (</span><br><span class="line">  GDBusConnection* connection,</span><br><span class="line">  GAsyncResult* res,</span><br><span class="line">  GError** error</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.gtk.org/gio/method.DBusConnection.signal_subscribe.html">g_dbus_connection_signal_subscribe()</a></p>
<p>描述：在connection上订阅信号，当信号被接收时调用回调函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">guint</span><br><span class="line"><span class="title function_">g_dbus_connection_signal_subscribe</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GDBusConnection* connection,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* sender,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* interface_name,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* member,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* object_path,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* arg0,</span></span><br><span class="line"><span class="params">  GDBusSignalFlags flags,</span></span><br><span class="line"><span class="params">  GDBusSignalCallback callback,</span></span><br><span class="line"><span class="params">  gpointer user_data,</span></span><br><span class="line"><span class="params">  GDestroyNotify user_data_free_func</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>

<p><strong><a href="https://docs.gtk.org/glib/method.Variant.get.html">g_variant_get()</a></strong></p>
<p>描述：解构一个<code>GVariant</code>实例，其功能类似 <code>scanf()</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">g_variant_get</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GVariant* value,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* format_string,</span></span><br><span class="line"><span class="params">  ...</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>



<p><a href="https://docs.gtk.org/glib/method.Variant.get_child_value.html">g_variant_get_child_value()</a></p>
<p>描述：从容器 GVariant 实例中读取子项。这包括variants、maybes、arrays、tuples和dictionary entries。在任何其他类型的 GVariant 上调用此函数都是错误的。调用者有责任使用 g_variant_unref() 去释放它（返回值）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">GVariant*</span><br><span class="line"><span class="title function_">g_variant_get_child_value</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GVariant* value,</span></span><br><span class="line"><span class="params">  gsize index_</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>

<p><strong><a href="https://docs.gtk.org/glib/method.VariantIter.init.html">g_variant_iter_init()</a></strong></p>
<p>描述：初始化（不申请内存） GVariantIter 变量。返回值表示项目数量。</p>
<p> <code>iter</code>在此调用之前可能完全未初始化；其旧值将被忽略。只要迭代器<code>value</code>存在，它就会一直有效，并且不需要以任何方式释放。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gsize</span><br><span class="line"><span class="title function_">g_variant_iter_init</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GVariantIter* iter,</span></span><br><span class="line"><span class="params">  GVariant* value</span></span><br><span class="line"><span class="params">)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong><a href="https://docs.gtk.org/glib/method.VariantIter.next.html">g_variant_iter_next()</a></strong></p>
<p>描述：获取容器的下一项，并根据将其解包到变量参数列表中<code>format_string</code>，返回TRUE。若返回值为FALSE，则该项没有值。</p>
<p>此函数的变量参数列表中给出的所有指针均假定指向未初始化的内存。调用者有责任释放解包过程返回的所有值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gboolean</span><br><span class="line"><span class="title function_">g_variant_iter_next</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GVariantIter* iter,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* format_string,</span></span><br><span class="line"><span class="params">  ...</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>

<p>内存释放的案例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// Iterates a dictionary of type &#x27;a&#123;sv&#125;&#x27;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">iterate_dictionary</span> <span class="params">(GVariant *dictionary)</span></span><br><span class="line">&#123;</span><br><span class="line">	GVariantIter iter;</span><br><span class="line">	GVariant *value;</span><br><span class="line">	gchar *key;</span><br><span class="line"></span><br><span class="line">	g_variant_iter_init (&amp;iter, dictionary);</span><br><span class="line">	<span class="keyword">while</span> (g_variant_iter_next (&amp;iter, <span class="string">&quot;&#123;sv&#125;&quot;</span>, &amp;key, &amp;value))</span><br><span class="line">	&#123;</span><br><span class="line">		g_print (<span class="string">&quot;Item &#x27;%s&#x27; has type &#x27;%s&#x27;\n&quot;</span>, key, </span><br><span class="line">                 g_variant_get_type_string (value));</span><br><span class="line"></span><br><span class="line">		<span class="comment">// must free data for ourselves</span></span><br><span class="line">		g_variant_unref (value);</span><br><span class="line">		g_free (key);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：<code>g_variant_iter_next()</code> 和 <code>g_variant_iter_loop()</code> 的区别，其中比较重要的是变量释放的位置。</p>
<p><strong><a href>g_variant_iter_loop()</a></strong></p>
<p>描述：获取容器中的下一项，并根据将其解包到变量参数列表中<code>format_string</code>，返回 TRUE，若容器没有下一项，则返回 FALSE。</p>
<p>第一次调用此函数时，变量参数列表中出现的指针假定指向未初始化的内存。第二次及以后的调用时，假定将给出相同的指针，并且它们将指向上次调用此函数时设置的内存。这样可以酌情释放先前的值。</p>
<p>此函数旨在与 while 循环一起使用，此函数只能在迭代数组时使用。仅使用格式字符串的字符串常量调用此函数才有效，并且每次都必须使用相同的字符串常量。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gboolean</span><br><span class="line"><span class="title function_">g_variant_iter_loop</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GVariantIter* iter,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* format_string,</span></span><br><span class="line"><span class="params">  ...</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>

<p>内存释放的案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Iterates a dictionary of type &#x27;a&#123;sv&#125;&#x27;</span><br><span class="line">void iterate_dictionary (GVariant *dictionary)</span><br><span class="line">&#123;</span><br><span class="line">	GVariantIter iter;</span><br><span class="line">	GVariant *value;</span><br><span class="line">	gchar *key;</span><br><span class="line"></span><br><span class="line">	g_variant_iter_init (&amp;iter, dictionary);</span><br><span class="line">	while (g_variant_iter_loop (&amp;iter, &quot;&#123;sv&#125;&quot;, &amp;key, &amp;value))</span><br><span class="line">	&#123;</span><br><span class="line">		g_print (&quot;Item &#x27;%s&#x27; has type &#x27;%s&#x27;\n&quot;, key, g_variant_get_type_string (value));</span><br><span class="line"></span><br><span class="line">		// no need to free &#x27;key&#x27; and &#x27;value&#x27; here</span><br><span class="line">		// unless breaking out of this loop</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大多数情况下您应该使用 g_variant_iter_next()。如果您只循环简单的整数和字符串类型，<code>g_variant_iter_next()</code>则绝对是首选。对于字符串类型，使用“&amp;”前缀可以完全避免分配任何内存（从而也避免释放任何内容）。</p>
<p>此函数实际上仅在解包到<code>GVariant</code>或 时有用，<code>GVariantIter</code>以便允许您跳过对 <code>g_variant_unref()</code>或 <code>g_variant_iter_free()</code> 的调用。</p>
<p><strong><a href="https://docs.gtk.org/glib/ctor.Variant.new.html#:~:text=GVariant%2A%20g_variant_new%20%28const%20gchar%2A%20format_string%2C...%20%5B%20%E2%88%92%5D%20Description,expected%20by%20this%20function%20are%20determined%20by%20format_string.">g_variant_new()</a></strong></p>
<p>描述：创建一个新的GVariant变量实例，若返回值不为NULL，调用者有责任去通过 <code>g_variant_unref</code> 释放它。这个函数一般配合while循环一起使用，且只能在迭代数组时使用，仅使用格式字符串的字符串常量调用此函数才有效，每次都必须使用相同的字符串常量。</p>
<p>格式字符串的第一个字符不能是“*”、“?”、“@”或“r”；本质上，<code>GVariant</code>此函数必须始终构造一个新的（而不是不加修改地传递它）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">GVariant*</span><br><span class="line"><span class="title function_">g_variant_new</span> <span class="params">(</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* format_string,</span></span><br><span class="line"><span class="params">  ...</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>





<p><a href="https://docs.gtk.org/glib/ctor.Variant.new_object_path.html">g_variant_new_object_path()</a></p>
<p>描述：创建一个D-Bus对象路径的GVariant变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">GVariant*</span><br><span class="line"><span class="title function_">g_variant_new_object_path</span> <span class="params">(</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* object_path</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>









<p><a href="https://docs.gtk.org/glib/func.strstr_len.html">g_strstr_len()</a></p>
<p>描述：其作用类似 strstr()</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gchar*</span><br><span class="line"><span class="title function_">g_strstr_len</span> <span class="params">(</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* haystack,</span></span><br><span class="line"><span class="params">  gssize haystack_len,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* needle</span></span><br><span class="line"><span class="params">)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://docs.gtk.org/glib/func.ascii_strdown.html">g_ascii_strdown()</a></p>
<p>描述：其作用类似 tolower()</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gchar*</span><br><span class="line"><span class="title function_">g_ascii_strdown</span> <span class="params">(</span></span><br><span class="line"><span class="params">  <span class="type">const</span> gchar* str,</span></span><br><span class="line"><span class="params">  gssize len</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>

<p><a href="https://docs.gtk.org/glib/method.Variant.get_string.html">g_variant_get_string()</a></p>
<p>描述：返回string的值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> gchar*</span><br><span class="line"><span class="title function_">g_variant_get_string</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GVariant* value,</span></span><br><span class="line"><span class="params">  gsize* length</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>

<p><a href="https://docs.gtk.org/glib/method.Variant.get_uint32.html">g_variant_get_uint32()</a></p>
<p>描述：返回uint32的值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">guint32</span><br><span class="line"><span class="title function_">g_variant_get_uint32</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GVariant* value</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>

<p><a href="https://docs.gtk.org/glib/method.Variant.get_boolean.html">g_variant_get_boolean()</a></p>
<p>描述：返回gboolean的值，取值范围：TRUE or FALSE</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gboolean</span><br><span class="line"><span class="title function_">g_variant_get_boolean</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GVariant* value</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>

<p><a href>g_variant_get_int16</a></p>
<p>描述：返回int16的值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gint16</span><br><span class="line"><span class="title function_">g_variant_get_int16</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GVariant* value</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>





<p><a href="https://docs.gtk.org/glib/method.Variant.get_type_string.html">g_variant_get_type_string()</a></p>
<p>描述：获取value值的类型字符串</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> gchar*</span><br><span class="line"><span class="title function_">g_variant_get_type_string</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GVariant* value</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>

<p><a href="https://docs.gtk.org/glib/func.strcmp0.html">g_strcmp0()</a></p>
<p>描述：其作用类似 strcmp()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int</span><br><span class="line">g_strcmp0 (</span><br><span class="line">  const char* str1,</span><br><span class="line">  const char* str2</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://docs.gtk.org/glib/method.Variant.get_type.html">g_variant_get_type()</a></p>
<p>描述：确认value的类型</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> GVariantType*</span><br><span class="line"><span class="title function_">g_variant_get_type</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GVariant* value</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>

<p><a href="https://docs.gtk.org/glib/method.Variant.is_of_type.html">g_variant_is_of_type()</a></p>
<p>描述：检查值的类型是否与提供的类型匹配。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gboolean</span><br><span class="line"><span class="title function_">g_variant_is_of_type</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GVariant* value,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> GVariantType* type</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>

<p><a href="https://docs.gtk.org/glib/func.printf.html">g_printf()</a></p>
<p>描述：其作用类似 printf()，glib提供一套类似于 <code>#include &lt;string.h&gt;</code> 的函数库<a href="https://docs.gtk.org/glib/string-utils.html#string-precision-pitfalls">String Utilities</a>，使用该函数库是必须显示的声明 <code>#include &lt;glib/gprintf.h&gt;</code> 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gint</span><br><span class="line">g_printf (</span><br><span class="line">  const gchar* format,</span><br><span class="line">  ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.gtk.org/glib/method.Variant.print.html">g_variant_print()</a></p>
<p>描述：将GVariant变量转换成字符串格式。若返回值不为NULL，调用者有责任释放返回值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gchar*</span><br><span class="line"><span class="title function_">g_variant_print</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GVariant* value,</span></span><br><span class="line"><span class="params">  gboolean type_annotate</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>

<p><a href="https://docs.gtk.org/glib/method.Error.free.html">g_error_free()</a></p>
<p>描述：释放GError指向的内存</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">g_error_free</span> <span class="params">(</span></span><br><span class="line"><span class="params">  GError* error</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>





<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>在Ubuntu 24.04 LTS系统上可以下载 d-feet工具，可以UI形式显示协议文档中的那些接口，以便快速测试和实现蓝牙功能。</p>
<h3 id="bluez"><a href="#bluez" class="headerlink" title="bluez"></a>bluez</h3><p>Linux系统使用 <a href="https://www.bluez.org/">BlueZ</a> 作为其官方蓝牙堆栈。BlueZ提供了对经典蓝牙和低功耗蓝牙的支持。目前最新的bluez版本是5.77，可以查看<a href="https://github.com/bluez/bluez">Github 开源项目 bluez</a>。</p>
<p>bluez提供一个bluetoothd服务程序和其他的工具程序。工具程序包括：</p>
<ul>
<li><strong>hcitool</strong>：主要是控制蓝牙模块的动作</li>
<li><strong>hciconfig</strong>：可以查看当前系统中的蓝牙适配器及其状态</li>
<li>sdptool：主要是查看和添加服务</li>
<li>rfcomm：主要用于连接和读写</li>
<li>agent：主要用于配对</li>
<li>hcidump：可以查看host和controler之间hci接口通信过程，可以用于调试</li>
<li>l2ping：</li>
<li>gatttool：主要针对BLE蓝牙模块的工具（bulez5后开始用<strong>bluetoothctl</strong>代替）</li>
</ul>
<h3 id="alsa-utils"><a href="#alsa-utils" class="headerlink" title="alsa-utils"></a>alsa-utils</h3><p><code>alsa-utils</code> 是一组用于配置和管理 Advanced Linux Sound Architecture (ALSA) 的实用程序。ALSA 是 Linux 内核的一部分，用于处理音频输入和输出。<code>alsa-utils</code> 提供了一系列命令行工具，用于控制和配置 ALSA 音频设备。该使用程序提供如下工具集：</p>
<ul>
<li><p>amixer：控制音频混合器设备。可以用来调整音量、开关静音等。</p>
</li>
<li><p>aplay：用于播放 PCM 数据或 WAV 文件。</p>
</li>
<li><p>arecord：用于录制 PCM 数据或 WAV 文件。</p>
</li>
<li><p>alsactl：管理 ALSA 控制器状态。可以用来保存和恢复混音器设置。</p>
</li>
<li><p>hdajackretask：重新分配 HD Audio 接口的功能。例如，可以将麦克风插孔重新分配为线路输入。</p>
</li>
<li><p>alsa-info.sh：收集系统上的 ALSA 相关信息，包括硬件设备、驱动程序版本等</p>
</li>
<li><p>alsamixer：一个基于文本的图形界面混音器工具，提供更直观的方式来调整音量、切换输入输出设备等。</p>
</li>
</ul>
<h3 id="bluealsa"><a href="#bluealsa" class="headerlink" title="bluealsa"></a>bluealsa</h3><p><code>bluealsa</code> 是一个用于将 ALSA（Advanced Linux Sound Architecture，高级Linux音频架构）与 Bluetooth 低功耗（即 BLE）音频协议相结合的解决方案。它使得 Linux 系统能够通过 BLE 连接蓝牙音频设备，并让蓝牙音频设备播放音频文件。</p>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>根据前文预定的需求，逐个编写并测试功能API接口，最后完成自定义库的封装。</p>
<p>使用bluez进行蓝牙设备连接的流程：</p>
<p>1、蓝牙适配器设置为：power on</p>
<p>2、蓝牙适配器开始扫描</p>
<p>​	订阅 <code>org.freedesktop.DBus.Properties.PropertiesChanged</code> 信号监听接口属性变化</p>
<p>​	订阅 <code>org.freedesktop.DBus.ObjectManager.InterfacesAdded</code> 信号监听接口新增</p>
<p>​	订阅 <code>org.freedesktop.DBus.ObjectManager.InterfacesRemoved</code> 信号监听接口移除</p>
<p>​	调用 <code>org.bluez.Adapter1.StartDiscovery</code> 方法开始扫描附近蓝牙设备</p>
<p>3、蓝牙适配器配对蓝牙设备</p>
<p>​	在 <code>InterfacesAdded</code> 信号回调中，检查是否出现目标蓝牙设备</p>
<p>​	发现目标蓝牙设备后，调用 <code>org.bluez.Adapter1.StopDiscovery</code>，蓝牙适配器停止扫描</p>
<p>​	调用 <code>org.bluez.Device1.Pair</code> 方法进行配对蓝牙设备</p>
<p>​	调用 <code>org.freedesktop.DBus.ObjectManager.GetManagedObjects</code> 方法获取适配器配对状态 </p>
<p>4、连接设备</p>
<p>​	配对成功后，调用 <code>org.bluez.Device1.Connect</code> 方法连接蓝牙设备</p>
<p>​	调用 <code>org.freedesktop.DBus.ObjectManager.GetManagedObjects</code> 方法获取适配器连接状态 </p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试目标平台：</p>
<ul>
<li>x86_64</li>
<li>aarch64</li>
<li>armv7l</li>
</ul>
<p>开发完成后，需要测试接口稳定性，包括：打开&#x2F;关闭、连接&#x2F;断开。</p>
<p><img src="/2024/08/16/2024/bluetoothctl-client-tool/image-20240919110533887.png" alt="image-20240919110533887"></p>
<h3 id="x86-64平台"><a href="#x86-64平台" class="headerlink" title="x86_64平台"></a>x86_64平台</h3><blockquote>
<p>bluez版本：5.64</p>
</blockquote>
<p>在x86_64平台测试连接蓝牙接口的稳定性，发现连接蓝牙设备后，使用 <code>RemoveDevice</code> 接口无法移除蓝牙设备，仅仅只是断开蓝牙设备连接。</p>
<h3 id="aarch64平台"><a href="#aarch64平台" class="headerlink" title="aarch64平台"></a>aarch64平台</h3><blockquote>
<p>bluez版本：5.72</p>
</blockquote>
<p>在aarch64平台测试连接蓝牙设备接口的稳定性，出现一个奇怪的现象：</p>
<p>当扫描到目标蓝牙设备后，立即执行连接操作，但是目标蓝牙设备立马就被删除了，导致连接操作超时。</p>
<p><img src="/2024/08/16/2024/bluetoothctl-client-tool/image-20240919111450094.png" alt="image-20240919111450094"></p>
<p><img src="/2024/08/16/2024/bluetoothctl-client-tool/image-20240919111528213.png" alt="image-20240919111528213"></p>
<p>很明显，目标蓝牙设备被bluetoothd过早移除了。查阅<a href="https://www.bluez.org/bluez-5-api-introduction-and-porting-guide/">bluez官网文档</a>，有这么一句话：</p>
<blockquote>
<p>Once the discovery stops, devices neither connected to or paired will be automatically removed by bluetoothd within three minutes.</p>
<p>翻译：一旦扫描停止，没有连接或配对的设备将在3分钟内被bluetoothd自动移除。</p>
</blockquote>
<h3 id="armv7l平台"><a href="#armv7l平台" class="headerlink" title="armv7l平台"></a>armv7l平台</h3><blockquote>
<p>bluez版本：5.77</p>
</blockquote>
<p>在armv7l平台测试连接蓝牙设备接口的稳定性：</p>
<ul>
<li><p>目标蓝牙设备：JBL ROCK，测试次数100次，成功99次，失败1次。失败原因：连接蓝牙设备时，蓝牙设备被过早移除。</p>
</li>
<li><p>目标蓝牙设备：小爱触屏音箱，测试次数100次，成功93次，失败7次。失败原因：连接蓝牙设备时，蓝牙设备被过早移除，之后尽管被发现，还是会导致连接超时。</p>
</li>
<li><p>目标蓝牙设备：Mi Speaker，测试册数100次，成功93次，失败7次。失败原因：连接蓝牙设备时，蓝牙设备被过早移除。</p>
</li>
</ul>
<p>关于“扫描到目标蓝牙设备后，执行连接操作，但是蓝牙设备立即被移除，导致连接超时” 这个问题，或许需要查看bluez项目中的bluetoothd源码，研究扫描到的蓝牙设备被bluetoothd自动移除的条件。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/bluez/bluez">1、bluez on github</a></p>
<p><a href="https://www.bluez.org/">2、bluez with Official Linux Bluetooth protocol stack</a></p>
<p><a href="https://git.kernel.org/pub/scm/bluetooth/bluez.git/tree/doc/org.bluez.Adapter.rst">3、org.bluez.Adapter.rst</a></p>
<p><a href="https://git.kernel.org/pub/scm/bluetooth/bluez.git/tree/doc/org.bluez.Device.rst">4、org.bluez.Device.rst</a></p>
<p><a href="https://git.kernel.org/pub/scm/bluetooth/bluez.git/tree/doc/org.bluez.Agent.rst">5、org.bluez.Agent.rst</a></p>
<p><a href="https://dbus.freedesktop.org/doc/dbus-specification.html">6、D-Bus Specification</a></p>
<p><a href="https://github.com/nkim-bitzap/bluetooth/blob/master/connector/connector.c">7、github.com&#x2F;nkim-bitzap&#x2F;bluetooth</a></p>
<p><a href="https://blog.linumiz.com/archives/229">8、linumiz蓝牙系列博客</a></p>
<p><a href="https://www.bluetooth.com/specifications/assigned-numbers/">9、Bluetooth Office Document: Assigned Numbers Document (PDF)</a></p>
<p><a href="https://www.cnblogs.com/chenbin7/archive/2012/10/16/2726510.html">10、Linux下Bluez的编程实现</a></p>
]]></content>
      <categories>
        <category>bluetooth</category>
      </categories>
      <tags>
        <tag>bluez</tag>
        <tag>bluetooth</tag>
        <tag>raspberry 4b</tag>
        <tag>dbus</tag>
        <tag>gdbus</tag>
      </tags>
  </entry>
  <entry>
    <title>esp-matter：light project</title>
    <url>/2024/08/15/2024/esp-matter-light-project/</url>
    <content><![CDATA[<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>拷贝 <code>~/esp/esp-matter/examples</code> 到指定目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/esp/example-matter</span><br><span class="line"><span class="built_in">cp</span> -r ~/esp/esp-matter/examples/* ~/esp/example-matter</span><br><span class="line"><span class="built_in">cd</span> ~/esp/example-matter/light</span><br></pre></td></tr></table></figure>

<h3 id="设置目标"><a href="#设置目标" class="headerlink" title="设置目标"></a>设置目标</h3><p>开发板Soc是esp32-c3，故设置目标选择：esp32c3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 激活esp-idf和esp-matter环境</span></span><br><span class="line">get_idf</span><br><span class="line">get_matter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置目标</span></span><br><span class="line">idf.py set-target esp32c3</span><br></pre></td></tr></table></figure>

<h3 id="编译固件"><a href="#编译固件" class="headerlink" title="编译固件"></a>编译固件</h3><p>直接开始编译固件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">idf.py build</span><br></pre></td></tr></table></figure>

<h3 id="烧录固件"><a href="#烧录固件" class="headerlink" title="烧录固件"></a>烧录固件</h3><p>将开发板插入PC的USB接口，修改串口权限，开始烧录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找串口权限</span></span><br><span class="line"><span class="built_in">ls</span> -l /dev/ttyUSB0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改串口权限</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 664 /dev/ttyUSB0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 烧录固件</span></span><br><span class="line">idf.py -p /dev/ttyUSB0 flash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若想完全重新编译，需要先删除build目录下所有文件</span></span><br><span class="line">idf.py fullclean</span><br></pre></td></tr></table></figure>

<p><em>注意：不同开发板的接入PC后，串口名称可能不同，目前已知的两种名称：<code>/dev/ttyUSB0</code> 和 <code>/dev/ttyACM0</code></em></p>
<p><em>乐鑫esp32c3开发板串口名称：&#x2F;dev&#x2F;ttyUSB0</em></p>
<p><em>合宙esp32c3开发板串口名称：&#x2F;dev&#x2F;ttyACM0</em></p>
<h2 id="配网"><a href="#配网" class="headerlink" title="配网"></a>配网</h2><p>通过BLE方式给设备配网：指通过低功耗蓝牙（即BLE）将SSID和密码发送给WiFi设备，然后WiFi连接到指定的WiFi网络。</p>
<blockquote>
<p>什么是配网？</p>
</blockquote>
<p>配网指的是外部向 WiFi 设备提供 SSID和密码，以便 WiFi 设备可以连接指定的AP并加入AP所建立的 WiFi 网络。配网的核心问题是通过各种方法（SoftAP配网、一键配网、蓝牙配网、其他方式配网），将WiFi的 SSID和密码发送到需要联网的WiFi设备，然后由WiFi设备去连接指定的WiFi网络，达到接入局域网或互联网的目的。</p>
<h3 id="chip-tool命令配网"><a href="#chip-tool命令配网" class="headerlink" title="chip-tool命令配网"></a>chip-tool命令配网</h3><p>启动Terminal A用于monitor串口数据，启动Terminal B用于执行chip-tool命令。其中chip-tool工具有两种使用方式：单次执行 和 交互执行。交互执行控制设备时，响应速度非常快，并且不容易产生超时报错。单次执行某条指令需要再一定时间周期内完成，否则chip-tool将会报错：Timeout。</p>
<p><strong>单次执行：</strong></p>
<p>单次执行配网命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模版</span></span><br><span class="line">chip-tool pairing ble-wifi &lt;node_id&gt; &lt;ssid&gt; &lt;password&gt; &lt;pin_code&gt; &lt;discriminator&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">chip-tool pairing ble-wifi 0x7283 CUBEC_AP_2.4G cubec2015 20202021 3840</span><br></pre></td></tr></table></figure>

<p><em>命令解释：</em></p>
<ul>
<li><p><code>0x7283</code> 是自定义一个随机的 <code>node_id</code></p>
</li>
<li><p><code>CUBEC_AP_2.4G</code> 、<code>cubec2015</code>：分别是wifi的 <code>ssid</code> 和 <code>password</code></p>
</li>
<li><p><code>20202021</code> 是 <code>pin_code</code></p>
</li>
<li><p><code>3840</code> 是 <code>discriminator</code></p>
</li>
</ul>
<p><em>单次执行容易导致超时，建议使用交互执行！！！</em></p>
<p><strong>交互执行（建议）：</strong></p>
<p><strong>Terminal A</strong>处于等待配网状态，状态如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">I (1725) esp_matter_core: Dynamic endpoint 1 added</span><br><span class="line">I (1735) chip[DL]: WIFI_EVENT_STA_START</span><br><span class="line">W (1735) wifi:Haven<span class="string">&#x27;t to connect to a suitable AP now!</span></span><br><span class="line"><span class="string">I (1745) chip[DL]: Done driving station state, nothing else to do...</span></span><br><span class="line"><span class="string">I (1745) chip[DL]: Configuring CHIPoBLE advertising (interval 25 ms, connectable)</span></span><br><span class="line"><span class="string">I (1755) NimBLE: GAP procedure initiated: advertise; </span></span><br><span class="line"><span class="string">I (1765) NimBLE: disc_mode=2</span></span><br><span class="line"><span class="string">I (1765) NimBLE:  adv_channel_map=0 own_addr_type=1 adv_filter_policy=0 adv_itvl_min=40 adv_itvl_max=40</span></span><br><span class="line"><span class="string">I (1775) NimBLE: </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I (1775) chip[DL]: CHIPoBLE advertising started</span></span><br><span class="line"><span class="string">I (1785) app_main: Commissioning window opened</span></span><br><span class="line"><span class="string">I (1855) main_task: Returned from app_main()</span></span><br><span class="line"><span class="string">&gt; I (4725) esp_matter_core: Store the deferred attribute 0x0 of cluster 0x8 on endpoint 0x1</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p><em>注意：若想将设备清除所有的配网信息，可以将设备恢复出厂状态，在 Terminal A 执行命令：<code>matter device factoryreset</code></em></p>
<p><strong>Terminal B</strong>中执行命令：<code>chip-tool interactive start</code></p>
<p>此时进入交互模式，状态如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  +-------------------------------------------------------------------------------------+</span><br><span class="line">  | Command sets:                                                                       |</span><br><span class="line">  +-------------------------------------------------------------------------------------+</span><br><span class="line">  | * any                                                                               |</span><br><span class="line">  |   - Commands <span class="keyword">for</span> sending IM messages based on cluster <span class="built_in">id</span>, not cluster name.         |</span><br><span class="line">  | * delay                                                                             |</span><br><span class="line">  |   - Commands <span class="keyword">for</span> waiting <span class="keyword">for</span> something to happen.                                   |</span><br><span class="line">  | * discover                                                                          |</span><br><span class="line">  |   - Commands <span class="keyword">for</span> device discovery.                                                  |</span><br><span class="line">  | * groupsettings                                                                     |</span><br><span class="line">  |   - Commands <span class="keyword">for</span> manipulating group keys and memberships <span class="keyword">for</span> chip-tool itself.      |</span><br><span class="line">  | * icd                                                                               |</span><br><span class="line">  |   - Commands <span class="keyword">for</span> client-side ICD management.                                        |</span><br><span class="line">  | * pairing                                                                           |</span><br><span class="line">  |   - Commands <span class="keyword">for</span> commissioning devices.                                             |</span><br><span class="line">  | * payload                                                                           |</span><br><span class="line">  |   - Commands <span class="keyword">for</span> parsing and generating setup payloads.                             |</span><br><span class="line">  | * sessionmanagement                                                                 |</span><br><span class="line">  |   - Commands <span class="keyword">for</span> managing CASE and PASE session state.                              |</span><br><span class="line">  | * subscriptions                                                                     |</span><br><span class="line">  |   - Commands <span class="keyword">for</span> shutting down subscriptions.                                       |</span><br><span class="line">  | * interactive                                                                       |</span><br><span class="line">  |   - Commands <span class="keyword">for</span> starting long-lived interactive modes.                             |</span><br><span class="line">  | * storage                                                                           |</span><br><span class="line">  |   - Commands <span class="keyword">for</span> managing persistent data stored by chip-tool.                      |</span><br><span class="line">  +-------------------------------------------------------------------------------------+</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在交互模式内执行命令为设备配网：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pairing ble-wifi 0x7283 CUBEC_AP_2.4G cubec2015 20202021 3840</span><br></pre></td></tr></table></figure>



<p>若设备配网成功，在Terminal A会出现设备设备已获取IP地址，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">I (323035) wifi:&lt;ba-add&gt;idx:1 (ifx:0, <span class="built_in">fc</span>:83:c6:00:8f:ae), tid:6, ssn:1, winSize:64</span><br><span class="line">I (323075) chip[DL]: Confirm received <span class="keyword">for</span> CHIPoBLE TX characteristic indication (con 1) status= 14 </span><br><span class="line">I (323845) esp_netif_handlers: sta ip: 192.168.5.201, mask: 255.255.255.0, gw: 192.168.5.1</span><br><span class="line">I (323845) chip[DL]: IP_EVENT_STA_GOT_IP</span><br><span class="line">I (323855) chip[DL]: IPv4 address changed on WiFi station interface: 192.168.5.201/255.255.255.0 gateway 192.168.5.1</span><br><span class="line">I (323865) chip[DL]: IPv4 Internet connectivity ESTABLISHED</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="扫码配网"><a href="#扫码配网" class="headerlink" title="扫码配网"></a>扫码配网</h2><h2 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h2><blockquote>
<p>chip-tool是什么？</p>
</blockquote>
<p>chip-tool是用于开发和调试Matter设备的命令行工具。</p>
<p>设备配网成功后，接着可以在Terminal B通过chip-tool交互模式内控制设备，例如：打开LED、关闭LED、反转LED、调节亮度、调节颜色</p>
<p><strong>单次执行：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开LED</span></span><br><span class="line">chip-tool onoff on 0x7283 0x1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭LED</span></span><br><span class="line">chip-tool onoff off 0x7283 0x1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反转LED</span></span><br><span class="line">chip-tool onoff toggle 0x7283 0x1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调节亮度</span></span><br><span class="line"><span class="comment">## 设置亮度为10%（实际低于30%后,LED就熄灭了）</span></span><br><span class="line">chip-tool levelcontrol move-to-level 10 0 0 0 0x7283 0x1</span><br><span class="line"><span class="comment">## 设置亮度为100%</span></span><br><span class="line">chip-tool levelcontrol move-to-level 100 0 0 0 0x7283 0x1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调节颜色</span></span><br><span class="line"><span class="comment">## 设置暖色调色温</span></span><br><span class="line">chip-tool colorcontrol move-to-color-temperature 500 0 0 0 0x7283 0x1</span><br><span class="line"><span class="comment">## 设置冷色调色温</span></span><br><span class="line">chip-tool colorcontrol move-to-color-temperature 154 0 0 0 0x7283 0x1</span><br></pre></td></tr></table></figure>

<p><strong>交互执行（建议）：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开LED</span></span><br><span class="line">onoff on 0x7283 0x1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭LED</span></span><br><span class="line">onoff off 0x7283 0x1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反转LED</span></span><br><span class="line">onoff toggle 0x7283 0x1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调节亮度</span></span><br><span class="line"><span class="comment">## 设置亮度为10%（实际低于30%后,LED就熄灭了）</span></span><br><span class="line">levelcontrol move-to-level 10 0 0 0 0x7283 0x1</span><br><span class="line"><span class="comment">## 设置亮度为100%</span></span><br><span class="line">levelcontrol move-to-level 100 0 0 0 0x7283 0x1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调节颜色</span></span><br><span class="line"><span class="comment">## 设置暖色调色温</span></span><br><span class="line">colorcontrol move-to-color-temperature 500 0 0 0 0x7283 0x1</span><br><span class="line"><span class="comment">## 设置冷色调色温</span></span><br><span class="line">colorcontrol move-to-color-temperature 154 0 0 0 0x7283 0x1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>命令解释：</em></p>
<p><em>1、onoff：表示OnOff Cluster</em></p>
<p><em>2、on、off、toggle：分别表示On、Off、Toggle命令</em></p>
<p><em>3、0x7283：表示Node ID，这是之前在配网时定义的值</em></p>
<p><em>4、0x01：表示Endpoint 1，这是Light Project项目代码中新建的一个Endpoint。</em></p>
<p><em>5、levelcontrol、colorcontorl：分别表示 LevelControl Cluster 和 ColorControl Cluster</em></p>
<p><em>6、move-to-level 、move-to-color-temperature：分别表示对应Cluster下的命令</em></p>
<p><strong>chip-tool命令扩展：</strong></p>
<p>从Matter设备读取（read）信息，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; onoff <span class="built_in">read</span> on-off 0x7283 0x01</span><br><span class="line">[1726799530.981378][352215:352215] CHIP:TOO: Command: onoff <span class="built_in">read</span> on-off 0x7283 0x01 </span><br><span class="line">[1726799530.981581][352215:352217] CHIP:TOO: Sending <span class="built_in">command</span> to node 0x7283</span><br><span class="line">[1726799530.981826][352215:352217] CHIP:CSM: FindOrEstablishSession: PeerId = [1:0000000000007283]</span><br><span class="line">[1726799530.981836][352215:352217] CHIP:CSM: FindOrEstablishSession: No existing OperationalSessionSetup instance found</span><br><span class="line">[1726799530.981852][352215:352217] CHIP:DIS: Found an existing secure session to [1:0000000000007283]!</span><br><span class="line">[1726799530.981860][352215:352217] CHIP:DIS: OperationalSessionSetup[1:0000000000007283]: State change 1 --&gt; 5</span><br><span class="line">[1726799530.981875][352215:352217] CHIP:TOO: Sending ReadAttribute to:</span><br><span class="line">[1726799530.982385][352215:352217] CHIP:TOO: 	cluster 0x0000_0006, attribute: 0x0000_0000, endpoint 1</span><br><span class="line">[1726799530.982404][352215:352217] CHIP:DMG: SendReadRequest ReadClient[0x72cc4000a6c0]: Sending Read Request</span><br><span class="line">[1726799530.982496][352215:352217] CHIP:EM: &lt;&lt;&lt; [E:18684i S:41998 M:177312788] (S) Msg TX to 1:0000000000007283 [428F] [UDP:[fe80::f29e:9eff:fe99:1260%wlp1s0]:5540] --- Type 0001:02 (IM:ReadRequest)</span><br><span class="line">[1726799530.982607][352215:352217] CHIP:DMG: MoveToState ReadClient[0x72cc4000a6c0]: Moving to [AwaitingIn]</span><br><span class="line">[1726799531.173092][352215:352217] CHIP:EM: &gt;&gt;&gt; [E:18684i S:41998 M:189153990 (Ack:177312788)] (S) Msg RX from 1:0000000000007283 [428F] --- Type 0001:05 (IM:ReportData)</span><br><span class="line">[1726799531.173129][352215:352217] CHIP:EM: Found matching exchange: 18684i, Delegate: 0x72cc4000a6d0</span><br><span class="line">[1726799531.173146][352215:352217] CHIP:EM: Rxd Ack; Removing MessageCounter:177312788 from Retrans Table on exchange 18684i</span><br><span class="line">[1726799531.173182][352215:352217] CHIP:DMG: ReportDataMessage =</span><br><span class="line">[1726799531.173193][352215:352217] CHIP:DMG: &#123;</span><br><span class="line">[1726799531.173206][352215:352217] CHIP:DMG: 	AttributeReportIBs =</span><br><span class="line">[1726799531.173221][352215:352217] CHIP:DMG: 	[</span><br><span class="line">[1726799531.173232][352215:352217] CHIP:DMG: 		AttributeReportIB =</span><br><span class="line">[1726799531.173250][352215:352217] CHIP:DMG: 		&#123;</span><br><span class="line">[1726799531.173261][352215:352217] CHIP:DMG: 			AttributeDataIB =</span><br><span class="line">[1726799531.173278][352215:352217] CHIP:DMG: 			&#123;</span><br><span class="line">[1726799531.173291][352215:352217] CHIP:DMG: 				DataVersion = 0xe0b02f82,</span><br><span class="line">[1726799531.173307][352215:352217] CHIP:DMG: 				AttributePathIB =</span><br><span class="line">[1726799531.173321][352215:352217] CHIP:DMG: 				&#123;</span><br><span class="line">[1726799531.173334][352215:352217] CHIP:DMG: 					Endpoint = 0x1,</span><br><span class="line">[1726799531.173348][352215:352217] CHIP:DMG: 					Cluster = 0x6,</span><br><span class="line">[1726799531.173363][352215:352217] CHIP:DMG: 					Attribute = 0x0000_0000,</span><br><span class="line">[1726799531.173376][352215:352217] CHIP:DMG: 				&#125;</span><br><span class="line">[1726799531.173395][352215:352217] CHIP:DMG: 					</span><br><span class="line">[1726799531.173409][352215:352217] CHIP:DMG: 				Data = <span class="literal">false</span>, </span><br><span class="line">[1726799531.173422][352215:352217] CHIP:DMG: 			&#125;,</span><br><span class="line">[1726799531.173436][352215:352217] CHIP:DMG: 			</span><br><span class="line">[1726799531.173446][352215:352217] CHIP:DMG: 		&#125;,</span><br><span class="line">[1726799531.173461][352215:352217] CHIP:DMG: 		</span><br><span class="line">[1726799531.173470][352215:352217] CHIP:DMG: 	],</span><br><span class="line">[1726799531.173484][352215:352217] CHIP:DMG: 	</span><br><span class="line">[1726799531.173495][352215:352217] CHIP:DMG: 	SuppressResponse = <span class="literal">true</span>, </span><br><span class="line">[1726799531.173506][352215:352217] CHIP:DMG: 	InteractionModelRevision = 11</span><br><span class="line">[1726799531.173515][352215:352217] CHIP:DMG: &#125;</span><br><span class="line">[1726799531.175422][352215:352217] CHIP:TOO: Endpoint: 1 Cluster: 0x0000_0006 Attribute 0x0000_0000 DataVersion: 3769642882</span><br><span class="line">[1726799531.175440][352215:352217] CHIP:TOO:   OnOff: FALSE</span><br><span class="line">[1726799531.175518][352215:352217] CHIP:EM: &lt;&lt;&lt; [E:18684i S:41998 M:177312789 (Ack:189153990)] (S) Msg TX to 1:0000000000007283 [428F] [UDP:[fe80::f29e:9eff:fe99:1260%wlp1s0]:5540] --- Type 0000:10 (SecureChannel:StandaloneAck)</span><br><span class="line">[1726799531.175575][352215:352217] CHIP:EM: Flushed pending ack <span class="keyword">for</span> MessageCounter:189153990 on exchange 18684i</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从Matter设备订阅（subscribe）信息，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; onoff subscribe on-off 5 30  0x7283 0x1</span><br><span class="line">[1726799808.099530][352215:352215] CHIP:TOO: Command: onoff subscribe on-off 5 30 0x7283 0x1 </span><br><span class="line">[1726799808.099753][352215:352217] CHIP:TOO: Sending <span class="built_in">command</span> to node 0x7283</span><br><span class="line">[1726799808.100002][352215:352217] CHIP:CSM: FindOrEstablishSession: PeerId = [1:0000000000007283]</span><br><span class="line">[1726799808.100011][352215:352217] CHIP:CSM: FindOrEstablishSession: No existing OperationalSessionSetup instance found</span><br><span class="line">[1726799808.100026][352215:352217] CHIP:DIS: Found an existing secure session to [1:0000000000007283]!</span><br><span class="line">[1726799808.100035][352215:352217] CHIP:DIS: OperationalSessionSetup[1:0000000000007283]: State change 1 --&gt; 5</span><br><span class="line">[1726799808.100051][352215:352217] CHIP:TOO: Sending SubscribeAttribute to:</span><br><span class="line">[1726799808.100063][352215:352217] CHIP:TOO: 	cluster 0x0000_0006, attribute: 0x0000_0000, endpoint 1</span><br><span class="line">[1726799808.100169][352215:352217] CHIP:EM: &lt;&lt;&lt; [E:18685i S:41998 M:177312790] (S) Msg TX to 1:0000000000007283 [428F] [UDP:[fe80::f29e:9eff:fe99:1260%wlp1s0]:5540] --- Type 0001:03 (IM:SubscribeRequest)</span><br><span class="line">[1726799808.100270][352215:352217] CHIP:DMG: MoveToState ReadClient[0x72cc4000a6c0]: Moving to [AwaitingIn]</span><br><span class="line">[1726799808.273067][352215:352217] CHIP:EM: &gt;&gt;&gt; [E:18685i S:41998 M:189153991 (Ack:177312790)] (S) Msg RX from 1:0000000000007283 [428F] --- Type 0001:05 (IM:ReportData)</span><br><span class="line">[1726799808.273108][352215:352217] CHIP:EM: Found matching exchange: 18685i, Delegate: 0x72cc4000a6d0</span><br><span class="line">[1726799808.273135][352215:352217] CHIP:EM: Rxd Ack; Removing MessageCounter:177312790 from Retrans Table on exchange 18685i</span><br><span class="line">[1726799808.273179][352215:352217] CHIP:DMG: ReportDataMessage =</span><br><span class="line">[1726799808.273192][352215:352217] CHIP:DMG: &#123;</span><br><span class="line">[1726799808.273204][352215:352217] CHIP:DMG: 	SubscriptionId = 0xef8890e9,</span><br><span class="line">[1726799808.273218][352215:352217] CHIP:DMG: 	AttributeReportIBs =</span><br><span class="line">[1726799808.273237][352215:352217] CHIP:DMG: 	[</span><br><span class="line">[1726799808.273248][352215:352217] CHIP:DMG: 		AttributeReportIB =</span><br><span class="line">[1726799808.273267][352215:352217] CHIP:DMG: 		&#123;</span><br><span class="line">[1726799808.273279][352215:352217] CHIP:DMG: 			AttributeDataIB =</span><br><span class="line">[1726799808.273295][352215:352217] CHIP:DMG: 			&#123;</span><br><span class="line">[1726799808.273313][352215:352217] CHIP:DMG: 				DataVersion = 0xe0b02f82,</span><br><span class="line">[1726799808.273332][352215:352217] CHIP:DMG: 				AttributePathIB =</span><br><span class="line">[1726799808.273351][352215:352217] CHIP:DMG: 				&#123;</span><br><span class="line">[1726799808.273369][352215:352217] CHIP:DMG: 					Endpoint = 0x1,</span><br><span class="line">[1726799808.273389][352215:352217] CHIP:DMG: 					Cluster = 0x6,</span><br><span class="line">[1726799808.273409][352215:352217] CHIP:DMG: 					Attribute = 0x0000_0000,</span><br><span class="line">[1726799808.273424][352215:352217] CHIP:DMG: 				&#125;</span><br><span class="line">[1726799808.273440][352215:352217] CHIP:DMG: 					</span><br><span class="line">[1726799808.273469][352215:352217] CHIP:DMG: 				Data = <span class="literal">false</span>, </span><br><span class="line">[1726799808.273481][352215:352217] CHIP:DMG: 			&#125;,</span><br><span class="line">[1726799808.273497][352215:352217] CHIP:DMG: 			</span><br><span class="line">[1726799808.273508][352215:352217] CHIP:DMG: 		&#125;,</span><br><span class="line">[1726799808.273523][352215:352217] CHIP:DMG: 		</span><br><span class="line">[1726799808.273533][352215:352217] CHIP:DMG: 	],</span><br><span class="line">[1726799808.273549][352215:352217] CHIP:DMG: 	</span><br><span class="line">[1726799808.273559][352215:352217] CHIP:DMG: 	InteractionModelRevision = 11</span><br><span class="line">[1726799808.273569][352215:352217] CHIP:DMG: &#125;</span><br><span class="line">[1726799808.273644][352215:352217] CHIP:TOO: Endpoint: 1 Cluster: 0x0000_0006 Attribute 0x0000_0000 DataVersion: 3769642882</span><br><span class="line">[1726799808.273682][352215:352217] CHIP:TOO:   OnOff: FALSE</span><br><span class="line">[1726799808.273711][352215:352217] CHIP:DMG: MoveToState ReadClient[0x72cc4000a6c0]: Moving to [AwaitingSu]</span><br><span class="line">[1726799808.273944][352215:352217] CHIP:EM: &lt;&lt;&lt; [E:18685i S:41998 M:177312791 (Ack:189153991)] (S) Msg TX to 1:0000000000007283 [428F] [UDP:[fe80::f29e:9eff:fe99:1260%wlp1s0]:5540] --- Type 0001:01 (IM:StatusResponse)</span><br><span class="line">[1726799808.624854][352215:352217] CHIP:EM: Retransmitting MessageCounter:177312791 on exchange 18685i Send Cnt 1</span><br><span class="line">[1726799808.654348][352215:352217] CHIP:EM: &gt;&gt;&gt; [E:18685i S:41998 M:189153992 (Ack:177312791)] (S) Msg RX from 1:0000000000007283 [428F] --- Type 0001:04 (IM:SubscribeResponse)</span><br><span class="line">[1726799808.654383][352215:352217] CHIP:EM: Found matching exchange: 18685i, Delegate: 0x72cc4000a6d0</span><br><span class="line">[1726799808.654408][352215:352217] CHIP:EM: Rxd Ack; Removing MessageCounter:177312791 from Retrans Table on exchange 18685i</span><br><span class="line">[1726799808.654433][352215:352217] CHIP:DMG: SubscribeResponse is received</span><br><span class="line">[1726799808.654462][352215:352217] CHIP:DMG: SubscribeResponseMessage =</span><br><span class="line">[1726799808.654475][352215:352217] CHIP:DMG: &#123;</span><br><span class="line">[1726799808.654487][352215:352217] CHIP:DMG: 	SubscriptionId = 0xef8890e9,</span><br><span class="line">[1726799808.654501][352215:352217] CHIP:DMG: 	MaxInterval = 0x1e,</span><br><span class="line">[1726799808.654514][352215:352217] CHIP:DMG: 	InteractionModelRevision = 11</span><br><span class="line">[1726799808.654526][352215:352217] CHIP:DMG: &#125;</span><br><span class="line">[1726799808.654544][352215:352217] CHIP:DMG: Subscription established with SubscriptionID = 0xef8890e9 MinInterval = 5s MaxInterval = 30s Peer = 01:0000000000007283</span><br><span class="line">[1726799808.654562][352215:352217] CHIP:DMG: MoveToState ReadClient[0x72cc4000a6c0]: Moving to [Subscripti]</span><br><span class="line">[1726799808.654597][352215:352217] CHIP:DMG: Refresh LivenessCheckTime <span class="keyword">for</span> 34224 milliseconds with SubscriptionId = 0xef8890e9 Peer = 01:0000000000007283</span><br><span class="line">[1726799808.654708][352215:352217] CHIP:EM: &lt;&lt;&lt; [E:18685i S:41998 M:177312792 (Ack:189153992)] (S) Msg TX to 1:0000000000007283 [428F] [UDP:[fe80::f29e:9eff:fe99:1260%wlp1s0]:5540] --- Type 0000:10 (SecureChannel:StandaloneAck)</span><br><span class="line">[1726799808.654836][352215:352217] CHIP:EM: Flushed pending ack <span class="keyword">for</span> MessageCounter:189153992 on exchange 18685i</span><br><span class="line">[1726799809.093742][352215:352217] CHIP:EM: &gt;&gt;&gt; [E:18685i S:41998 M:189153993 (Ack:177312791)] (S) Msg RX from 1:0000000000007283 [428F] --- Type 0000:10 (SecureChannel:StandaloneAck)</span><br><span class="line">[1726799809.093839][352215:352217] CHIP:IN: Received a duplicate message with MessageCounter:189153992 on exchange 18685i</span><br><span class="line">[1726799809.093855][352215:352217] CHIP:EM: &gt;&gt;&gt; [E:18685i S:41998 M:189153992 (Ack:177312791)] (S) Msg RX from 1:0000000000007283 [428F] --- Type 0001:04 (IM:SubscribeResponse)</span><br><span class="line">[1726799809.093875][352215:352217] CHIP:EM: Generating StandaloneAck via exchange: 18685i</span><br><span class="line">[1726799809.093885][352215:352217] CHIP:EM: Forcing tx of solitary ack <span class="keyword">for</span> duplicate MessageCounter:189153992 on exchange 18685i</span><br><span class="line">[1726799809.093964][352215:352217] CHIP:EM: &lt;&lt;&lt; [E:18685i S:41998 M:177312793 (Ack:189153992)] (S) Msg TX to 1:0000000000007283 [428F] [UDP:[fe80::f29e:9eff:fe99:1260%wlp1s0]:5540] --- Type 0000:10 (SecureChannel:StandaloneAck)</span><br><span class="line">[1726799814.284411][352215:352217] CHIP:EM: &gt;&gt;&gt; [E:64465r S:41998 M:189153994] (S) Msg RX from 1:0000000000007283 [428F] --- Type 0001:05 (IM:ReportData)</span><br><span class="line">[1726799814.284442][352215:352217] CHIP:EM: Handling via exchange: 64465r, Delegate: 0x59c53aff2ea8</span><br><span class="line">[1726799814.284474][352215:352217] CHIP:DMG: ReportDataMessage =</span><br><span class="line">[1726799814.284491][352215:352217] CHIP:DMG: &#123;</span><br><span class="line">[1726799814.284498][352215:352217] CHIP:DMG: 	SubscriptionId = 0xef8890e9,</span><br><span class="line">[1726799814.284502][352215:352217] CHIP:DMG: 	AttributeReportIBs =</span><br><span class="line">[1726799814.284509][352215:352217] CHIP:DMG: 	[</span><br><span class="line">[1726799814.284513][352215:352217] CHIP:DMG: 		AttributeReportIB =</span><br><span class="line">[1726799814.284519][352215:352217] CHIP:DMG: 		&#123;</span><br><span class="line">[1726799814.284523][352215:352217] CHIP:DMG: 			AttributeDataIB =</span><br><span class="line">[1726799814.284528][352215:352217] CHIP:DMG: 			&#123;</span><br><span class="line">[1726799814.284533][352215:352217] CHIP:DMG: 				DataVersion = 0xe0b02f83,</span><br><span class="line">[1726799814.284538][352215:352217] CHIP:DMG: 				AttributePathIB =</span><br><span class="line">[1726799814.284544][352215:352217] CHIP:DMG: 				&#123;</span><br><span class="line">[1726799814.284549][352215:352217] CHIP:DMG: 					Endpoint = 0x1,</span><br><span class="line">[1726799814.284555][352215:352217] CHIP:DMG: 					Cluster = 0x6,</span><br><span class="line">[1726799814.284561][352215:352217] CHIP:DMG: 					Attribute = 0x0000_0000,</span><br><span class="line">[1726799814.284567][352215:352217] CHIP:DMG: 				&#125;</span><br><span class="line">[1726799814.284573][352215:352217] CHIP:DMG: 					</span><br><span class="line">[1726799814.284583][352215:352217] CHIP:DMG: 				Data = <span class="literal">true</span>, </span><br><span class="line">[1726799814.284589][352215:352217] CHIP:DMG: 			&#125;,</span><br><span class="line">[1726799814.284595][352215:352217] CHIP:DMG: 			</span><br><span class="line">[1726799814.284598][352215:352217] CHIP:DMG: 		&#125;,</span><br><span class="line">[1726799814.284603][352215:352217] CHIP:DMG: 		</span><br><span class="line">[1726799814.284607][352215:352217] CHIP:DMG: 	],</span><br><span class="line">[1726799814.284612][352215:352217] CHIP:DMG: 	</span><br><span class="line">[1726799814.284616][352215:352217] CHIP:DMG: 	InteractionModelRevision = 11</span><br><span class="line">[1726799814.284620][352215:352217] CHIP:DMG: &#125;</span><br><span class="line">[1726799814.284686][352215:352217] CHIP:TOO: Endpoint: 1 Cluster: 0x0000_0006 Attribute 0x0000_0000 DataVersion: 3769642883</span><br><span class="line">[1726799814.284712][352215:352217] CHIP:TOO:   OnOff: TRUE</span><br><span class="line">[1726799814.284738][352215:352217] CHIP:DMG: Refresh LivenessCheckTime <span class="keyword">for</span> 34224 milliseconds with SubscriptionId = 0xef8890e9 Peer = 01:0000000000007283</span><br><span class="line">[1726799814.284998][352215:352217] CHIP:EM: &lt;&lt;&lt; [E:64465r S:41998 M:177312794 (Ack:189153994)] (S) Msg TX to 1:0000000000007283 [428F] [UDP:[fe80::f29e:9eff:fe99:1260%wlp1s0]:5540] --- Type 0001:01 (IM:StatusResponse)</span><br><span class="line">[1726799814.371141][352215:352217] CHIP:EM: &gt;&gt;&gt; [E:64465r S:41998 M:189153995 (Ack:177312794)] (S) Msg RX from 1:0000000000007283 [428F] --- Type 0000:10 (SecureChannel:StandaloneAck)</span><br><span class="line">[1726799814.371163][352215:352217] CHIP:EM: Found matching exchange: 64465r, Delegate: (nil)</span><br><span class="line">[1726799814.371177][352215:352217] CHIP:EM: Rxd Ack; Removing MessageCounter:177312794 from Retrans Table on exchange 64465r</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h2><p>light project示例演示了Extended Color Light设备的开发。以下就是对代码的理解：</p>
<ul>
<li><p>创建一个Matter节点</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个Matter节点和增加endpoint 0</span></span><br><span class="line">node::<span class="type">config_t</span> node_config;</span><br><span class="line"></span><br><span class="line"><span class="type">node_t</span> *node = node::<span class="built_in">create</span>(&amp;node_config, app_attribute_update_cb, app_identification_cb);</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Endpoint</p>
<p>在本实例中创建 extended_color_light 设备类型的Endpoint。所有的Endpoint定义都在这个文件中：<code>esp/esp-matter/components/esp_matter/esp_matter_endpoint.h</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在Matter节点下增加Endpoint，默认从1开始</span></span><br><span class="line">extended_color_light::<span class="type">config_t</span> light_config;</span><br><span class="line">light_config.on_off.on_off = DEFAULT_POWER;</span><br><span class="line">light_config.on_off.lighting.start_up_on_off = <span class="literal">nullptr</span>;</span><br><span class="line">light_config.level_control.current_level = DEFAULT_BRIGHTNESS;</span><br><span class="line">light_config.level_control.on_level = DEFAULT_BRIGHTNESS;</span><br><span class="line">light_config.level_control.lighting.start_up_current_level = DEFAULT_BRIGHTNESS;</span><br><span class="line">light_config.color_control.color_mode = (<span class="type">uint8_t</span>)ColorControl::ColorMode::kColorTemperature;</span><br><span class="line">light_config.color_control.enhanced_color_mode = (<span class="type">uint8_t</span>)ColorControl::ColorMode::kColorTemperature;</span><br><span class="line">light_config.color_control.color_temperature.startup_color_temperature_mireds = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">endpoint_t</span> *endpoint = extended_color_light::<span class="built_in">create</span>(node, &amp;light_config, ENDPOINT_FLAG_NONE, light_handle);</span><br></pre></td></tr></table></figure>
</li>
<li><p>快速变化的属性标记延迟持久性</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过Endpoint 1获取其Level Control集群，然后通过对应的集群获取Attribute值，最后标记属性的延迟持久性</span></span><br><span class="line"><span class="type">cluster_t</span> *level_control_cluster = cluster::<span class="built_in">get</span>(endpoint, LevelControl::Id);</span><br><span class="line"><span class="type">attribute_t</span> *current_level_attribute = attribute::<span class="built_in">get</span>(level_control_cluster, LevelControl::Attributes::CurrentLevel::Id);</span><br><span class="line">attribute::<span class="built_in">set_deferred_persistence</span>(current_level_attribute);</span><br><span class="line"></span><br><span class="line"><span class="type">cluster_t</span> *color_control_cluster = cluster::<span class="built_in">get</span>(endpoint, ColorControl::Id);</span><br><span class="line"><span class="type">attribute_t</span> *current_x_attribute = attribute::<span class="built_in">get</span>(color_control_cluster, ColorControl::Attributes::CurrentX::Id);</span><br><span class="line">attribute::<span class="built_in">set_deferred_persistence</span>(current_x_attribute);</span><br><span class="line"></span><br><span class="line"><span class="type">attribute_t</span> *current_y_attribute = attribute::<span class="built_in">get</span>(color_control_cluster, ColorControl::Attributes::CurrentY::Id);</span><br><span class="line">attribute::<span class="built_in">set_deferred_persistence</span>(current_y_attribute);</span><br><span class="line"></span><br><span class="line"><span class="type">attribute_t</span> *color_temp_attribute = attribute::<span class="built_in">get</span>(color_control_cluster,ColorControl::Attributes::ColorTemperatureMireds::Id);</span><br><span class="line">attribute::<span class="built_in">set_deferred_persistence</span>(color_temp_attribute);</span><br></pre></td></tr></table></figure>
</li>
<li><p>属性回调</p>
<p>每当用户通过Matter客户端对Matter设备（作为Matter Server）进行控制时，其控制值最终都会更新设备数据模型中的属性值。</p>
<p>当属性更新时，回调函数 <code>app_attribute_update_cb()</code> 用户通知应用程序（Matter设备）属性有更改。若回调函数类型为 <code>PRE_UPDATE</code> ，则更新Matter设备驱动程序。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">esp_err_t</span> <span class="title">app_attribute_update_cb</span><span class="params">(attribute::<span class="type">callback_type_t</span> type,</span></span></span><br><span class="line"><span class="params"><span class="function">                                         <span class="type">uint16_t</span> endpoint_id, </span></span></span><br><span class="line"><span class="params"><span class="function">                                         <span class="type">uint32_t</span> cluster_id,</span></span></span><br><span class="line"><span class="params"><span class="function">                                         <span class="type">uint32_t</span> attribute_id,</span></span></span><br><span class="line"><span class="params"><span class="function">                                         <span class="type">esp_matter_attr_val_t</span> *val,</span></span></span><br><span class="line"><span class="params"><span class="function">                                         <span class="type">void</span> *priv_data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">esp_err_t</span> err = ESP_OK;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type == PRE_UPDATE) &#123;</span><br><span class="line">        <span class="comment">/* Driver update */</span></span><br><span class="line">        <span class="type">app_driver_handle_t</span> driver_handle = (<span class="type">app_driver_handle_t</span>)priv_data;</span><br><span class="line">        err = <span class="built_in">app_driver_attribute_update</span>(driver_handle, endpoint_id, cluster_id, attribute_id, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设备驱动</p>
<p>首先判断改变的是否为目标设备：light_endpoint_id，然后根据集群下的属性更新状态。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Attribute(属性) Update</span></span><br><span class="line"><span class="function"><span class="type">esp_err_t</span> <span class="title">app_driver_attribute_update</span><span class="params">(<span class="type">app_driver_handle_t</span> driver_handle,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="type">uint16_t</span> endpoint_id,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="type">uint32_t</span> cluster_id,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="type">uint32_t</span> attribute_id,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="type">esp_matter_attr_val_t</span> *val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">esp_err_t</span> err = ESP_OK;</span><br><span class="line">    <span class="comment">// Endpoint匹配</span></span><br><span class="line">    <span class="keyword">if</span> (endpoint_id == light_endpoint_id)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">led_indicator_handle_t</span> handle = (<span class="type">led_indicator_handle_t</span>)driver_handle;</span><br><span class="line">        <span class="comment">// Cluster匹配</span></span><br><span class="line">        <span class="keyword">if</span> (cluster_id == OnOff::Id)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Attribute匹配</span></span><br><span class="line">            <span class="keyword">if</span> (attribute_id == OnOff::Attributes::OnOff::Id)</span><br><span class="line">            &#123;</span><br><span class="line">                err = <span class="built_in">app_driver_light_set_power</span>(handle, val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cluster_id == LevelControl::Id)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (attribute_id == LevelControl::Attributes::CurrentLevel::Id)</span><br><span class="line">            &#123;</span><br><span class="line">                err = <span class="built_in">app_driver_light_set_brightness</span>(handle, val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cluster_id == ColorControl::Id)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (attribute_id == ColorControl::Attributes::CurrentHue::Id)</span><br><span class="line">            &#123;</span><br><span class="line">                err = <span class="built_in">app_driver_light_set_hue</span>(handle, val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (attribute_id == ColorControl::Attributes::CurrentSaturation::Id)</span><br><span class="line">            &#123;</span><br><span class="line">                err = <span class="built_in">app_driver_light_set_saturation</span>(handle, val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (attribute_id == ColorControl::Attributes::ColorTemperatureMireds::Id)</span><br><span class="line">            &#123;</span><br><span class="line">                err = <span class="built_in">app_driver_light_set_temperature</span>(handle, val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.espressif.com/projects/esp-matter/en/latest/esp32c3/developing.html">1、Developing with the SDK of ESP-MATTER</a></p>
]]></content>
      <categories>
        <category>Matter</category>
      </categories>
      <tags>
        <tag>esp-matter</tag>
      </tags>
  </entry>
  <entry>
    <title>Matter：Lighting Device Types</title>
    <url>/2024/08/13/2024/Matter-Lighting-Device-Types/</url>
    <content><![CDATA[<h2 id="Light基础"><a href="#Light基础" class="headerlink" title="Light基础"></a>Light基础</h2><p>色调、饱和度和亮度（hue, saturation, and brightness）以人对红、绿、蓝（RGB）三色组合的感觉为基础。</p>
<ul>
<li>色调（hue）是在可见光光谱中能量最强时的波长</li>
<li>饱和度（saturation）表示可见光的相对带宽</li>
<li>亮度（brightness）表示可见光的能量强度</li>
</ul>
<p>Lighting所有设备类型信息：</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
</tr>
</thead>
<tbody><tr>
<td>0x0100</td>
<td>On&#x2F;Off Light</td>
</tr>
<tr>
<td>0x0101</td>
<td>Dimmable Light</td>
</tr>
<tr>
<td>0x010c</td>
<td>Color Temperature Light</td>
</tr>
<tr>
<td>0x010d</td>
<td>Extended Color Light</td>
</tr>
</tbody></table>
<h2 id="On-Off-Light"><a href="#On-Off-Light" class="headerlink" title="On&#x2F;Off Light"></a>On&#x2F;Off Light</h2><p>On&#x2F;Off Light 是一种照明设备，可以通过绑定控制器设备（例如：普通开关或者调光开关）对其进行打开和关闭，而且，也可通过绑定人体存在传感器来切换。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x0100</td>
<td>On&#x2F;Off Light</td>
<td></td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0004</td>
<td>Group</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0062</td>
<td>Scenes Management</td>
<td>Server</td>
<td></td>
<td>P,M</td>
</tr>
<tr>
<td>0x0006</td>
<td>On&#x2F;Off</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Server</td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0406</td>
<td>Occupancy Sensing</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
</tbody></table>
<p>对于 On&#x2F;Off Light 设备的状态只有：on 和 off 两种状态，但标准还是加上了Level Control Cluster，仅仅是方便和其他 Dimmable Light形成组合时，能够接受 On&#x2F;Off 命令。</p>
<p><strong>元素：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Element</th>
<th>Name</th>
<th>Constraint</th>
<th>Access</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Command</td>
<td>TriggerEffect</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0062</td>
<td>Scenes Management</td>
<td>Command</td>
<td>CopyScene</td>
<td></td>
<td></td>
<td>P,M</td>
</tr>
<tr>
<td>0x0006</td>
<td>On&#x2F;Off</td>
<td>Feature</td>
<td>Lighting</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Feature</td>
<td>OnOff</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Feature</td>
<td>Lighting</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Attribute</td>
<td>CurrentLevel</td>
<td>1 to 254</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Attribute</td>
<td>MinLevel</td>
<td>1</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Attribute</td>
<td>MaxLevel</td>
<td>254</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="Dimmable-Light"><a href="#Dimmable-Light" class="headerlink" title="Dimmable Light"></a>Dimmable Light</h2><p>可调光灯是一种能够打开或关闭的照明设备，其光线强度可通过绑定控制器设备（例如调光开关或颜色调光开关）进行调节。此外，可调光灯设备还能够通过绑定占用传感器或其他设备进行切换。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x0101</td>
<td>Dimmable Light</td>
<td>On&#x2F;Off Light</td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0004</td>
<td>Groups</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0062</td>
<td>Scenes Management</td>
<td>Server</td>
<td></td>
<td>P,M</td>
</tr>
<tr>
<td>0x0006</td>
<td>On&#x2F;Off</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0406</td>
<td>Occupancy Sensing</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
</tbody></table>
<p><strong>元素：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Element</th>
<th>Name</th>
<th>Constraint</th>
<th>Access</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identity</td>
<td>Command</td>
<td>TriggerEffect</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0062</td>
<td>Scenes Management</td>
<td>Command</td>
<td>CopyScene</td>
<td></td>
<td></td>
<td>P,M</td>
</tr>
<tr>
<td>0x0006</td>
<td>On&#x2F;Off</td>
<td>Feature</td>
<td>Lighting</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Feature</td>
<td>Lighting</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Feature</td>
<td>OnOff</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Attribute</td>
<td>CurrentLevel</td>
<td>1 to 254</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Attribute</td>
<td>MinLevel</td>
<td>1</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Attribute</td>
<td>MaxLevel</td>
<td>254</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="Color-Temperature-Light"><a href="#Color-Temperature-Light" class="headerlink" title="Color Temperature Light"></a>Color Temperature Light</h2><p>色温灯是一种照明设备，可以通过绑定的控制器设备（例如调光开关）打开或关闭、调节光线强度和调节色温。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x010c</td>
<td>Color Temperature Light</td>
<td>Dimmable Light</td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0004</td>
<td>Groups</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0062</td>
<td>Scenes Management</td>
<td>Server</td>
<td></td>
<td>P,M</td>
</tr>
<tr>
<td>0x0006</td>
<td>On&#x2F;Off</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0300</td>
<td>Color Control</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0406</td>
<td>Occupancy Sensing</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
</tbody></table>
<p><strong>元素：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Element</th>
<th>Name</th>
<th>Constraint</th>
<th>Access</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identity</td>
<td>Command</td>
<td>TriggerEffect</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0062</td>
<td>Scenes Management</td>
<td>Command</td>
<td>CopyScene</td>
<td></td>
<td></td>
<td>P,M</td>
</tr>
<tr>
<td>0x0006</td>
<td>On&#x2F;Off</td>
<td>Feature</td>
<td>Lighting</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Feature</td>
<td>Lighting</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Feature</td>
<td>OnOff</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Attribute</td>
<td>CurrentLevel</td>
<td>1 to 254</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Attribute</td>
<td>MinLevel</td>
<td>1</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Attribute</td>
<td>MaxLevel</td>
<td>254</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x0300</td>
<td>Color Control</td>
<td>Feature</td>
<td>ColorTemperature</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0300</td>
<td>Color Control</td>
<td>Attribute</td>
<td>RemainingTime</td>
<td></td>
<td></td>
<td>M</td>
</tr>
</tbody></table>
<h2 id="Extended-Color-Light"><a href="#Extended-Color-Light" class="headerlink" title="Extended Color Light"></a>Extended Color Light</h2><p>扩展色光灯是一种照明设备，可通过绑定控制器设备（如调光开关或控制桥）打开或关闭、调整光强度和调整颜色。该设备支持通过色调&#x2F;饱和度、增强色调、颜色循环、XY 坐标和色温调整颜色。此外，扩展色光灯还可通过绑定占用传感器进行切换。</p>
<p><strong>分类：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Device Name</th>
<th>Superset</th>
<th>Class</th>
<th>Scope</th>
</tr>
</thead>
<tbody><tr>
<td>0x010d</td>
<td>Extended Color Light</td>
<td>Color Temperature Light</td>
<td>Simple</td>
<td>Endpoint</td>
</tr>
</tbody></table>
<p><strong>集群：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Client&#x2F;Server</th>
<th>Quality</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identify</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0004</td>
<td>Groups</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0062</td>
<td>Scenes Management</td>
<td>Server</td>
<td></td>
<td>P,M</td>
</tr>
<tr>
<td>0x0006</td>
<td>On&#x2F;Off</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0300</td>
<td>Color Control</td>
<td>Server</td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0406</td>
<td>Occupancy Sensing</td>
<td>Client</td>
<td></td>
<td>O</td>
</tr>
</tbody></table>
<p>扩展色光等集群数据和色温灯的集群完成相同。</p>
<p><strong>元素：</strong></p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Cluster</th>
<th>Element</th>
<th>Name</th>
<th>Constraint</th>
<th>Access</th>
<th>Conformance</th>
</tr>
</thead>
<tbody><tr>
<td>0x0003</td>
<td>Identity</td>
<td>Command</td>
<td>TriggerEffect</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0062</td>
<td>Scenes Management</td>
<td>Command</td>
<td>CopyScene</td>
<td></td>
<td></td>
<td>P,M</td>
</tr>
<tr>
<td>0x0006</td>
<td>On&#x2F;Off</td>
<td>Feature</td>
<td>Lighting</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Feature</td>
<td>Lighting</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Feature</td>
<td>OnOff</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Attribute</td>
<td>CurrentLevel</td>
<td>1 to 254</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Attribute</td>
<td>MinLevel</td>
<td>1</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x0008</td>
<td>Level Control</td>
<td>Attribute</td>
<td>MaxLevel</td>
<td>254</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x0300</td>
<td>Color Control</td>
<td>Feature</td>
<td>ColorTemperature</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0300</td>
<td>Color Control</td>
<td>Attribute</td>
<td>RemainingTime</td>
<td></td>
<td></td>
<td>M</td>
</tr>
<tr>
<td>0x0300</td>
<td>Color Control</td>
<td>Feature</td>
<td>HueSaturation</td>
<td></td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0300</td>
<td>Color Control</td>
<td>Feature</td>
<td>EnhancedHue</td>
<td></td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0300</td>
<td>Color Control</td>
<td>Feature</td>
<td>ColorLoop</td>
<td></td>
<td></td>
<td>O</td>
</tr>
<tr>
<td>0x0300</td>
<td>Color Control</td>
<td>Feature</td>
<td>XY</td>
<td></td>
<td></td>
<td>M</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Matter</category>
      </categories>
      <tags>
        <tag>Light of Matter Device</tag>
        <tag>matter-1-3-device-library-specification</tag>
      </tags>
  </entry>
  <entry>
    <title>Matter Standard</title>
    <url>/2024/08/13/2024/Matter-Standard/</url>
    <content><![CDATA[<h2 id="Matter介绍"><a href="#Matter介绍" class="headerlink" title="Matter介绍"></a>Matter介绍</h2><p>市场上对于IoT领域生态有很多，例如：苹果生态（Homekit）、谷歌生态（Weave）、亚马逊生态（Echo）、三星生态、小米生态。设备厂商针对某一个生态生产的设备仅支持这个生态（苹果生态），不能支持其他生态（谷歌生态、三星生态），形成了生态壁垒。</p>
<p><strong>用户：</strong></p>
<p>如果用户使用苹果手机，那么用户只能购买支持苹果生态的IoT设备。一旦用户不在使用苹果手机，而使用谷歌手机，那么支持苹果生态的IoT设备就成了一堆废品。现在用户想使用IoT设备，那么必须再购买支持谷歌生态的IoT设备，对于用户来说，这又是一笔不小的开销。</p>
<p><strong>厂商：</strong></p>
<p>如果厂商生产了支持苹果生态的IoT设备，那么它的目标用户是持有苹果手机的用户。对于同一款产品（例如：色温灯），厂商为了获取更多的用户，就必须开发支持各种生态的产品（例如：苹果生态色温灯、谷歌生态色温灯…）。对于厂商来说，产品还是一样的，只是软件层面的不同，不得不生产支持不同生态的同一款产品，生产成本又是一个的问题。</p>
<p><strong>Matter：</strong></p>
<p>如果厂商生产的IoT产品支持Matter标准，那么对于用户来说，不管你使用的是苹果手机，还是谷歌手机，你都可以将IoT产品添加到你当前的生态中。对于用户，购买的IoT产品适配各种生态，完全不用担心换手机会导致IoT产品无法使用的问题。对于厂商，不用再投入很大的成本去生产支持各种生态的IoT设备，仅需要生产支持Matter标准的IoT产品。</p>
<p>甚至，IoT产品添加到苹果生态后，你还可以将该产品分享给其他生态（谷歌生态、亚马逊生态、三星生态…）使用，完全打破了生态壁垒。</p>
<p>Matter是由CSA发布的一个应用层标准，它的传输是建立在支持IPv6的TCP和UDP协议上的，Matter不对传输层进行约定，Matter也不对网络进行约定，但是Matter约定了只能使用 <em>Thread&#x2F;Wi-Fi&#x2F;Ethernet</em> 三种连接协议，也就是说Matter可以让不同网络中的设备进行互联互通通信，这个主要是指Thread Board Router 可以实现 Wi-Fi 和 Thread 通信互转。不仅如此，Matter还允许接入其他网络设备，比如ZigBee设备，这主要通过一个 <em>Matter bridge</em> 设备来实现。</p>
<p>在Matter拓扑结构中，还有一个节点非常重要：<em>Matter controller</em>，Matter controller用来完成配网和远程控制设备，比如苹果的 HomePod mini &amp; Home app 组合就是一个典型的Matter controller节点。</p>
<p>Thread协议由Thread Group制定，所以Matter over Thread产品必须通过Thread Group的认证。Wi-Fi则由Wi-Fi联盟进行规范，所以Matter over Wi-Fi产品必须通过Wi-Fi Alliance认证。</p>
<ul>
<li><p><strong>Matter over WiFi</strong>：指使用WiFi网络来传输Matter协议的信息。</p>
</li>
<li><p><strong>Matter over Thread</strong>：指使用Thread网络来传输Matter协议的信息。</p>
</li>
</ul>
<p><strong>文档：</strong></p>
<p>Matter官方文档（主要有3份）：</p>
<ul>
<li><strong>Matter 1.3 Device Library Specification</strong>：对设备层面的一些约束和规定</li>
<li><strong>Matter 1.3 Core Specification</strong>：核心规范</li>
<li><strong>Matter 1.3 Application Cluster Specification</strong>：对Matter组件Cluster进行了详细规定</li>
</ul>
<p>2024年，Matter最新版本是V1.3，随着Matter的版本更新，文档也会随着更新。</p>
<h2 id="Matter-协议栈"><a href="#Matter-协议栈" class="headerlink" title="Matter 协议栈"></a>Matter 协议栈</h2><p>Matter 规范定义了基本要求，以便通过互联网协议为智能家居设备提供可互操作的应用层解决方案。</p>
<p><strong>Fabric：</strong></p>
<p>一个Matter网络就是一个Fabric，也可以说一个生态就是一个Fabric。</p>
<h3 id="Data-Model（数据模型）"><a href="#Data-Model（数据模型）" class="headerlink" title="Data Model（数据模型）"></a>Data Model（数据模型）</h3><h4 id="Node（节点）"><a href="#Node（节点）" class="headerlink" title="Node（节点）"></a>Node（节点）</h4><p>节点(Node)是一个逻辑上独立的设备，有自己唯一的网络地址。每个Matter设备由一个或多个Node组成。通常是用户可以识别为整个设备的物理设备，例如一个有两盏灯的灯具（一盏可调光灯和一盏普通灯）。</p>
<h4 id="Endpoint（端点）"><a href="#Endpoint（端点）" class="headerlink" title="Endpoint（端点）"></a>Endpoint（端点）</h4><p>一个Node包含多个Endpoint，每个endpoint是一个逻辑上独立的功能模块。端点可以看作是提供逻辑分组在一起的虚拟设备。例如色温灯，具备两个Endpoint，其中Endpoint 1是可调光灯，EndPoint 2是开&#x2F;关灯。</p>
<p><em>注意：Endpoint 0 预留给 Matter 的 utility cluster，而且每个 Matter 设备都必须强制包含 Endpoint 0</em></p>
<h4 id="Cluster（集群）"><a href="#Cluster（集群）" class="headerlink" title="Cluster（集群）"></a>Cluster（集群）</h4><p>一个Endpoint由一个或多个cluster组成，cluster可以认为是一个基本功能集，它包含 <em>attributess</em>， <em>commands</em>和 <em>events</em>三个组件。</p>
<p>对于色温灯，其中Endpoint 1是可调光灯，它有两个cluster，分别是：On&#x2F;Off cluster 和 Level Control cluster 。</p>
<p>Matter定义了两种类型的cluster：</p>
<ul>
<li>server：提供Attributes、Commands、Events，通常指 Matter 设备。</li>
<li>client：对server发起交互（interaction）操作，通常指 Matter Controller。</li>
</ul>
<h4 id="attributes（属性）"><a href="#attributes（属性）" class="headerlink" title="attributes（属性）"></a>attributes（属性）</h4><p>属性表示可以读取或写入的内容。</p>
<p>对于色温灯的Endpoint 1，其中On&#x2F;Off cluster 的 attributess 是 OnOff 。</p>
<p>对于色温灯的Endpoint 1，其中Level Control cluster 的 attributess 是 CurrentLevel 。</p>
<h4 id="Command（命令）"><a href="#Command（命令）" class="headerlink" title="Command（命令）"></a>Command（命令）</h4><p>命令提供在集群上调用特定行为的能力。</p>
<p>对于色温灯的Endpoint 1，其中On&#x2F;Off cluster 的 Commands 有：On、Off、Toggle</p>
<p>对于色温灯的Endpoint 1，其中Level Control cluster 的 Commands 有：MoveToLevel 。</p>
<h4 id="Event（事件）"><a href="#Event（事件）" class="headerlink" title="Event（事件）"></a>Event（事件）</h4><p>Event其实是一种特殊的attributes，它用来更新设备的状态。</p>
<h3 id="Interaction-Model（交互模型）"><a href="#Interaction-Model（交互模型）" class="headerlink" title="Interaction Model（交互模型）"></a>Interaction Model（交互模型）</h3><p>通俗地讲，Interaction model就是用来规定交互命令集的，我们把发起交互的节点叫initiator (一般都是client设备)，而接收者称为target (一般为server设备)。</p>
<p>Matter定义了如下interaction类型：</p>
<ul>
<li><strong>Read</strong></li>
</ul>
<p>​	用来读取attributes或events的值</p>
<ul>
<li><strong>Write</strong></li>
</ul>
<p>​	用来修改attribute的值</p>
<ul>
<li><strong>Invoke</strong></li>
</ul>
<p>​	用来发送commands</p>
<ul>
<li><strong>Subscribe</strong></li>
</ul>
<p>​	用来订阅target的数据报告，从而不用定时去查询相关数据，我们可以订阅attribute，也可以订阅event。</p>
<p>Interaction本身由transaction组成，而transaction又由action组成，每个action包含1条或者多条信息。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.espressif.com/what-does-matter-mean-to-you-fa3bb53a7793">What does Matter mean to you?</a></p>
<p><a href="https://blog.espressif.com/matter-clusters-attributess-commands-82b8ec1640a0">Matter: Clusters, attributess, Commands</a></p>
<p><a href="https://mp.weixin.qq.com/s/xU82G0LL-92zd86iXChwKQ">Matter开发，看这一篇就够了</a></p>
]]></content>
      <categories>
        <category>Matter</category>
      </categories>
      <tags>
        <tag>Matter Standard</tag>
        <tag>CSA</tag>
        <tag>IoT</tag>
      </tags>
  </entry>
  <entry>
    <title>wpa-supplicant application</title>
    <url>/2024/08/12/2024/wpa-supplicant-application/</url>
    <content><![CDATA[<h2 id="无线热点"><a href="#无线热点" class="headerlink" title="无线热点"></a>无线热点</h2><p>路由器能够建立无线热点（即AP模式，Access Point Mode），供手机或PC等无线设备上网。无线热点支持IEEE 802.11 b&#x2F;g&#x2F;n 标准可以同时有两个频率选择：2.4GHz 和 5GHz。</p>
<p>2.4GHz 工作频段范围：2.4GHz ~ 2.4835GHz，共划分14个信道（但第14信道一般不用），每个信道频宽20MHz，其特点表现为频率低、波长（0.125m）长，传输距离远（覆盖范围大），但是传输速度慢。</p>
<p>5GHz 工作频段范围：5.170GHz ~ 5.850GHz，大约有个45个信道，其中38、46、151、159信道频宽为40MHz，其余信道频宽均为20MHz，其特点表现为频率高、波长（0.052m）短，传输距离短（覆盖范围小），但传输速度快。</p>
<p>无线热点的基本信息：</p>
<ul>
<li><p>网络名称（SSID）<br>  SSID不能唯一的表示一个无线热点，即多个无线热点能设置相同的SSID。<br>  SSID设置广播模式后，其他设置才能搜索到该SSID，否则该SSID被隐藏，只能通过手动输入SSID进行连接。</p>
</li>
<li><p>安全模式<br>  路由器中安全模式能设置无线热点的加密类型：OPEN、WPA2(AES)-PSK、WPA-PSK&#x2F;WPA2-PSK</p>
</li>
<li><p>加密类型</p>
<p>  <strong>OPEN</strong>：开放式认证，任何人都可以连接并使用无线网络。</p>
<p>  <strong>WEB</strong>：共享秘钥认证依赖于 <strong>WEB</strong> （Wired Equivalent Privacy，有线等效加密），使用RC4算法，秘钥分为64 bit 和 128 bit，且通信双方使用相同的秘钥。</p>
<p>  <strong>WPA</strong>：采用TKIP（Temporal Key Integrity Protocol，临时秘钥完整性协议）来为每一个MAC帧生成不同的Key，以替代WEB。WPA有两种模式：企业模式（WPA-EAP）和 个人模式（WPA-PSK）。</p>
<p>  <strong>WPA2</strong>：RSN被WFA组织成为WPA2，采用了CCMP加密方式。</p>
<p>  <strong>WPA3</strong>：新一代Wi-Fi加密协议，用于替代WPA2。</p>
</li>
<li><p>密码（PSK）<br>  密码的有无取决于安全模式。若安全模式为 OPEN，则密码为空；若安全模式为其他类型，则密码不为空。</p>
</li>
</ul>
<h2 id="信道"><a href="#信道" class="headerlink" title="信道"></a>信道</h2><p>信道也称作通道(Channel)、频段，是以无线信号（电磁波）作为传输载体的数据信号传送通道。</p>
<p>不管是802.11b&#x2F;g还是802.11a&#x2F;b&#x2F;g&#x2F;n&#x2F;ac一般都支持13个信道。它们的中心频率虽然不同，但是因为都占据一定的频率范围，所以会有一些相互重叠的情况。</p>
<p>2.4GHz频带的信道划分14个信道（2412 MHz ~ 2484 MHz），但第14信道一般不用，每个信道的有效宽度是 20MHz，另外还有2MHz的强制隔离频带。2.4G WiFi信道分布图可以看到信道之间会彼此重叠，从而容易造成WiFi干扰，但1、6、11信道除外，这三个信道没有重叠部分，故路由器一般将这三个信道作为默认的信道来使用。</p>
<table>
<thead>
<tr>
<th>信道</th>
<th>频宽(MHz)</th>
<th>中心频率(MHz)</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>20</td>
<td>2412</td>
</tr>
<tr>
<td>2</td>
<td>20</td>
<td>2417</td>
</tr>
<tr>
<td>3</td>
<td>20</td>
<td>2422</td>
</tr>
<tr>
<td>4</td>
<td>20</td>
<td>2427</td>
</tr>
<tr>
<td>5</td>
<td>20</td>
<td>2432</td>
</tr>
<tr>
<td>6</td>
<td>20</td>
<td>2437</td>
</tr>
<tr>
<td>7</td>
<td>20</td>
<td>2442</td>
</tr>
<tr>
<td>8</td>
<td>20</td>
<td>2447</td>
</tr>
<tr>
<td>9</td>
<td>20</td>
<td>2452</td>
</tr>
<tr>
<td>10</td>
<td>20</td>
<td>2457</td>
</tr>
<tr>
<td>11</td>
<td>20</td>
<td>2462</td>
</tr>
<tr>
<td>12</td>
<td>20</td>
<td>2467</td>
</tr>
<tr>
<td>13</td>
<td>20</td>
<td>2472</td>
</tr>
<tr>
<td>14</td>
<td>20</td>
<td>2484</td>
</tr>
</tbody></table>
<p><img src="/2024/08/12/2024/wpa-supplicant-application/2.4G.png" alt="2.4G"></p>
<h2 id="WPA-SUPPLICANT"><a href="#WPA-SUPPLICANT" class="headerlink" title="WPA_SUPPLICANT"></a>WPA_SUPPLICANT</h2><blockquote>
<p>wap_supplicant是什么？</p>
</blockquote>
<p>wpa_supplicant 是适用于 Linux、BSD、Mac OS X 和 Windows 的 WPA Supplicant，支持 WPA、WPA2（IEEE 802.11i &#x2F; RSN）和 WPA3。它适用于台式机&#x2F;笔记本电脑和嵌入式系统。Supplicant 是客户端站中使用的 IEEE 802.1X&#x2F;WPA 组件。它与 WPA Authenticator 实现密钥协商，并控制 wlan 驱动程序的漫游和 IEEE 802.11 身份验证&#x2F;关联。</p>
<p>获取wpa_supplicant仓库代码：<code>git clone git://w1.fi/hostap.git</code></p>
<p>wpa_supplicant 被设计为在后台运行的“守护进程”程序，并充当控制无线连接的后端组件。wpa_supplicant 支持单独的前端程序，wpa_supplicant 包含基于命令行的前端 (wpa_cli) 和 GUI (wpa_gui)。</p>
<p>wpa_supplicant应用主要包括程序：</p>
<ul>
<li>wpa_supplicant守护程序</li>
<li>wpa_cli客户端程序</li>
<li>wpa_passphrase密码工具程序</li>
</ul>
<p>wpa_supplicant的运行方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wpa_supplicant -B -i wlan0 -c /etc/wpa_supplicant/wpa_supplicant.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># -B: 在后台运行</span></span><br><span class="line"><span class="comment"># -i: 接口</span></span><br><span class="line"><span class="comment"># -c: 配置文件</span></span><br><span class="line"><span class="comment"># -D: 驱动(可多选)，可选项：</span></span><br><span class="line"><span class="comment">#          nl80211 = Linux nl80211/cfg80211</span></span><br><span class="line"><span class="comment">#          wext = Linux wireless extensions (generic)</span></span><br><span class="line"><span class="comment">#          wired = Wired Ethernet driver</span></span><br><span class="line"><span class="comment">#          macsec_linux = MACsec Ethernet driver for Linux</span></span><br><span class="line"><span class="comment">#          none = no driver (RADIUS server/WPS ER)</span></span><br><span class="line"><span class="comment"># -f: 日志文件输出位置</span></span><br><span class="line"><span class="comment"># -P: pid文件输出位置</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>注意事项：</em></p>
<p><em>dbus-daemon需要知道如何转发消息，&#x2F;etc&#x2F;dbus-1&#x2F;system.d存放各个app的dbus服务接口配置，dbus-daemon启动时会遍历加载目录中的所有配置，加载分发情况。若没有配置服务，某个app注册自身服务名时，会报错：Connection “:1.6” is not allowed to own the service “org.bluez” due to security policies in the configuration file。</em></p>
<p><em>默认配置文件路径：<code>/etc/dbus-1/system.d/wpa_supplicant.conf</code>，该文件的详细信息如下所示：</em></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">busconfig</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">busconfig</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">policy</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">allow</span> <span class="attr">own</span>=<span class="string">&quot;fi.w1.wpa_supplicant1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">allow</span> <span class="attr">send_destination</span>=<span class="string">&quot;fi.w1.wpa_supplicant1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">allow</span> <span class="attr">send_interface</span>=<span class="string">&quot;fi.w1.wpa_supplicant1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">allow</span> <span class="attr">receive_sender</span>=<span class="string">&quot;fi.w1.wpa_supplicant1&quot;</span> <span class="attr">receive_type</span>=<span class="string">&quot;signal&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">policy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">policy</span> <span class="attr">context</span>=<span class="string">&quot;default&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">deny</span> <span class="attr">own</span>=<span class="string">&quot;fi.w1.wpa_supplicant1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">deny</span> <span class="attr">send_destination</span>=<span class="string">&quot;fi.w1.wpa_supplicant1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">deny</span> <span class="attr">receive_sender</span>=<span class="string">&quot;fi.w1.wpa_supplicant1&quot;</span> <span class="attr">receive_type</span>=<span class="string">&quot;signal&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">policy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">busconfig</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>wpa_supplicant结构图：</p>
<p><img src="/2024/08/12/2024/wpa-supplicant-application/image-20241016170128847.png" alt="image-20241016170128847"></p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>wpa_supplicant.conf 作为 wpa_supplicant 应用程序的配置文件，可以持久化保存一些信息。而配置文件的默认保存路径是：<code>/etc/wpa_supplicant/wpa_supplicant.conf</code></p>
<p>wpa_supplicant.conf 可以设置哪些配置？</p>
<ul>
<li>指定wpa_supplicant控制接口</li>
<li>是否允许配置文件更新</li>
<li>默认网络配置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 必须为wpa_supplicant指定一个控制接口，并且必须赋予它更新配置的权限</span><br><span class="line">ctrl_interface=/var/run/wpa_supplicant</span><br><span class="line">update_config=1</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">	ssid=&quot;ZTE_AP_2.4G&quot;</span><br><span class="line">	scan_ssid=1</span><br><span class="line">	psk=&quot;zte2015&quot;</span><br><span class="line">	priority=1</span><br><span class="line">	disabled=1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">	ssid=&quot;ZTE_5GCPE_F876&quot;</span><br><span class="line">	scan_ssid=1</span><br><span class="line">	key_mgmt=NONE</span><br><span class="line">	priority=2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>从通信层次上划分：</p>
<ul>
<li><p><strong>上行接口</strong>：wpa_supplicant提供向上的控制接口 control interface，用于与其他模块（如UI）进行通信，其他模块可以通过control interface 来获取信息或下发命令。</p>
</li>
<li><p><strong>下行接口</strong>：wpa_supplicant通过socket通信机制实现下行接口，与内核（驱动程序）进行通信，获取信息或下发命令。</p>
</li>
</ul>
<p>其中wpa_supplicant的上行接口的实现方式：</p>
<ul>
<li>基于传统dbus机制实现与其他进程间的IPC通信</li>
<li>通过Unix domain socket机制实现进程间的IPC通信</li>
</ul>
<p>wpa_supplicant提供的<a href="https://w1.fi/wpa_supplicant/devel/dbus.html">D-Bus API接口</a>，通过执行命令：<code>wpa_supplicant -h</code>，其结果中有 <code>-u</code> 选项就是使能D-Bus控制接口。</p>
<p>另外我通过 <code>dbus-send</code> 工具执行查询dbus服务（命令如下所示），其结果中发现有这么一个服务：<code>fi.w1.wpa_supplicant1</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dbus-send --system --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.ListNames</span><br></pre></td></tr></table></figure>

<p>借助D-Bus图形工具 <strong>D-Feet</strong> 可以查看到更具体的信息：</p>
<p><img src="/2024/08/12/2024/wpa-supplicant-application/image-20241016211846477.png" alt="image-20241016211846477"></p>
<h3 id="dbus-for-wpa-supplicant接口"><a href="#dbus-for-wpa-supplicant接口" class="headerlink" title="dbus for wpa_supplicant接口"></a>dbus for wpa_supplicant接口</h3><p>wpa_supplicant dbus api 文档涉及到各个不同接口：</p>
<ul>
<li><strong>fi.w1.wpa_supplicant1</strong></li>
<li><strong>fi.w1.wpa_supplicant1.Interface</strong></li>
<li>fi.w1.wpa_supplicant1.Interface.WPS</li>
<li>fi.w1.wpa_supplicant1.Interface.P2PDevice</li>
<li><strong>fi.w1.wpa_supplicant1.BSS</strong></li>
<li><strong>fi.w1.wpa_supplicant1.Network</strong></li>
<li>fi.w1.wpa_supplicant1.Peer</li>
<li>fi.w1.wpa_supplicant1.Group</li>
<li>fi.w1.wpa_supplicant1.PersistentGroup</li>
</ul>
<h3 id="fi-w1-wpa-supplicant1"><a href="#fi-w1-wpa-supplicant1" class="headerlink" title="fi.w1.wpa_supplicant1"></a>fi.w1.wpa_supplicant1</h3><p>由在总线中注册名为 fi.w1.wpa_supplicant1 的主 wpa_supplicant D-Bus 对象实现的接口。</p>
<p><strong>接口介绍：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:Service: fi.w1.wpa_supplicant1</span><br><span class="line">:Interface: fi.w1.wpa_supplicant1</span><br><span class="line">:Object path: /fi/w1/wpa_supplicant1</span><br></pre></td></tr></table></figure>

<p><strong>方法介绍：</strong></p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>CreateInterface ( a{sv} : args ) –&gt; o : interface</td>
<td>在 wpa_supplicant 中注册一个无线接口。</td>
</tr>
<tr>
<td>RemoveInterface ( o : interface ) –&gt; nothing</td>
<td>从 wpa_supplicant 取消注册无线接口。</td>
</tr>
<tr>
<td>GetInterface ( s : ifname ) –&gt; o : interface</td>
<td>返回与 wpa_supplicant 已控制的接口相关的对象的 D-Bus 路径。</td>
</tr>
</tbody></table>
<p><strong>属性介绍：</strong></p>
<table>
<thead>
<tr>
<th>属性名称</th>
<th>权限</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>string DebugLevel</td>
<td>[readwrite]</td>
<td>全局 wpa_supplicant 调试级别。</td>
</tr>
<tr>
<td>bool DebugTimestamp</td>
<td>[readwrite]</td>
<td>确定时间戳是否显示在调试日志中（全局参数）。</td>
</tr>
<tr>
<td>bool DebugShowKeys</td>
<td>[readwrite]</td>
<td>确定键名是否显示在调试日志中。</td>
</tr>
<tr>
<td>array{object} Interfaces</td>
<td>[read]</td>
<td>一个包含指向 D-Bus 对象路径的数组，每个对象代表受控的接口。</td>
</tr>
<tr>
<td>array{string} EapMethods</td>
<td>[read]</td>
<td>包含受支持的 EAP 方法名称的数组。</td>
</tr>
<tr>
<td>array{string} Capabilities</td>
<td>[read]</td>
<td>具有支持功能的阵列</td>
</tr>
<tr>
<td>array{byte} WFDIEs</td>
<td>[readwrite]</td>
<td>Wi-Fi 显示子元素。</td>
</tr>
</tbody></table>
<p><strong>信号介绍：</strong></p>
<table>
<thead>
<tr>
<th>信号名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>InterfaceAdded ( o : interface, a{sv} : properties )</td>
<td>新增接口</td>
</tr>
<tr>
<td>InterfaceRemoved ( o : interface )</td>
<td>移除接口</td>
</tr>
<tr>
<td>PropertiesChanged ( a{sv} : properties )</td>
<td>属性变化</td>
</tr>
</tbody></table>
<h3 id="fi-w1-wpa-supplicant1-Interface"><a href="#fi-w1-wpa-supplicant1-Interface" class="headerlink" title="fi.w1.wpa_supplicant1.Interface"></a>fi.w1.wpa_supplicant1.Interface</h3><p>由添加到 wpa_supplicant 的网络接口相关对象实现的接口，即由 fi.w1.wpa_supplicant1.CreateInterface 返回的接口。</p>
<p><strong>接口介绍：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:Service: fi.w1.wpa_supplicant1</span><br><span class="line">:Interface: fi.w1.wpa_supplicant1.Interface</span><br><span class="line">:Object path: /fi/w1/wpa_supplicant1/Interfaces/index  (index is 0、1、2 ...)</span><br></pre></td></tr></table></figure>



<p><strong>方法介绍：</strong></p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Scan ( a{sv} : args ) –&gt; nothing</td>
<td>触发扫描</td>
</tr>
<tr>
<td>Disconnect ( ) –&gt; nothing</td>
<td>断开网络</td>
</tr>
<tr>
<td>AddNetwork ( a{sv} : args ) –&gt; o : network</td>
<td>新增网络到接口</td>
</tr>
<tr>
<td>RemoveNetwork ( o : network ) –&gt; nothing</td>
<td>移除网络接口</td>
</tr>
<tr>
<td>RemoveAllNetworks ( ) –&gt; nothing</td>
<td>移除所有网络接口</td>
</tr>
<tr>
<td>SelectNetwork ( o : network ) –&gt; nothing</td>
<td>尝试与已配置的网络关联</td>
</tr>
<tr>
<td>Reassociate ( ) –&gt; nothing</td>
<td>尝试重新关联</td>
</tr>
<tr>
<td>Reattach ( ) –&gt; nothing</td>
<td>尝试重新关联至当前 BSS</td>
</tr>
<tr>
<td>Reconnect ( ) –&gt; nothing</td>
<td>如果处于断开连接状态，则尝试重新连接并连接。</td>
</tr>
<tr>
<td>AddBlob ( s : name, ay : data ) –&gt; nothing</td>
<td>向接口添加一个 blob</td>
</tr>
<tr>
<td>RemoveBlob ( s : name ) –&gt; nothing</td>
<td>从接口移除一个 blob</td>
</tr>
<tr>
<td>GetBlob ( s : name ) –&gt; ay : data</td>
<td>返回先前添加的 Blob 的 Blob 数据</td>
</tr>
<tr>
<td>AutoScan ( s : arg ) –&gt; nothing</td>
<td>设置接口的自动扫描参数</td>
</tr>
<tr>
<td>TDLSDiscover ( s : peer_address ) –&gt; nothing</td>
<td>启动对等方的 TDLS 发现</td>
</tr>
<tr>
<td>TDLSSetup ( s : peer_address ) –&gt; nothing</td>
<td>为对等方设置 TDLS 会话</td>
</tr>
<tr>
<td>TDLSStatus ( s : peer_address ) –&gt; s</td>
<td>返回相对于对等方的 TDLS 状态</td>
</tr>
<tr>
<td>TDLSTeardown ( s : peer_address ) –&gt; nothing</td>
<td>拆除与对等方的 TDLS 会话</td>
</tr>
<tr>
<td>EAPLogoff ( ) –&gt; nothing</td>
<td>IEEE 802.1X EAPOL 状态机注销</td>
</tr>
<tr>
<td>EAPLogon ( ) –&gt; nothing</td>
<td>IEEE 802.1X EAPOL 状态机登录</td>
</tr>
<tr>
<td>NetworkReply ( o : network, s : field, s : value ) –&gt; nothing</td>
<td>提供NetworkRequest()请求的参数</td>
</tr>
<tr>
<td>SetPKCS11EngineAndModulePath ( s : pkcs11_engine_path, s : pkcs11_module_path ) –&gt; nothing</td>
<td>设置 PKCS #11 引擎和模块路径</td>
</tr>
<tr>
<td>SignalPoll ( ) –&gt; a{sv} : properties</td>
<td>获取当前连接的信号属性</td>
</tr>
<tr>
<td>FlushBSS ( u : age ) –&gt; nothing</td>
<td>从缓存中刷新 BSS 条目</td>
</tr>
<tr>
<td>SubscribeProbeReq ( ) –&gt; nothing</td>
<td>订阅以接收探测请求事件</td>
</tr>
<tr>
<td>UnsubscribeProbeReq ( ) –&gt; nothing</td>
<td>取消接收探测请求事件</td>
</tr>
</tbody></table>
<p><strong>属性介绍：</strong></p>
<table>
<thead>
<tr>
<th>属性名称</th>
<th>权限</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>array{string, variant} Capabilities</td>
<td>read</td>
<td>接口功能</td>
</tr>
<tr>
<td>string State</td>
<td>read</td>
<td>接口状态</td>
</tr>
<tr>
<td>bool Scanning</td>
<td>read</td>
<td>确定接口是否已在扫描</td>
</tr>
<tr>
<td>uint32 ApScan</td>
<td>readwrite</td>
<td>与 wpa_supplicant 配置文件中的 ap_scan 条目相同。可能的值为 0、1 或 2</td>
</tr>
<tr>
<td>uint32 BSSExpireAge</td>
<td>readwrite</td>
<td>与 wpa_supplicant 配置文件中的 bss_expiration_age 条目相同</td>
</tr>
<tr>
<td>uint32 BSSExpireCount</td>
<td>readwrite</td>
<td>与 wpa_supplicant 配置文件中的 bss_expiration_scan_count 条目相同</td>
</tr>
<tr>
<td>string Country</td>
<td>readwrite</td>
<td>与 wpa_supplicant 配置文件中的国家&#x2F;地区条目相同</td>
</tr>
<tr>
<td>string Ifname</td>
<td>read</td>
<td>接口控制的网络接口名称，例如 wlan0</td>
</tr>
<tr>
<td>string BridgeIfname</td>
<td>read</td>
<td>该接口控制的桥接网络接口名称，例如 br0</td>
</tr>
<tr>
<td>string Driver</td>
<td>read</td>
<td>接口使用的驱动程序的名称，例如 nl80211</td>
</tr>
<tr>
<td>object CurrentBSS</td>
<td>read</td>
<td>表示与 wpa_supplicant 关联的 BSS 的 D-Bus 对象的路径，如果根本没有关联，则为“&#x2F;”</td>
</tr>
<tr>
<td>object CurrentNetwork</td>
<td>read</td>
<td>表示 wpa_supplicant 当前使用的配置网络的 D-Bus 对象的路径，如果没有使用则为“&#x2F;”</td>
</tr>
<tr>
<td>string CurrentAuthMode</td>
<td>read</td>
<td>当前身份验证类型</td>
</tr>
<tr>
<td>array{string} Blobs</td>
<td>read</td>
<td>添加到界面的 blob 名称列表</td>
</tr>
<tr>
<td>array{object} BSSs</td>
<td>read</td>
<td>代表接口已知的 BSS 的 D-Bus 对象路径列表，例如扫描结果</td>
</tr>
<tr>
<td>array{object} Networks</td>
<td>read</td>
<td>代表已配置网络的 D-Bus 对象路径列表</td>
</tr>
<tr>
<td>bool FastReauth</td>
<td>readwrite</td>
<td>与 wpa_supplicant 配置文件中的 fast_reauth 条目相同</td>
</tr>
<tr>
<td>int32 ScanInterval</td>
<td>readwrite</td>
<td>扫描合适 AP 的间隔时间（以秒为单位）。必须 &gt;&#x3D; 0</td>
</tr>
<tr>
<td>string PKCS11EnginePath</td>
<td>read</td>
<td>PKCS #11 引擎路径</td>
</tr>
<tr>
<td>string PKCS11ModulePath</td>
<td>read</td>
<td>PKCS #11 模块路径</td>
</tr>
<tr>
<td>int32 DisconnectReason</td>
<td>read</td>
<td>最近的 IEEE 802.11 断开连接原因代码。负值表示本地生成的断开连接</td>
</tr>
</tbody></table>
<p><strong>信号介绍：</strong></p>
<table>
<thead>
<tr>
<th>信号名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>ScanDone ( b : success )</td>
<td>扫描完成</td>
</tr>
<tr>
<td>BSSAdded ( o : BSS, a{sv} : properties )</td>
<td>BSS新增</td>
</tr>
<tr>
<td>BSSRemoved ( o : BSS )</td>
<td>BSS移除</td>
</tr>
<tr>
<td>BlobAdded ( s : blobName )</td>
<td>blob新增</td>
</tr>
<tr>
<td>BlobRemoved ( s : blobName )</td>
<td>blob移除</td>
</tr>
<tr>
<td>NetworkAdded ( o : network, a{sv} : properties )</td>
<td>network新增</td>
</tr>
<tr>
<td>NetworkRemoved ( o : network )</td>
<td>network移除</td>
</tr>
<tr>
<td>NetworkSelected ( o : network )</td>
<td>network选择</td>
</tr>
<tr>
<td>StaAuthorized ( s : mac )</td>
<td>已授权新站使用接口</td>
</tr>
<tr>
<td>StaDeauthorized ( s : mac )</td>
<td>已取消对某个站的接口授权</td>
</tr>
<tr>
<td>PropertiesChanged ( a{sv} : properties )</td>
<td>一些属性有改变</td>
</tr>
<tr>
<td>Certification ( a{sv} : parameters )</td>
<td>有关服务器 TLS 证书的信息</td>
</tr>
<tr>
<td>EAP ( s : status, s : parameter )</td>
<td>有关 EAP 对等状态的信息</td>
</tr>
<tr>
<td>NetworkRequest ( o : network, s : field, s : txt )</td>
<td>请求网络参数。NetworkResponse() 用于提供所请求的参数</td>
</tr>
<tr>
<td>ProbeRequest ( a{sv} : args )</td>
<td>有关已接收探测请求帧的信息。此信号仅发送给已使用 SubscribeProbeReq() 订阅接收事件的单个应用程序</td>
</tr>
</tbody></table>
<h3 id="fi-w1-wpa-supplicant1-BSS"><a href="#fi-w1-wpa-supplicant1-BSS" class="headerlink" title="fi.w1.wpa_supplicant1.BSS"></a>fi.w1.wpa_supplicant1.BSS</h3><p>表示已扫描 BSS（即扫描结果）的对象实现的接口</p>
<p><strong>接口介绍：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:Service: fi.w1.wpa_supplicant1</span><br><span class="line">:Interface: fi.w1.wpa_supplicant1.BSS</span><br><span class="line">:Object path: /fi/w1/wpa_supplicant1/Interfaces/index/BSSs/serial  (serial is 0、1、2 ...)</span><br></pre></td></tr></table></figure>



<p><strong>方法介绍:</strong></p>
<p>无</p>
<p><strong>属性介绍:</strong></p>
<table>
<thead>
<tr>
<th>属性名称</th>
<th>权限</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>array{byte} BSSID</td>
<td>read</td>
<td>BSS的BSSID</td>
</tr>
<tr>
<td>array{byte} SSID</td>
<td>read</td>
<td>BSS的SSID</td>
</tr>
<tr>
<td>array{string, variant} WPA</td>
<td>read</td>
<td>BSS的WPA信息</td>
</tr>
<tr>
<td>array{string, variant} RSN</td>
<td>read</td>
<td>BSS的RSN信息</td>
</tr>
<tr>
<td>array{string, variant} WPS</td>
<td>read</td>
<td>BSS的WPS信息</td>
</tr>
<tr>
<td>array{byte} IEs</td>
<td>read</td>
<td>BSS 的所有 IE 作为 TLV 链</td>
</tr>
<tr>
<td>bool Privacy</td>
<td>read</td>
<td>指示 BSS 是否支持隐私</td>
</tr>
<tr>
<td>string Mode</td>
<td>read</td>
<td>描述 BSS 的模式</td>
</tr>
<tr>
<td>uint16 Frequency</td>
<td>read</td>
<td>BSS 的频率（MHz）</td>
</tr>
<tr>
<td>array{uint32} Rates</td>
<td>read</td>
<td>按降序排列的 BSS 支持的速率（单位为比特&#x2F;秒）</td>
</tr>
<tr>
<td>int16 Signal</td>
<td>read</td>
<td>BSS 信号强度</td>
</tr>
<tr>
<td>uint32 Age</td>
<td>read</td>
<td>自上次看到 BSS 以来的秒数</td>
</tr>
</tbody></table>
<p><strong>信号介绍</strong></p>
<table>
<thead>
<tr>
<th>信号名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>PropertiesChanged ( a{sv} : properties )</td>
<td>一些属性发生了改变</td>
</tr>
</tbody></table>
<h3 id="fi-w1-wpa-supplicant1-Network"><a href="#fi-w1-wpa-supplicant1-Network" class="headerlink" title="fi.w1.wpa_supplicant1.Network"></a>fi.w1.wpa_supplicant1.Network</h3><p>由代表配置网络的对象实现的接口，即由 fi.w1.wpa_supplicant1.Interface.AddNetwork 返回。</p>
<p><strong>方法介绍：</strong></p>
<p>无</p>
<p><strong>属性介绍：</strong></p>
<table>
<thead>
<tr>
<th>属性名称</th>
<th>权限</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>bool Enabled</td>
<td>readwrite</td>
<td>确定配置的网络是否启用</td>
</tr>
<tr>
<td>array{string,variant}</td>
<td>readwrite</td>
<td>wpa_supplicant 配置文件的“网络”块的条目</td>
</tr>
</tbody></table>
<p><strong>信号介绍：</strong></p>
<table>
<thead>
<tr>
<th>信号名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>PropertiesChanged ( a{sv} : properties )</td>
<td>一些属性发生了改变</td>
</tr>
</tbody></table>
<h2 id="wpa-cli"><a href="#wpa-cli" class="headerlink" title="wpa_cli"></a>wpa_cli</h2><p>wpa_cli是wpa_supplicant的客户端，可以实现WiFi的扫描、连接、断开、移除等功能。</p>
<h2 id="参考信息"><a href="#参考信息" class="headerlink" title="参考信息"></a>参考信息</h2><p><a href="https://wiki.archlinux.org/title/Wpa_supplicant">1、wpa_supplicant</a></p>
<p><a href="https://w1.fi/wpa_supplicant/devel/">2、wpa_supplicant &#x2F; hostapd</a></p>
<p><a href="https://w1.fi/wpa_supplicant/devel/dbus.html">3、wpa_supplicant 官方dbus接口文档</a></p>
<p><a href="https://www.cnblogs.com/chenbin7/p/3266164.html">4、wpa_supplicant提供的接口</a></p>
<p><a href="https://android.googlesource.com/platform/external/wpa_supplicant_8/+/master/wpa_supplicant/examples/wpas-dbus-new.py">5、wpa_supplicant dbus api example using python</a></p>
<p><a href="https://kingtuo123.com/posts/wpa_supplicant/">6、使用 wpa_supplicant 连接无线网络</a></p>
]]></content>
      <categories>
        <category>Wi-Fi</category>
      </categories>
      <tags>
        <tag>Wi-Fi</tag>
        <tag>wpa_supplicant</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog deploy to Github Page.md</title>
    <url>/2024/08/11/2024/Blog-deploy-to-Github-Page/</url>
    <content><![CDATA[<blockquote>
<p>2024-08-11 星期日 晴</p>
</blockquote>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><blockquote>
<p>前置条件：<br>1、本地可以正常运行hexo<br>2、已经安装git<br>3、已经注册了Github账号</p>
</blockquote>
<p>首先需要拿到Github的仓库域名，接着上传本地的公钥到Github</p>
<h3 id="获取域名"><a href="#获取域名" class="headerlink" title="获取域名"></a>获取域名</h3><p>在Github上新建一个仓库，仓库命名：<code>eiSouthBoy.github.io</code>，eiSouthBoy 是用户名，根据自己实际用户名修改，仓库的属性选择：<code>Public</code>，最后点击创建。</p>
<p>此时，在 eiSouthBoy.github.io 仓库页面，进入到仓库的Settings–&gt;Pages，可以看到Github提供的Github Pages，给出了网址：<code>Your site is live at https://eisouthboy.github.io/</code>，可以在浏览器输入网址直接访问的。</p>
<h3 id="上传公钥"><a href="#上传公钥" class="headerlink" title="上传公钥"></a>上传公钥</h3><p>将本地的博客上传到Github上，需要使用Github的写入权限，所以需要将本地用户的公钥上传到Github。</p>
<p>创建公钥前，需要配置git的用户名和邮箱</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入ubuntu22.04容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it -u cj 52e0bd6293ac /usr/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /workspace/blog</span><br><span class="line">git config --global user.name=eiSouthBoy</span><br><span class="line">git config --global user.email=caoj97141@gmail.com</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>git用户名和邮箱添加后，此时可以生成公钥了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 该命令有交互，默认全部回车即可</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>该命令执行完毕后，提示公钥文件保存的路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cj@52e0bd6293ac:/workspace/blog$ ll ~/.ssh/</span><br><span class="line">total 28</span><br><span class="line">drwx------ 2 cj cj 4096 Aug 11 03:53 ./</span><br><span class="line">drwxr-x--- 1 cj cj 4096 Aug 11 07:57 ../</span><br><span class="line">-rw------- 1 cj cj 2602 Aug 11 03:48 id_rsa</span><br><span class="line">-rw-r--r-- 1 cj cj  569 Aug 11 03:48 id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>将公钥信息上传到Github，即将id_rsa.pub文件内容复制到Github的<strong>github个人图像 –&gt; Settings –&gt; SSH and GPG Keys –&gt; New SSH Key</strong>，点击创建，就会创建SSH Key信息。该信息形式如下所示（为了不保留个人信息，SHA256隐藏了关键信息）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cj@52e0bd6293ac</span><br><span class="line">SHA256:*******************************************</span><br><span class="line">Added on Aug 11, 2024</span><br><span class="line">Last used within the last week — Read/write</span><br></pre></td></tr></table></figure>

<p>测试 SSH 是否能连接到 GitHub 的 SSH 服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>出现如下提示，即说明本地能够通过SSH连接到Github的SSH服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hi eiSouthBoy! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>通过git方式上传博客到Github，还需要下载一个插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>在部署前，必须要修改 <code>/workspace/blog/_config.yml</code> 文件，修改的部分内容有：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改第一处</span></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://eisouthboy.github.io</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改第二处</span></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:eiSouthBoy/eiSouthBoy.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>现在可以部署到Github上了，过程如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /workspace/blog</span><br><span class="line">hexo clean &amp;&amp; hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>记录 <code>hexo d</code> 命令的返回结果信息 (非首次提交)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cj@52e0bd6293ac:/workspace/blog$ hexo d</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend <span class="built_in">dirs</span>...</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">Enumerating objects: 74, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (74/74), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 12 threads</span><br><span class="line">Compressing objects: 100% (29/29), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (43/43), 21.26 KiB | 3.54 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 43 (delta 19), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (19/19), completed with 14 <span class="built_in">local</span> objects.</span><br><span class="line">To github.com:eiSouthBoy/eiSouthBoy.github.io.git</span><br><span class="line">   bbb8d53..60a542a  HEAD -&gt; main</span><br><span class="line">Branch <span class="string">&#x27;master&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;main&#x27;</span> from <span class="string">&#x27;git@github.com:eiSouthBoy/eiSouthBoy.github.io.git&#x27;</span>.</span><br><span class="line">INFO  Deploy <span class="keyword">done</span>: git</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>部署成功后，可以在宿主机的浏览器输入：<code>https://eisouthboy.github.io</code> 访问博客。</p>
<h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p>在部署过程中，可能遇到一些报错或者疑点，希望记录下来。用于提醒自己，还可以提醒后来人。</p>
<h3 id="疑点1"><a href="#疑点1" class="headerlink" title="疑点1"></a>疑点1</h3><p>在执行 <code>hexo d</code> 命令时，有一句提醒：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Branch <span class="string">&#x27;master&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;main&#x27;</span> from <span class="string">&#x27;git@github.com:eiSouthBoy/eiSouthBoy.github.io.git&#x27;</span>.</span><br></pre></td></tr></table></figure>

<p>本地分支 master 建立跟踪在远程分支main上。Github从2020年10月开始，创建仓库的默认分支名：main，至于原因可参考：<a href="https://pages.carm.cc/doc/branch-main.html">为什么Git分支开始从“master”变为“main”了？</a></p>
<p>但是 <code>git init</code> 初始化一个本地仓库时，默认的分支是：<code>master</code>，这就是为什么本地master分支和远程main分支名称不一致的原因了。</p>
<p>当然，我们可以修改本地的master名称，过程如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /workspace/blog/.deploy_git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改分支名</span></span><br><span class="line">git branch -m master main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分支信息</span></span><br><span class="line">git branch</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这是本地分支名已经修改完成了，再次执行部署命令 ，验证一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cj@52e0bd6293ac:/workspace/blog$ hexo d</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend <span class="built_in">dirs</span>...</span><br><span class="line">[main 6aa2596] Site updated: 2024-08-11 10:04:48</span><br><span class="line"> 4 files changed, 28 insertions(+), 10 deletions(-)</span><br><span class="line">Enumerating objects: 21, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (21/21), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 12 threads</span><br><span class="line">Compressing objects: 100% (7/7), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (11/11), 3.32 KiB | 1.66 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 11 (delta 5), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (5/5), completed with 5 <span class="built_in">local</span> objects.</span><br><span class="line">To github.com:eiSouthBoy/eiSouthBoy.github.io.git</span><br><span class="line">   60a542a..6aa2596  HEAD -&gt; main</span><br><span class="line">Branch <span class="string">&#x27;main&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;main&#x27;</span> from <span class="string">&#x27;git@github.com:eiSouthBoy/eiSouthBoy.github.io.git&#x27;</span>.</span><br><span class="line">INFO  Deploy <span class="keyword">done</span>: git</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过上面的信息，可以看到本地分支名和远程分支名一致了。</p>
]]></content>
      <tags>
        <tag>Github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Create Blog with hexo</title>
    <url>/2024/08/10/2024/Create-Blog-with-hexo/</url>
    <content><![CDATA[<blockquote>
<p>2024-08-10 星期六 晴</p>
</blockquote>
<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>在大学时（2015年~2019年），我觉得搭建一个博客很酷的事。虽然觉得很酷，但我仍然没有去实现这个很酷的事。直到三年后，我尝试了去搭建个人博客站点，但是对于我难度确实不小（知识储备不足），失败并搁浅了。</p>
<p>为什么几年后的今天，我又尝试去搭建个人博客呢？ 一方面，我看到博客园近两年来危机不断，而我当初为了寻求方便，所以一直在博客园记录自己的东西。当然，我也希望博客园能尽快走出危机，准备去买一件博客园的周边T恤，权当赞助博客园。但个人能力有限，只能做到这点帮助，最终还是需要博客园找到自己的运营模式，毕竟单纯依靠粉丝支援和赞助只能解决一时困境。另一方面，随着这几年的技术经验的积累，完全有信心把博客搭建起来。<br>鸡蛋不能放在同一个篮子里，在博客园存放一份，Github也要存放一份，当然在本地主机上还是要存放一份。这样子就比较保险了，毕竟数据是无价的。</p>
<h2 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h2><p>搭建博客的方式有很多种，例如：WordPress、huogo、hexo等等。但是我必须寻求一种适合我的搭建方式，我的要求包括：</p>
<ul>
<li>支持markdown<br>  我习惯于了使用markdown写东西，用起来方便、快捷。</li>
<li>简单且易用<br>  我希望能够通过简单的命令行就能够部署起来</li>
<li>支持Github<br>  我有使用Github的习惯，一些学习的项目会上传到Github</li>
<li>开源<br>  我习惯使用开源的东西，支持自定义很多东西</li>
</ul>
<p>经过一段时间的挑选，hexo基本符合我的需求，而且生态也比较好，出现问题也容易解决，我决定使用hexo搭建个人博客站点。	</p>
<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><blockquote>
<p>搭建环境：<br>1、ubuntu22.04容器<br>2、npm (v8.5.1)<br>3、node (v12.22.9)<br>4、git (v2.34.1)</p>
</blockquote>
<p>我的电脑系统是Ubuntu22.04，并且已经安装了Docker。我不希望hexo的环境影响到我的Ubuntu22.04系统，所以我决定通过Docker创建Ubuntu22.04容器来作为搭建博客的环境。同时，我学习Docker技术的时间也就一周左右，也能通过搭建博客的过程中，加强对Docker的使用和理解，一举两得。</p>
<h3 id="拉取ubuntu22-04镜像"><a href="#拉取ubuntu22-04镜像" class="headerlink" title="拉取ubuntu22.04镜像"></a>拉取ubuntu22.04镜像</h3><p>首先，搜索一下镜像源是否存在ubuntu22.04镜像，可以执行命令： <code>docker search ubuntu:22.04</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">caojun@caojun-NMH-WCX9:~/07-docker$ docker search ubuntu:22.04</span><br><span class="line">NAME                                              DESCRIPTION                                     STARS     OFFICIAL</span><br><span class="line">ubuntu                                            Ubuntu is a Debian-based Linux operating sys…   17202     [OK]</span><br><span class="line">ubuntu-debootstrap                                DEPRECATED; use <span class="string">&quot;ubuntu&quot;</span> instead                52        [OK]</span><br><span class="line">ubuntu-upstart                                    DEPRECATED, as is Upstart (find other proces…   115       [OK]</span><br><span class="line">apache/cassandra-testing-ubuntu2004-java11        https://github.com/apache/cassandra-builds/t…   2         </span><br><span class="line">antrea/antrea-ubuntu-arm64                                                                        2         </span><br><span class="line">osrf/ubuntu_i386                                  Ubuntu i386 Docker Base Images                  2         </span><br><span class="line">istio/app_sidecar_base_ubuntu_xenial              Image <span class="keyword">for</span> testing                               0         </span><br><span class="line">istio/app_sidecar_ubuntu_jammy                    Image <span class="keyword">for</span> testing                               0         </span><br><span class="line">envoyproxy/envoy-build-ubuntu                                                                     7         </span><br><span class="line">eclipse/ubuntu_jdk8                               Ubuntu, JDK8, Maven 3, git, curl, nmap, mc, …   17        </span><br><span class="line">osrf/ubuntu_arm64                                 Ubuntu Arm64 Base Images                        1         </span><br><span class="line">dokken/ubuntu-20.04                               Ubuntu 20.04 image <span class="keyword">for</span> use with Test Kitchen…   3         </span><br><span class="line">opensciencegrid/osgvo-ubuntu-18.04                OSG VO<span class="string">&#x27;s base Ubuntu 18.04 image                0         </span></span><br><span class="line"><span class="string">dokken/ubuntu-18.04                               Ubuntu 18.04 image for use with Test Kitchen…   5         </span></span><br><span class="line"><span class="string">fnndsc/ubuntu-python3                             A slim Ubuntu-based Python3 image               33        </span></span><br><span class="line"><span class="string">apache/cassandra-ubuntu2004_test                  Apache Cassandra                                0         </span></span><br><span class="line"><span class="string">jenkinsciinfra/jenkins-agent-ubuntu-20.04         &quot;All-in-one&quot; agent image for the Jenkins Inf…   1         </span></span><br><span class="line"><span class="string">antrea/ubuntu                                                                                     1         </span></span><br><span class="line"><span class="string">dokken/ubuntu-22.04                               Ubuntu 22.04 image for use with Test Kitchen…   3         </span></span><br><span class="line"><span class="string">antrea/base-ubuntu                                                                                1         </span></span><br><span class="line"><span class="string">ubuntu/cortex                                     Cortex provides storage for Prometheus. Long…   4         </span></span><br><span class="line"><span class="string">jenkinsciinfra/jenkins-agent-ubuntu-22.04         &quot;All-in-one&quot; agent image for the Jenkins Inf…   0         </span></span><br><span class="line"><span class="string">gmao/ubuntu20-geos-env                                                                            0         </span></span><br><span class="line"><span class="string">dokken/ubuntu-16.04                               Ubuntu 16.04 image for use with Test Kitchen…   2         </span></span><br><span class="line"><span class="string">pytorch/pytorch-binary-docker-image-ubuntu16.04                                                   6    </span></span><br></pre></td></tr></table></figure>

<p>从上面的信息，可以看到镜像源包括了：ubuntu:18.04 、ubuntu:20.04 、ubuntu:22.04。直接拉取镜像到本地，执行命令： <code>docker pull ubuntu22.04</code><br>拉取成功后，可以在本地查看所有镜像，执行命令：<code>docker images</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">caojun@caojun-NMH-WCX9:~/07-docker$ docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">ubuntu        22.04     8a3cdc4d1ad3   6 weeks ago     77.9MB</span><br><span class="line">ubuntu        20.04     5f5250218d28   2 months ago    72.8MB</span><br><span class="line">hello-world   latest    d2c94e258dcb   15 months ago   13.3kB</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过上述的信息，可以看到拉取的ubuntu22.04镜像只有77.9MB。很多基础工具软件都没有，所以有必要安装并配置一下基础环境，但是先要宿主机上配置一些东西。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为了容器映射卷，创建一个文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/07-docker/blog-ubuntu22_04</span><br><span class="line"><span class="built_in">cd</span> ~/07-docker/blog-ubuntu22_04</span><br><span class="line"></span><br><span class="line"><span class="comment"># 宿主机防火墙开放8110端口，先查一下8110端口是否被占用</span></span><br><span class="line"><span class="comment"># 若没有被占用，就用8110来做映射</span></span><br><span class="line">netstat -ap | grep 8110</span><br><span class="line"></span><br><span class="line"><span class="comment"># 防火墙开放8110</span></span><br><span class="line">ufw <span class="built_in">enable</span></span><br><span class="line">ufw allow 8110</span><br><span class="line">ufw status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并运行容器，image_id=8a3cdc4d1ad3</span></span><br><span class="line">docker run -itd -p 127.0.0.1:8110:4000 -e LANG=C.utf8 -e LC_ALL=C.utf8 --restart=always -v <span class="variable">$PWD</span>:/workspace -u 1000 --security-opt seccomp=unconfined 8a3cdc4d1ad3</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>完成宿主机上的一些基本配置后，可以进入ubuntu22.04容器配置环境了。首次进入ubuntu22.04容器还是要把基础环境搭起来，不然使用起来很不方便。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入ubuntu22.04容器，container_id=52e0bd6293ac</span></span><br><span class="line">docker <span class="built_in">exec</span> -it -u root 52e0bd6293ac /usr/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为root用户创建密码</span></span><br><span class="line">passwd root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建普通用户cj</span></span><br><span class="line">useradd -u 1000 -m -s /usr/bin/bash cj</span><br><span class="line">passwd cj</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到普通用户cj</span></span><br><span class="line">su cj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新apt源和升级本地软件包</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装基础工具软件</span></span><br><span class="line"><span class="built_in">sudo</span> apt install -y git net-tools iputils-ping build-essential vim <span class="built_in">sudo</span> curl</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面基本环境搭建起来后，发现有两个小问题：</p>
<ul>
<li>cj用户无法使用sudo</li>
<li>git命令无法自动补全</li>
</ul>
<p><strong>解决第一个问题：</strong></p>
<p>在 <code>/etc/sudoers</code> 文件中，把cj的权限添加进去，对于整个文件仅新增一行即可。<br>由于 <code>/etc/sudoers</code> 文件的权限是：440，所以先修改文件权限才能修改文件，执行命令：<code>sudo chmod 640 /etc/sudoers</code></p>
<p>打开文件，执行：<code>vim /etc/sudoers</code>，新增一行：<code>cj	ALL=(ALL:ALL) ALL</code>，给出修改后的部分内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 省略...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User privilege specification</span></span><br><span class="line">root	ALL=(ALL:ALL) ALL</span><br><span class="line">cj	ALL=(ALL:ALL) ALL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略...</span></span><br></pre></td></tr></table></figure>

<p>修改并保存文件，需要将该文件的权限修改回来，执行命令：<code>sudo chmod 440 /etc/sudoers</code></p>
<p><strong>解决第二个问题：</strong></p>
<p>ubuntu22.04容器没有激活git的自动补全脚本，所以git相关的命令都无法自动补全。<br>激活git自动补全脚本，执行命令：<code>source /usr/share/bash-completion/completions/git</code></p>
<p>至此，ubuntu22.04容器的基本环境准备完成了，可以进入到下一步。</p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>安装hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新apt源</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载hexo的依赖包</span></span><br><span class="line"><span class="built_in">sudo</span> apt intall node npm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载hexo</span></span><br><span class="line"><span class="built_in">sudo</span> npm install -g hexo-cli</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>hexo安装完成后，可以查看版本，执行命令：<code>hexo -v</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cj@52e0bd6293ac:/workspace/blog$ hexo -v</span><br><span class="line">INFO  Validating config</span><br><span class="line">hexo: 7.3.0</span><br><span class="line">hexo-cli: 4.3.2</span><br><span class="line">os: linux 6.5.0-45-generic Ubuntu 22.04.4 LTS 22.04.4 LTS (Jammy Jellyfish)</span><br><span class="line">node: 12.22.9</span><br><span class="line">v8: 7.8.279.23-node.56</span><br><span class="line">uv: 1.43.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">ares: 1.18.1</span><br><span class="line">modules: 72</span><br><span class="line">nghttp2: 1.43.0</span><br><span class="line">napi: 8</span><br><span class="line">llhttp: 2.1.6</span><br><span class="line">http_parser: 2.9.4</span><br><span class="line">openssl: 1.1.1m</span><br><span class="line">cldr: 40.0</span><br><span class="line">icu: 70.1</span><br><span class="line">tz: 2021a3</span><br><span class="line">unicode: 14.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>通过hexo初始化一个博客站点，在本地运行博客站点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为博客创建根目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /workspace/blog</span><br><span class="line"><span class="built_in">cd</span> /workspace/blog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化博客</span></span><br><span class="line">hexo init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行博客，可以通过参数-p指定端口，默认端口是4000</span></span><br><span class="line">hexo s</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在执行：<code>hexo s</code> 时会失败，提示如下报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% extends ‘_layout.swig‘ %&#125; &#123;% import ‘_macro/post.swig‘ as post_template %&#125;</span><br></pre></td></tr></table></figure>

<p>经过在网上查找，发现hexo缺少了swig模块，现在将该模块下载到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /workspace/blog</span><br><span class="line">npm i hexo-renderer-swig</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>再次运行博客，可以看下如下提示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cj@52e0bd6293ac:/workspace/blog$ hexo s</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN  ========================= ATTENTION! ==========================</span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   NexT repository is moving here: https://github.com/theme-next </span><br><span class="line">WARN  ===============================================================</span><br><span class="line">WARN   It<span class="string">&#x27;s rebase to v6.0.0 and future maintenance will resume there</span></span><br><span class="line"><span class="string">WARN  ===============================================================</span></span><br><span class="line"><span class="string">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p>此时已经成功了，可以在ubuntu22.04容器内访问：<code>http://localhost:4000/</code>，可以通过curl去访问博客，但是这没法渲染。ubuntu22.04容器又没有浏览器，所以只能通过宿主机的浏览器去访问博客，在创建ubuntu22.04容器时，就已经做了端口映射：<code>-p 127.0.0.1:8110:4000</code>，所以宿主机访问 <code>http://localhost:8110</code> 就是访问ubuntu22.04容器 <code>http://localhost:4000</code>。所以，直接在宿主机的浏览器地址栏输入：<code>http://localhost:8110</code> 即可看到博客内容。</p>
<p>至此，在ubuntu22.04容器上基于hexo搭建个人博客就完成了。后续还会修改博客的主题（选择：next主题），并对next主题自定义修改，以及部署到Github。</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Blog</tag>
        <tag>hexo-theme-next</tag>
      </tags>
  </entry>
</search>
